using Core;
using Core.Configuration;
using Core.DatabaseOps;
using Core.DataContracts.Requests;
using Core.DataContracts.Responses;
using Core.SYS_Classes;
using Core.SYS_Enums;
using Core.SYS_Interfaces;
using CoreInterfaces;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NodaTime;
using NodaTime.Text;
using NSubstitute;
using SCImplementations;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MockTests
{
    [TestClass]
    public class UT_Validation
    {
        #region Is_Valid_Email_Message

        [TestMethod]
        public void Validation_IsValidEmailMessage()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            string inputStr = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Email_Message(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailMessageWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Email_Message(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailMessageWithInputStrNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Email_Message(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailMessageWithInputStrMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Email_Message(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_String

        [TestMethod]
        public void Validation_IsValidString()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidStringWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidStringWithInputStrNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidStringWithInputStrMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Long_String

        [TestMethod]
        public void Validation_IsValidLongString()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Long_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidLongStringWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Long_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidLongStringWithInputStrNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Long_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidLongStringWithInputStrMorethan10000Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Long_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_NameStr

        [TestMethod]
        public void Validation_IsValidNameStr()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "Test string";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_NameStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNameStrWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_NameStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNameStrWithInputStrNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_NameStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNameStrWithInputStrMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_NameStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_DescriptionStr

        [TestMethod]
        public void Validation_IsValidDescriptionStr()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "Test string";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DescriptionStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDescriptionStrWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DescriptionStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDescriptionStrWithInputStrNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DescriptionStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDescriptionStrWithInputStrMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string inputStr = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DescriptionStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_EmailAddress
        [TestMethod]
        public void Validation_IsValidEmailAddress()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string email_addr = "xyz@gmail.com";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_EmailAddress(email_addr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailAddressWithEmailAddrEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string email_addr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_EmailAddress(email_addr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailAddressWithEmailAddrNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string email_addr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_EmailAddress(email_addr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailAddressWithEmailAddrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string email_addr = "abc";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_EmailAddress(email_addr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_MsDuration

        [TestMethod]
        public void Validation_IsValidMsDuration()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long durationInMs = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MsDuration(durationInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMsDurationWithDurationInMsInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long durationInMs = 1209600002;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MsDuration(durationInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMsDurationWithDurationInMsMinuseValue()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long durationInMs = -1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MsDuration(durationInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Password

        [TestMethod]
        public void Validation_IsValidPassword()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string password = "TestPassword!@#";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Password(password);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPasswordWithPasswordEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string password = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Password(password);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPasswordWithPasswordNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string password = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Password(password);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPasswordWithPasswordMorethan30Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string password = "There are more than 30 character in this password for testing it's functionality or Validation work correctly or not";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Password(password);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_DateTime_String

        [TestMethod]
        public void Validation_IsValidDateTimeString()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string str_date_time = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DateTime_String(str_date_time);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDateTimeStringWithInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string str_date_time = DateTime.Now.ToString();
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DateTime_String(str_date_time);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_DateTime
        [TestMethod]
        public void Validation_IsValidDateTime()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            Instant str_date_time = InstantPattern.ExtendedIsoPattern.Parse("2017-01-13T10:02:59.0000000Z").Value;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DateTime(str_date_time);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Tag_Name

        [TestMethod]
        public void Validation_IsValidTagName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string categorie_name = "Test Category";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Tag_Name(categorie_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTagNameWithCategorieNameEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string categorie_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Tag_Name(categorie_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTagNameWithCategorieNameNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string categorie_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Tag_Name(categorie_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTagNameWithCategorieNameMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string categorie_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Tag_Name(categorie_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Organisation_Name

        [TestMethod]
        public void Validation_IsValidOrganisationName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string newOrgName = "Test OrgName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Organisation_Name(newOrgName);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrganisationNameWithNewOrgNameEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string newOrgName = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Organisation_Name(newOrgName);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrganisationNameWithNewOrgNameNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string newOrgName = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Organisation_Name(newOrgName);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrganisationNameWithNewOrgNameMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string newOrgName = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Organisation_Name(newOrgName);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Role_Name

        [TestMethod]
        public void Validation_IsValidRoleName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string role_name = "Test Role Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Role_Name(role_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleNameWithRoleNameEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string role_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Role_Name(role_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleNameWithNewRoleNameNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string role_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Role_Name(role_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleNameWithRoleNameMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string role_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Role_Name(role_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Resource_Name
        [TestMethod]
        public void Validation_IsValidResourceName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string resource_name = "Test Role Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Name(resource_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceNameWithResourceNameEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string resource_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Name(resource_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceNameWithResourceNameNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string resource_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Name(resource_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceNameWithResourceNameMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string resource_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Name(resource_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Categorie_ID

        [TestMethod]
        public void Validation_IsValidCategorieID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int categorie_id = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Categorie_ID(mockCoreProject, categorie_id, orgId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Currency

        [TestMethod]
        public void Validation_IsValidCurrency()
        {
            // ---------- Arrange--------------


            Validation Validation = new Validation();
            int value = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Currency(value);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCurrencyWithInvalid()
        {
            // ---------- Arrange--------------


            Validation Validation = new Validation();
            int value = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Currency(value);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Max_Decimal_Places_2

        [TestMethod]
        public void Validation_IsMaxDecimalPlaces2()
        {
            // ---------- Arrange--------------


            Validation Validation = new Validation();
            decimal dec = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Max_Decimal_Places_2(dec);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Known_Email_To_System
        [TestMethod]
        public void Validation_IsKnownEmailToSystem()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            string email_address = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_EmailAddress(email_address).Returns(x =>
            {
                return true;
            });

            bool is_known;
            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, out is_known).ReturnsForAnyArgs(x =>
            {
                x[2] = true;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsKnownEmailToSystemWithEmailAddressEmpty()
        {
            // ---------- Arrange--------------


            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            string email_address = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool is_known;
            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, out is_known).ReturnsForAnyArgs(x =>
            {
                x[2] = true;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsKnownEmailToSystemWithEmailAddressNull()
        {
            // ---------- Arrange--------------


            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            string email_address = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool is_known;
            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, out is_known).ReturnsForAnyArgs(x =>
            {
                x[2] = true;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsKnownEmailToSystemWithEmailAddressInvalid()
        {
            // ---------- Arrange--------------


            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            string email_address = "abc";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool is_known;
            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, out is_known).ReturnsForAnyArgs(x =>
            {
                x[2] = true;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsKnownEmailToSystemWithDBIsEmailKnownFail()
        {
            // ---------- Arrange--------------


            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string email_address = "abc@gmail.com";



            // ---------- Arrange--------------

            //----------- Act -----------------

            bool is_known;
            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, out is_known).ReturnsForAnyArgs(x =>
            {
                x[2] = true;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Activation_String_Valid
        [TestMethod]
        public void Validation_IsActivationStringValid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = "abc@gmail.com";


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = "IsActive";
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email, out activationStr).ReturnsForAnyArgs(x =>
            {
                x[2] = activationStr;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsActivationStringValidWithUserEmailEmpty()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = string.Empty;


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = "IsActive";
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email, out activationStr).ReturnsForAnyArgs(x =>
            {
                x[2] = activationStr;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsActivationStringValidWithUserEmailNull()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = null;


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = "IsActive";
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email, out activationStr).ReturnsForAnyArgs(x =>
            {
                x[2] = activationStr;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsActivationStringValidWithUserReadActivationStringDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = "abc@gmail.com";


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = "IsActive";
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email, out activationStr).ReturnsForAnyArgs(x =>
            {
                x[2] = activationStr;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsActivationStringValidWithActivationStrEmpty()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = "abc@gmail.com";


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = string.Empty;
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email, out activationStr).ReturnsForAnyArgs(x =>
            {
                x[2] = activationStr;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Appointment_ID

        [TestMethod]
        public void Validation_IsValidAppointmentID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool appointment_known = true;
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointment_known).ReturnsForAnyArgs(x =>
            {
                x[2] = appointment_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentIDWithAppointmentIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool appointment_known = true;
            int appointmentId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointment_known).ReturnsForAnyArgs(x =>
            {
                x[2] = appointment_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentIDWithAppointmentIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool appointment_known = true;
            Int32 appointmentId = int.MaxValue;
            appointmentId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointment_known).ReturnsForAnyArgs(x =>
            {
                x[2] = appointment_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentIDWithDBIsAppointmentIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool appointment_known = true;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointment_known).ReturnsForAnyArgs(x =>
            {
                x[2] = appointment_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Animal_ID

        [TestMethod]
        public void Validation_IsValidAnimalID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool animalKnown = true;
            int animalId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Animal_ID_Known(mockCoreProject, animalId, out animalKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = animalKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Animal_ID(mockCoreProject, animalId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAnimalIDWithMedicalRecordIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int animalId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool animalKnown = true;
            mockCoreDb.DB_Is_Animal_ID_Known(mockCoreProject, animalId, out animalKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = animalKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Animal_ID(mockCoreProject, animalId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAnimalIDWithMedicalRecordIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool animalKnown = true;
            Int32 animalId = int.MaxValue;
            animalId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Animal_ID_Known(mockCoreProject, animalId, out animalKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = animalKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Animal_ID(mockCoreProject, animalId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAnimalIDWithDBIsAnimalIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool animalKnown = true;
            int animalId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Animal_ID_Known(mockCoreProject, animalId, out animalKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = animalKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Animal_ID(mockCoreProject, animalId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_MedicalRecord_ID

        [TestMethod]
        public void Validation_IsValidMedicalRecordID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int medicalRecordId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool medicalRecordKnown = true;
            mockCoreDb.DB_Is_MedicalRecord_ID_Known(mockCoreProject, medicalRecordId, out medicalRecordKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = medicalRecordKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalRecord_ID(mockCoreProject, medicalRecordId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalRecordIDWithMedicalRecordIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool medicalRecordKnown = true;
            int medicalRecordId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalRecord_ID_Known(mockCoreProject, medicalRecordId, out medicalRecordKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = medicalRecordKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalRecord_ID(mockCoreProject, medicalRecordId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalRecordIDWithMedicalRecordIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool medicalRecordKnown = true;
            Int32 medicalRecordId = int.MaxValue;
            medicalRecordId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalRecord_ID_Known(mockCoreProject, medicalRecordId, out medicalRecordKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = medicalRecordKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalRecord_ID(mockCoreProject, medicalRecordId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalRecordIDWithDBIsMedicalRecordIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool medicalRecordKnown = true;
            int medicalRecordId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalRecord_ID_Known(mockCoreProject, medicalRecordId, out medicalRecordKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = medicalRecordKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_MedicalRecord_ID(mockCoreProject, medicalRecordId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_MedicalNote_ID

        [TestMethod]
        public void Validation_IsValidMedicalNoteID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool medicalNoteKnown = true;
            int medicalNoteId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalNote_ID_Known(mockCoreProject, medicalNoteId, out medicalNoteKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = medicalNoteKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalNote_ID(mockCoreProject, medicalNoteId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalNoteIDWithMedicalNoteIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool medicalNoteKnown = true;
            int medicalNoteId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalNote_ID_Known(mockCoreProject, medicalNoteId, out medicalNoteKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = medicalNoteKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalNote_ID(mockCoreProject, medicalNoteId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalNoteIDWithMedicalNoteIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool medicalNoteKnown = true;
            Int32 medicalNoteId = int.MaxValue;
            medicalNoteId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalNote_ID_Known(mockCoreProject, medicalNoteId, out medicalNoteKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = medicalNoteKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalNote_ID(mockCoreProject, medicalNoteId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalNoteIDWithDBIsMedicalNoteIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool medicalNoteKnown = true;
            int medicalNoteId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalNote_ID_Known(mockCoreProject, medicalNoteId, out medicalNoteKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = medicalNoteKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_MedicalNote_ID(mockCoreProject, medicalNoteId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_InvoiceableItem_ID

        [TestMethod]
        public void Validation_IsValidInvoiceableItemID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int invoiceableItemId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool invoiceableItemKnown = true;
            mockCoreDb.DB_Is_InvoiceableItem_ID_Known(mockCoreProject, invoiceableItemId, out invoiceableItemKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = invoiceableItemKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_InvoiceableItem_ID(mockCoreProject, invoiceableItemId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceableItemIDWithInvoiceableItemIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool invoiceableItemKnown = true;
            int invoiceableItemId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_InvoiceableItem_ID_Known(mockCoreProject, invoiceableItemId, out invoiceableItemKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = invoiceableItemKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_InvoiceableItem_ID(mockCoreProject, invoiceableItemId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceableItemIDWithInvoiceableItemIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool invoiceableItemKnown = true;
            Int32 invoiceableItemId = int.MaxValue;
            invoiceableItemId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_InvoiceableItem_ID_Known(mockCoreProject, invoiceableItemId, out invoiceableItemKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = invoiceableItemKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_InvoiceableItem_ID(mockCoreProject, invoiceableItemId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceableItemIDWithDBIsInvoiceableItemIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool invoiceableItemKnown = true;
            int invoiceableItemId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_InvoiceableItem_ID_Known(mockCoreProject, invoiceableItemId, out invoiceableItemKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = invoiceableItemKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_InvoiceableItem_ID(mockCoreProject, invoiceableItemId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Notification_ID

        [TestMethod]
        public void Validation_IsValidNotificationID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int notificationId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool notificationIdKnown = true;
            mockCoreDb.DB_Is_Notification_ID_Known(mockCoreProject, notificationId, out notificationIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = notificationIdKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Notification_ID(mockCoreProject, notificationId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationIDWithNotificationIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool invoiceableItemKnown = true;
            int notificationId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Notification_ID_Known(mockCoreProject, notificationId, out invoiceableItemKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = invoiceableItemKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Notification_ID(mockCoreProject, notificationId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationIDWithNotificationIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool invoiceableItemKnown = true;
            Int32 notificationId = int.MaxValue;
            notificationId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Notification_ID_Known(mockCoreProject, notificationId, out invoiceableItemKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = invoiceableItemKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Notification_ID(mockCoreProject, notificationId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationIDWithDBIsNotificationIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool invoiceableItemKnown = true;
            int notificationId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Notification_ID_Known(mockCoreProject, notificationId, out invoiceableItemKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = invoiceableItemKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Notification_ID(mockCoreProject, notificationId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_TSO_Id

        [TestMethod]
        public void Validation_IsValidTSOId()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int tso_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool tso_known = true;
            mockCoreDb.DB_Is_TSO_ID_Known(mockCoreProject, tso_id, out tso_known).ReturnsForAnyArgs(x =>
            {
                x[2] = tso_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, tso_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTSOIdWithTSOIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool tso_known = true;
            int tso_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TSO_ID_Known(mockCoreProject, tso_id, out tso_known).ReturnsForAnyArgs(x =>
            {
                x[2] = tso_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, tso_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTSOIdWithTSOIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool tso_known = true;
            Int32 tso_id = int.MaxValue;
            tso_id += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TSO_ID_Known(mockCoreProject, tso_id, out tso_known).ReturnsForAnyArgs(x =>
            {
                x[2] = tso_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, tso_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTSOIdWithDBIsTSOIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool tso_known = true;
            int tso_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TSO_ID_Known(mockCoreProject, tso_id, out tso_known).ReturnsForAnyArgs(x =>
            {
                x[2] = tso_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, tso_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_Email_To_Send_ID
        [TestMethod]
        public void Validation_IsValidEmailToSendID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int email_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool email_known = true;
            mockCoreDb.DB_Is_Email_To_Send_ID_Known(mockCoreProject, email_id, out email_known).ReturnsForAnyArgs(x =>
            {
                x[2] = email_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Email_To_Send_ID(mockCoreProject, email_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailToSendIDWithEmailIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool email_known = true;
            int email_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Email_To_Send_ID_Known(mockCoreProject, email_id, out email_known).ReturnsForAnyArgs(x =>
            {
                x[2] = email_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, email_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailToSendIDWithEmailIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool email_known = true;
            Int32 email_id = int.MaxValue;
            email_id += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Email_To_Send_ID_Known(mockCoreProject, email_id, out email_known).ReturnsForAnyArgs(x =>
            {
                x[2] = email_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Email_To_Send_ID(mockCoreProject, email_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailToSendIDWithDBIsEmailToSendIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool email_known = true;
            int email_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Email_To_Send_ID_Known(mockCoreProject, email_id, out email_known).ReturnsForAnyArgs(x =>
            {
                x[2] = email_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Email_To_Send_ID(mockCoreProject, email_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Exception_ID

        [TestMethod]
        public void Validation_IsValidExceptionID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool exception_known = true;
            int exception_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exception_id, out exception_known).ReturnsForAnyArgs(x =>
            {
                x[2] = exception_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionIDWithExceptionIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool exception_known = true;
            int exception_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exception_id, out exception_known).ReturnsForAnyArgs(x =>
            {
                x[2] = exception_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionIDWithExceptionIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool exception_known = true;
            Int32 exception_id = int.MaxValue;
            exception_id += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exception_id, out exception_known).ReturnsForAnyArgs(x =>
            {
                x[2] = exception_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionIDWithDBIsEmailToSendIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool exception_known = true;
            int exception_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exception_id, out exception_known).ReturnsForAnyArgs(x =>
            {
                x[2] = exception_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_TimeScale

        [TestMethod]
        public void Validation_IsValidTimeScale()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();
            mockTimeScale.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds;
            mockTimeScale.start = DateTime.Now.ToString();
            mockTimeScale.end = DateTime.Now.AddSeconds(1).ToString();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TimeScale(mockTimeScale);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTimeScaleMSSpecific()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();
            mockTimeScale.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds + 1;
            mockTimeScale.start = DateTime.Now.ToString();
            mockTimeScale.end = DateTime.Now.AddSeconds(1).AddMilliseconds(1).ToString();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TimeScale(mockTimeScale);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Org_Customer
        [TestMethod]
        public void Validation_IsValidOrgCustomer()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, out listOfOrgCreatedContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgCreatedContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, out listOfOrgMemberContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgMemberContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });



            bool returnValue = Validation.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgCustomerWithReadAllOrgCreatedContactsDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, out listOfOrgCreatedContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgCreatedContacts;
                return ENUM_DB_Status.DB_FAIL;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, out listOfOrgMemberContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgMemberContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });



            bool returnValue = Validation.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgCustomerWithReadAllOrgMemberContactsDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, out listOfOrgCreatedContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgCreatedContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, out listOfOrgMemberContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgMemberContacts;
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });



            bool returnValue = Validation.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgCustomerWithGetLoginNameFromUserIDEmpty()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, out listOfOrgCreatedContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgCreatedContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, out listOfOrgMemberContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgMemberContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return string.Empty;
            });



            bool returnValue = Validation.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_User_Member_Of_Organisation

        [TestMethod]
        public void Validation_IsUserMemberOfOrganisation()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, out mockListOrg).ReturnsForAnyArgs(x =>
            {
                x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, userId, orgId, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsUserMemberOfOrganisationWithUserIdEqualSYSTEMWILDCARDINT()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = GeneralConfig.SYSTEM_WILDCARD_INT;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, out mockListOrg).ReturnsForAnyArgs(x =>
            {
                x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, userId, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsUserMemberOfOrganisationWithOrgIdDiff()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = 1;
            int orgId = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, out mockListOrg).ReturnsForAnyArgs(x =>
            {
                x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, userId, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Permissions_User_Can_Do_System_Action

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemAction()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.readAllCreated;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithActionIdReadMaxRender()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.readMaxRender;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithActionIdCreateOrg()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.createOrg;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithActionIdReadAllUserOrganisations()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.readAllUserOrganisations;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithActionIdUnknown()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithWithUserIdEqualSYSTEMWILDCARDINT()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int userId = GeneralConfig.SYSTEM_WILDCARD_INT;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.readAllUserOrganisations;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Permissions_User_Can_Do_Core_Action

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreAction()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;
            int roleId = 1;


            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------



            mockCoreSc.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                mockOrgReadMember.userId = 1;
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
           {

               mockOrgReadOwner.userId = 2;
               x[2] = mockOrgReadOwner;
               return ENUM_DB_Status.DB_SUCCESS;
           });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, out role_ids).ReturnsForAnyArgs(x =>
                   {
                       x[3] = role_ids;
                       return ENUM_DB_Status.DB_SUCCESS;
                   });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, out permission_actions).ReturnsForAnyArgs(x =>
            {
                permission_actions.Add(action_id);
                x[3] = permission_actions;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, out listOfOrgCreatedContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgCreatedContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, out listOfOrgMemberContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgMemberContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockCoreSc.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, userId, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithUserIdSYSTEMWILDCARDINT()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = GeneralConfig.SYSTEM_WILDCARD_INT;
            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadOrgOwnerUserSameUserId()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
            {
                mockOrgReadOwner.userId = 1;
                x[2] = mockOrgReadOwner;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadMemberDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_FAIL;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
            {
                mockOrgReadOwner.userId = 2;
                x[2] = mockOrgReadOwner;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, out role_ids).ReturnsForAnyArgs(x =>
            {
                x[3] = role_ids;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, out permission_actions).ReturnsForAnyArgs(x =>
            {
                permission_actions.Add(action_id);
                x[3] = permission_actions;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, out mockListOrg).ReturnsForAnyArgs(x =>
            {
                x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadOrgOwnerUserDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
            {
                mockOrgReadOwner.userId = 2;
                x[2] = mockOrgReadOwner;
                return ENUM_DB_Status.DB_FAIL;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, out role_ids).ReturnsForAnyArgs(x =>
            {
                x[3] = role_ids;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, out permission_actions).ReturnsForAnyArgs(x =>
            {
                permission_actions.Add(action_id);
                x[3] = permission_actions;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, out mockListOrg).ReturnsForAnyArgs(x =>
            {
                x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadRoleMappingIDsForUserDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
            {
                mockOrgReadOwner.userId = 2;
                x[2] = mockOrgReadOwner;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, out role_ids).ReturnsForAnyArgs(x =>
            {
                x[3] = role_ids;
                return ENUM_DB_Status.DB_FAIL;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, out permission_actions).ReturnsForAnyArgs(x =>
            {
                permission_actions.Add(action_id);
                x[3] = permission_actions;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, out mockListOrg).ReturnsForAnyArgs(x =>
            {
                x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadRolePermissionsDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
            {
                mockOrgReadOwner.userId = 2;
                x[2] = mockOrgReadOwner;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, out role_ids).ReturnsForAnyArgs(x =>
            {
                x[3] = role_ids;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, out permission_actions).ReturnsForAnyArgs(x =>
            {
                permission_actions.Add(action_id);
                x[3] = permission_actions;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, out mockListOrg).ReturnsForAnyArgs(x =>
            {
                x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithActionIdInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_createOrgInvoice;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
            {
                mockOrgReadOwner.userId = 2;
                x[2] = mockOrgReadOwner;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, out role_ids).ReturnsForAnyArgs(x =>
            {
                x[3] = role_ids;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, out permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
                x[3] = permission_actions;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, out listOfOrgCreatedContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgCreatedContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, out listOfOrgMemberContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgMemberContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgIdInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = -999;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_createOrgInvoice;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
            {
                mockOrgReadOwner.userId = 2;
                x[2] = mockOrgReadOwner;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, out role_ids).ReturnsForAnyArgs(x =>
            {
                x[3] = role_ids;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, out permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
                x[3] = permission_actions;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, out listOfOrgCreatedContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgCreatedContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, out listOfOrgMemberContacts).ReturnsForAnyArgs(x =>
            {
                x[2] = listOfOrgMemberContacts;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithRoleIdsNull()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, out mockOrgReadMember).ReturnsForAnyArgs(x =>
            {
                x[3] = mockOrgReadMember;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, out mockOrgReadOwner).ReturnsForAnyArgs(x =>
            {
                mockOrgReadOwner.userId = 2;
                x[2] = mockOrgReadOwner;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();

            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, out role_ids).ReturnsForAnyArgs(x =>
            {
                x[3] = role_ids;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, out permission_actions).ReturnsForAnyArgs(x =>
            {
                permission_actions.Add(action_id);
                x[3] = permission_actions;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, out mockListOrg).ReturnsForAnyArgs(x =>
            {
                x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_MoneyValue

        [TestMethod]
        public void Validation_IsValidMoneyValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValue.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_MoneyValue(mockMoneyValue);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMoneyValueWithMonetaryCurrencyUnknown()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockMoneyValue.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_MoneyValue(mockMoneyValue);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMoneyValueWithMonetaryAmountLessThanZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValue.monetaryAmount = -1;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_MoneyValue(mockMoneyValue);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMoneyValueWithMonetaryAmountMAXMONEYUSDVALUE()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValue.monetaryAmount = GeneralConfig.MAX_MONEY_USD_VALUE;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_MoneyValue(mockMoneyValue);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Role_ID

        [TestMethod]
        public void Validation_IsValidRoleID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool role_id_known = true;
            int role_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, role_id, out role_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = role_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Role_ID(mockCoreProject, role_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleIDWithRoleIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool role_id_known = true;
            int role_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, role_id, out role_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = role_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Role_ID(mockCoreProject, role_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleIDWithDBIsRoleIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool role_id_known = true;
            int role_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, role_id, out role_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = role_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Role_ID(mockCoreProject, role_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Invoice_ID
        [TestMethod]
        public void Validation_IsValidInvoiceID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int invoiceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool Invoice_id_known = true;
            mockCoreDb.DB_Is_Invoice_ID_Known(mockCoreProject, invoiceId, out Invoice_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = Invoice_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Invoice_ID(mockCoreProject, invoiceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceIDWithInvoiceIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool Invoice_id_known = true;
            int invoiceId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Invoice_ID_Known(mockCoreProject, invoiceId, out Invoice_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = Invoice_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Invoice_ID(mockCoreProject, invoiceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceIDWithDBIsInvoiceIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool Invoice_id_known = true;
            int invoiceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Invoice_ID_Known(mockCoreProject, invoiceId, out Invoice_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = Invoice_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Invoice_ID(mockCoreProject, invoiceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Product_ID

        [TestMethod]
        public void Validation_IsValidProductID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int productId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool productIdKnown = true;
            mockCoreDb.DB_Is_Product_ID_Known(mockCoreProject, productId, out productIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = productIdKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Product_ID(mockCoreProject, productId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductIDWithProductIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool productIdKnown = true;
            int productId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Product_ID_Known(mockCoreProject, productId, out productIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = productIdKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Product_ID(mockCoreProject, productId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductIDWithDBIsProductIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool productIdKnown = true;
            int productId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Product_ID_Known(mockCoreProject, productId, out productIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = productIdKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Product_ID(mockCoreProject, productId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Payment_ID
        [TestMethod]
        public void Validation_IsValidPaymentID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int PaymentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool paymentIdKnown = true;
            mockCoreDb.DB_Is_Payment_ID_Known(mockCoreProject, PaymentId, out paymentIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = paymentIdKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Payment_ID(mockCoreProject, PaymentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPaymentIDWithPaymentIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool paymentIdKnown = true;
            int PaymentId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Payment_ID_Known(mockCoreProject, PaymentId, out paymentIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = paymentIdKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Payment_ID(mockCoreProject, PaymentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPaymentIDWithDBIsProductIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool paymentIdKnown = true;
            int PaymentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Payment_ID_Known(mockCoreProject, PaymentId, out paymentIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = paymentIdKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Payment_ID(mockCoreProject, PaymentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_ServiceFulfilmentConfig_ID

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int serviceFulfilmentConfigId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool serviceFulfilmentConfigKnown = true;
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_ID_Known(mockCoreProject, serviceFulfilmentConfigId, out serviceFulfilmentConfigKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceFulfilmentConfigKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, serviceFulfilmentConfigId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigIDWithServiceFulfilmentConfigIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool serviceFulfilmentConfigKnown = true;
            int serviceFulfilmentConfigId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_ID_Known(mockCoreProject, serviceFulfilmentConfigId, out serviceFulfilmentConfigKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceFulfilmentConfigKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, serviceFulfilmentConfigId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigIDWithDBIsServiceFulfilmentConfigIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool serviceFulfilmentConfigKnown = true;
            int serviceFulfilmentConfigId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_ID_Known(mockCoreProject, serviceFulfilmentConfigId, out serviceFulfilmentConfigKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceFulfilmentConfigKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, serviceFulfilmentConfigId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigResourceMapID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool serviceFulfilmentConfigResMapKnown = true;
            int serviceFulfilmentConfigResMapId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_Resource_Map_ID_Known(mockCoreProject, serviceFulfilmentConfigResMapId, out serviceFulfilmentConfigResMapKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceFulfilmentConfigResMapKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, serviceFulfilmentConfigResMapId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigResourceMapIDWithServiceFulfilmentConfigResMapIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int serviceFulfilmentConfigResMapId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool serviceFulfilmentConfigResMapKnown = true;
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_Resource_Map_ID_Known(mockCoreProject, serviceFulfilmentConfigResMapId, out serviceFulfilmentConfigResMapKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceFulfilmentConfigResMapKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, serviceFulfilmentConfigResMapId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigResourceMapIDWithDBIsServiceFulfilmentConfigResourceMapIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool serviceFulfilmentConfigResMapKnown = true;
            int serviceFulfilmentConfigResMapId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_Resource_Map_ID_Known(mockCoreProject, serviceFulfilmentConfigResMapId, out serviceFulfilmentConfigResMapKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceFulfilmentConfigResMapKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, serviceFulfilmentConfigResMapId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_TempPaypalID

        [TestMethod]
        public void Validation_IsValidTempPaypalID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int tempPaypalId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool tempPaypalIdKnown = true;
            mockCoreDb.DB_Is_TempPaypal_ID_Known(mockCoreProject, tempPaypalId, out tempPaypalIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = tempPaypalIdKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TempPaypalID(mockCoreProject, tempPaypalId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTempPaypalIDWithTempPaypalIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool tempPaypalIdKnown = true;
            int tempPaypalId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TempPaypal_ID_Known(mockCoreProject, tempPaypalId, out tempPaypalIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = tempPaypalIdKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TempPaypalID(mockCoreProject, tempPaypalId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTempPaypalIDWithDBIsTempPaypalIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool tempPaypalIdKnown = true;
            int tempPaypalId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TempPaypal_ID_Known(mockCoreProject, tempPaypalId, out tempPaypalIdKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = tempPaypalIdKnown;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_TempPaypalID(mockCoreProject, tempPaypalId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_ID

        [TestMethod]
        public void Validation_IsValidRepeatID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int repeat_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool repeat_id_known = true;
            mockCoreDb.DB_Is_Repeat_ID_Known(mockCoreProject, repeat_id, out repeat_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = repeat_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Repeat_ID(mockCoreProject, repeat_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatIDWithRepeatIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool repeat_id_known = true;
            int repeat_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Repeat_ID_Known(mockCoreProject, repeat_id, out repeat_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = repeat_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Repeat_ID(mockCoreProject, repeat_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatIDWithDBIsRepeatIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool repeat_id_known = true;
            int repeat_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Repeat_ID_Known(mockCoreProject, repeat_id, out repeat_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = repeat_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Repeat_ID(mockCoreProject, repeat_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_User_ID

        [TestMethod]
        public void Validation_IsValidUserID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidUserIDWithUserIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool user_id_known = true;
            int user_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidUserIDWithDBIsUserIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool user_id_known = true;
            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidUserIDWithUserIdEqualSYSTEMWILDCARDINT()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool user_id_known = true;
            int user_id = GeneralConfig.SYSTEM_WILDCARD_INT;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Org_ID

        [TestMethod]
        public void Validation_IsValidOrgID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgIDWithOrgIdZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool orgId_known = true;
            int orgId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgIDWithOrgIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool orgId_known = true;
            Int32 orgId = int.MaxValue;
            orgId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgIDWithDBIsOrgIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool orgId_known = true;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region BELONG_Org_Role

        [TestMethod]
        public void Validation_BELONGOrgRole()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool isKnown = true;
            int orgId = 1;
            int roleId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Role_ID(mockCoreProject, roleId, mockCoreDb).Returns(x =>
             {
                 return true;
             });

            bool role_id_known = true;

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, roleId, DB_Base.DBTable_Org_Roles_Available_Table, DB_Base.DBTable_Org_Roles_Available_Table_orgId, DB_Base.DBTable_Org_Roles_Available_Table_ID, out isKnown).ReturnsForAnyArgs(x =>
            {
                x[6] = role_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Role(mockCoreProject, orgId, roleId, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgRoleWithDBIsIDBelongingToOrgDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool isKnown = true;
            int orgId = 1;
            int roleId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------





            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, roleId, DB_Base.DBTable_Org_Roles_Available_Table, DB_Base.DBTable_Org_Roles_Available_Table_orgId, DB_Base.DBTable_Org_Roles_Available_Table_ID, out isKnown).ReturnsForAnyArgs(x =>
            {
                x[6] = isKnown;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool role_id_known = true;
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, roleId, out role_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = role_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Role(mockCoreProject, orgId, roleId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgRoleWithDBIsOrgIDKnownDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool isKnown = true;
            int orgId = 1;
            int roleId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------





            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, roleId, DB_Base.DBTable_Org_Roles_Available_Table, DB_Base.DBTable_Org_Roles_Available_Table_orgId, DB_Base.DBTable_Org_Roles_Available_Table_ID, out isKnown).ReturnsForAnyArgs(x =>
            {
                x[6] = isKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool role_id_known = true;
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, roleId, out role_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = role_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Role(mockCoreProject, orgId, roleId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgRoleWithDBIsRoleIDKnownDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool isKnown = true;
            int orgId = 1;
            int roleId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------





            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, roleId, DB_Base.DBTable_Org_Roles_Available_Table, DB_Base.DBTable_Org_Roles_Available_Table_orgId, DB_Base.DBTable_Org_Roles_Available_Table_ID, out isKnown).ReturnsForAnyArgs(x =>
            {
                x[6] = isKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool role_id_known = true;
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, roleId, out role_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = role_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.BELONG_Org_Role(mockCoreProject, orgId, roleId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Categorie_Type_ID
        [TestMethod]
        public void Validation_IsValidCategorieTypeID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int categorie_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Categorie_Type_ID(mockCoreProject, categorie_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCategorieTypeIDWithCategorieTypeIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int categorie_type_id = 5;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Categorie_Type_ID(mockCoreProject, categorie_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region CheckTimeIsWithinSystemTimeBoundaries

        [TestMethod]
        public void Validation_CheckTimeIsWithinSystemTimeBoundaries()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse("2017-01-13T10:02:59.0000000Z").Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse("2017-01-13T10:07:59.0000000Z").Value;

            int categorie_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_Resource_Type_ID

        [TestMethod]
        public void Validation_IsValidResourceTypeID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int resource_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Type_ID(resource_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceTypeIDWithResourceTypeIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int resource_type_id = 5;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Type_ID(resource_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Appointment_Type_ID

        [TestMethod]
        public void Validation_IsValidAppointmentTypeID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int appointment_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Type_ID(appointment_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTypeIDWithAppointmentTypeIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int appointment_type_id = 5;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Type_ID(appointment_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTypeIDWithAppointmentTypeIDUnknown()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int appointment_type_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Type_ID(appointment_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Exception_Type_ID

        [TestMethod]
        public void Validation_IsValidExceptionTypeID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int exception_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Type_ID(exception_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionTypeIDWithExceptionTypeIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int exception_type_id = 5;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Type_ID(exception_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Resource_ID

        [TestMethod]
        public void Validation_IsValidResourceID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int resource_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool res_id_known = true;
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Resource_ID(mockCoreProject, resource_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceIDWithResourceIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool res_id_known = true;
            int resource_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Resource_ID(mockCoreProject, resource_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceIDWithDBIsResourceIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool res_id_known = true;
            int resource_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Resource_ID(mockCoreProject, resource_id, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_ServiceOrder_ID

        [TestMethod]
        public void Validation_IsValidServiceOrderID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool serviceOrder_id_known = true;
            mockCoreDb.DB_Is_ServiceOrder_ID_Known(mockCoreProject, serviceOrderId, out serviceOrder_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceOrder_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });



            bool returnValue = Validation.Is_Valid_ServiceOrder_ID(mockCoreProject, serviceOrderId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceOrderIDWithServiceIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool serviceOrder_id_known = true;
            int serviceOrderId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceOrder_ID_Known(mockCoreProject, serviceOrderId, out serviceOrder_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceOrder_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_ServiceOrder_ID(mockCoreProject, serviceOrderId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceOrderIDWithDBIsServiceOrderIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool serviceOrder_id_known = true;
            int serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceOrder_ID_Known(mockCoreProject, serviceOrderId, out serviceOrder_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceOrder_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_ServiceOrder_ID(mockCoreProject, serviceOrderId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_Contact_ID

        [TestMethod]
        public void Validation_IsValidContactID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool contact_id_known = true;
            mockCoreDb.DB_Is_Contact_ID_Known(mockCoreProject, contactId, out contact_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = contact_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Contact_ID(mockCoreProject, contactId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidContactIDWithContactIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool contact_id_known = true;
            int contactId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Contact_ID_Known(mockCoreProject, contactId, out contact_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = contact_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Contact_ID(mockCoreProject, contactId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidContactIDWithDBIsContactIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool contact_id_known = true;
            int contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Contact_ID_Known(mockCoreProject, contactId, out contact_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = contact_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Contact_ID(mockCoreProject, contactId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Service_ID

        [TestMethod]
        public void Validation_IsValidServiceID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool service_id_known = true;
            mockCoreDb.DB_Is_Service_ID_Known(mockCoreProject, serviceId, out service_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = service_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Service_ID(mockCoreProject, serviceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceIDWithServiceIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool service_id_known = true;
            int serviceId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Service_ID_Known(mockCoreProject, serviceId, out service_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = service_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Service_ID(mockCoreProject, serviceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceIDWithDBIsServiceIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool service_id_known = true;
            int serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Service_ID_Known(mockCoreProject, serviceId, out service_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = service_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Service_ID(mockCoreProject, serviceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Platform_Service_ID

        [TestMethod]
        public void Validation_IsValidPlatformServiceID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int platformserviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool platform_id_known = true;
            mockCoreDb.DB_Is_Platform_Service_ID_Known(mockCoreProject, platformserviceId, out platform_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = platform_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Platform_Service_ID(mockCoreProject, platformserviceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPlatformServiceIDWithPlatformServiceIDZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool platform_id_known = true;
            int platformserviceId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Platform_Service_ID_Known(mockCoreProject, platformserviceId, out platform_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = platform_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Platform_Service_ID(mockCoreProject, platformserviceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPlatformServiceIDWithDBIsPlatformServiceIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            bool platform_id_known = true;
            int platformserviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Platform_Service_ID_Known(mockCoreProject, platformserviceId, out platform_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = platform_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Platform_Service_ID(mockCoreProject, platformserviceId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Org_Resource

        [TestMethod]
        public void Validation_IsOrgResource()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int resId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool org_id_known = true;
            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });



            bool returnValue = Validation.Is_Org_Resource(mockCoreProject, orgId, resId, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsOrgResourceWithDBIsResourceIDKnownDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int resId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool resource_id_known = true;
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resId, out resource_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = resource_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Org_Resource(mockCoreProject, orgId, resId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsOrgResourceWithDBIsOrgIDKnownKnownDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int resId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool resource_id_known = true;
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resId, out resource_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = resource_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Org_Resource(mockCoreProject, orgId, resId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsOrgResourceWithDBIsIDBelongingToOrgDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int resId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool resource_id_known = true;
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resId, out resource_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = resource_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Org_Resource(mockCoreProject, orgId, resId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region BELONG_Org_Calendar

        [TestMethod]
        public void Validation_BELONGOrgCalendar()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Calendar(mockCoreProject, orgId, calendarId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgCalendarWithDBIsCalendarIDKnownDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool calendarId_known = true;
            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, out calendarId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = calendarId_known;
                return ENUM_DB_Status.DB_FAIL;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Calendar(mockCoreProject, orgId, calendarId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgCalendarWithDBIsOrgIDKnownKnownDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool calendarId_known = true;
            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, out calendarId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = calendarId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Calendar(mockCoreProject, orgId, calendarId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgCalendarWithDBIsIDBelongingToOrgDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool calendarId_known = true;
            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, out calendarId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = calendarId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.BELONG_Org_Calendar(mockCoreProject, orgId, calendarId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region BELONG_Org_Appointment

        [TestMethod]
        public void Validation_BELONGOrgAppointment()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int calendarId = 1;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool calendarId_known = true;

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb).Returns(x =>
             {
                 return true;
             });


            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Appointments_Table, DB_Base.DBTable_Org_Appointments_Table_Org_ID, DB_Base.DBTable_Org_Appointments_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Appointment(mockCoreProject, appointmentId, calendarId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgAppointmentWithDBIsAppointmentIDKnownKnownDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool appointmentId_known = true;
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointmentId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = appointmentId_known;
                return ENUM_DB_Status.DB_FAIL;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, appointmentId, DB_Base.DBTable_Org_Appointments_Table, DB_Base.DBTable_Org_Appointments_Table_Org_ID, DB_Base.DBTable_Org_Appointments_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Appointment(mockCoreProject, orgId, appointmentId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgAppointmentWithDBIsOrgIDKnownKnownDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool appointmentId_known = true;
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointmentId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = appointmentId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, appointmentId, DB_Base.DBTable_Org_Appointments_Table, DB_Base.DBTable_Org_Appointments_Table_Org_ID, DB_Base.DBTable_Org_Appointments_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Appointment(mockCoreProject, orgId, appointmentId, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgAppointmentWithDBIsIDBelongingToOrgDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool appointmentId_known = true;
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointmentId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = appointmentId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, appointmentId, DB_Base.DBTable_Org_Appointments_Table, DB_Base.DBTable_Org_Appointments_Table_Org_ID, DB_Base.DBTable_Org_Appointments_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.BELONG_Org_Appointment(mockCoreProject, orgId, appointmentId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region BELONG_Org_Exception
        [TestMethod]
        public void Validation_BELONGOrgException()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, exceptionId, mockCoreDb).Returns(x =>
             {
                 return true;
             });


            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Exception(mockCoreProject, orgId, exceptionId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgExceptionWithDBIsExceptionIDKnownDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool exceptionId_known = true;
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exceptionId, out exceptionId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = exceptionId_known;
                return ENUM_DB_Status.DB_FAIL;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Exception(mockCoreProject, orgId, exceptionId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgExceptionWithDBIsOrgIDKnownKnownDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool exceptionId_known = true;
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exceptionId, out exceptionId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = exceptionId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Exception(mockCoreProject, orgId, exceptionId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgExceptionWithDBIsIDBelongingToOrgDbFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool exceptionId_known = true;
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exceptionId, out exceptionId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = exceptionId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });
            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.BELONG_Org_Exception(mockCoreProject, orgId, exceptionId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Customer_ID
        [TestMethod]
        public void Validation_IsValidCustomerID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int customer_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, customer_id, DB_Base.DBTable_Org_Contact_Table, DB_Base.DBTable_Org_Contact_Table_orgId, DB_Base.DBTable_Org_Contact_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Customer_ID(mockCoreProject, orgId, customer_id, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCustomerIDWithDBIsOrgIDKnownDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int customer_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, customer_id, DB_Base.DBTable_Org_Contact_Table, DB_Base.DBTable_Org_Contact_Table_orgId, DB_Base.DBTable_Org_Contact_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Customer_ID(mockCoreProject, orgId, customer_id, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidCustomerIDWithDBIsIDBelongingToOrgDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            bool orgId_known = true;
            int orgId = 1;
            int customer_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool org_id_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out org_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = org_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, customer_id, DB_Base.DBTable_Org_Contact_Table, DB_Base.DBTable_Org_Contact_Table_orgId, DB_Base.DBTable_Org_Contact_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_Customer_ID(mockCoreProject, orgId, customer_id, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Component_Name

        [TestMethod]
        public void Validation_IsValidComponentName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string component_name = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_Name(component_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidComponentNameWithComponentNameEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string component_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_Name(component_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidComponentNameWithComponentNameNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string component_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_Name(component_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidComponentNameWithComponentNameMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string component_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_Name(component_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Product_Name

        [TestMethod]
        public void Validation_IsValidProductName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string product_name = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Product_Name(product_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductNameWithProductNameEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string product_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Product_Name(product_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductNameWithProductNameNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string product_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Product_Name(product_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductNameWithProductNameMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string product_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Product_Name(product_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Notification_Message

        [TestMethod]
        public void Validation_IsValidNotificationMessage()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string notification_message = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Notification_Message(notification_message);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationMessageWithNotificationMessageEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string notification_message = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Notification_Message(notification_message);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationMessageWithNotificationMessageNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string notification_message = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Notification_Message(notification_message);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationMessageWithNotificationMessageMorethan1245Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string notification_message = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                + "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                + "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                + "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                + "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Notification_Message(notification_message);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Customer_Company_Name

        [TestMethod]
        public void Validation_IsValidCustomerCompanyName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string customer_company_name = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Customer_Company_Name(customer_company_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCustomerCompanyNameWithCustomerCompanyNameEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string customer_company_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Customer_Company_Name(customer_company_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCustomerCompanyNameWithCustomerCompanyNameNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string customer_company_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Customer_Company_Name(customer_company_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCustomerCompanyNameWithCustomerCompanyNameMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string customer_company_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Customer_Company_Name(customer_company_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Address_String

        [TestMethod]
        public void Validation_IsValidAddressString()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string address_line = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Address_String(address_line);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAddressStringWithAddressLineEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string address_line = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Address_String(address_line);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAddressStringWithAddressLineNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string address_line = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Address_String(address_line);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAddressStringWithAddressLineMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string address_line = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Address_String(address_line);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_MoneyAmount

        [TestMethod]
        public void Validation_IsValidMoneyAmount()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            decimal moneyVal = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MoneyAmount(moneyVal);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMoneyAmountWithMoneyValGreaterThanMAXMONEYVALUE()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            decimal moneyVal = GeneralConfig.MAX_MONEY_VALUE + 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MoneyAmount(moneyVal);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Post_Code
        [TestMethod]
        public void Validation_IsValidPostCode()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICountry mockCountry = Substitute.For<ICountry>();
            string post_code = "1234";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Post_Code(post_code, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPostCodeWithPostCodeEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICountry mockCountry = Substitute.For<ICountry>();
            string post_code = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Post_Code(post_code, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPostCodeWithPostCodeNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICountry mockCountry = Substitute.For<ICountry>();
            string post_code = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Post_Code(post_code, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPostCodeWithPostCodeMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICountry mockCountry = Substitute.For<ICountry>();
            string post_code = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Post_Code(post_code, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Phone_Number

        [TestMethod]
        public void Validation_IsValidPhoneNumber()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICountry mockCountry = Substitute.For<ICountry>();
            string phone_number = "123456789";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Phone_Number(phone_number, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPhoneNumberWithPhoneNumberEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICountry mockCountry = Substitute.For<ICountry>();
            string phone_number = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Phone_Number(phone_number, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPhoneNumberWithPhoneNumberNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICountry mockCountry = Substitute.For<ICountry>();
            string phone_number = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Phone_Number(phone_number, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPhoneNumberWithPhoneNumberMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICountry mockCountry = Substitute.For<ICountry>();
            string phone_number = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Phone_Number(phone_number, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Location

        [TestMethod]
        public void Validation_IsValidLocation()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            double la = 21.7679;
            double lng = 78.8718;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Location(la, lng);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_BookingOverlap

        [TestMethod]
        public void Validation_IsValidBookingOverlap()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            Enum_SYS_BookingOverlap obj = Enum_SYS_BookingOverlap.NoOverlapping;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_BookingOverlap(obj);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidBookingOverlapWithUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            Enum_SYS_BookingOverlap obj = Enum_SYS_BookingOverlap.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_BookingOverlap(obj);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_WeekDay

        [TestMethod]
        public void Validation_IsValidRepeatWeekDays()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            List<int> weekDayNums = new List<int>();
            int weekDayNum = 1;
            weekDayNums.Add(weekDayNum);

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNums);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekDayWithWeekDaysNumInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            List<int> weekDayNums = new List<int>();
            int weekDayNum = 9;
            weekDayNums.Add(weekDayNum);

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNums);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekDayWithWeekDaysNumsNull()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            List<int> weekDayNums = new List<int>();
            weekDayNums = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNums);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_WeekDay

        [TestMethod]
        public void Validation_IsValidRepeatWeekDay()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekDayNum = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekDayWithWeekDayNumInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekDayNum = 8;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekDayWithWeekDayNumZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekDayNum = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_WeekDay

        [TestMethod]
        public void Validation_IsValidWeekDay()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekDayNum = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWeekDayWithWeekDayNumZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekDayNum = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWeekDayWithWeekDayNumInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekDayNum = 8;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Week

        [TestMethod]
        public void Validation_IsValidRepeatWeek()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekNum = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekWithWeekNumZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekNum = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekWithWeekNumInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekNum = 6;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Week

        [TestMethod]
        public void Validation_IsValidWeek()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekNum = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWeekWithWeekNumZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekNum = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWeekWithWeekNumInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int weekNum = 6;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Day

        [TestMethod]
        public void Validation_IsValidDay()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int day = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDayWithDayZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int day = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDayWithWeekNumInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int day = 32;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Limit

        [TestMethod]
        public void Validation_IsValidRepeatLimit()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int limit = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Limit(limit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatLimitWithLimitZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int limit = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Limit(limit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatLimitWithLimitMAXREPEATOCCURANCE()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int limit = GeneralConfig.MAX_REPEAT_OCCURANCES;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Limit(limit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Day

        [TestMethod]
        public void Validation_IsValidRepeatDay()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int day = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatDayWithDayZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int day = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatDayWithDayInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int day = 32;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Type

        [TestMethod]
        public void Validation_IsValidRepeatType()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int repeatType = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatTypeWithRepeatTypeZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int repeatType = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_MonthDay

        [TestMethod]
        public void Validation_IsValidMonthDay()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int year = 2017;
            int month = 1;
            int day = 31;



            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MonthDay(year, month, day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMonthDayWithDayZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int year = 2017;
            int month = 1;
            int day = 0;



            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MonthDay(year, month, day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        public void Validation_IsValidMonthDayWithDayInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            int year = 2017;
            int month = 1;
            int day = 32;



            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MonthDay(year, month, day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Month

        [TestMethod]
        public void Validation_IsValidRepeatMonth()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int month = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatMontWithMonthZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int month = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatMonthWithMonthInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int month = 13;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Month

        [TestMethod]
        public void Validation_IsValidMonth()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int month = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMonthWithMonthZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int month = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMonthWithMonthInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int month = 13;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Year

        [TestMethod]
        public void Validation_IsValidRepeatYear()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int year = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatYearWithYearZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int year = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatYearWithYearInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int year = 31;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Year

        [TestMethod]
        public void Validation_IsValidYear()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int year = 1970;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidYearWithMonthZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int year = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidYearWithYearInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int year = 2051;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_RepeatParams

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeUnknown()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Unknown;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeDaily()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatDay = 1;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeDailyZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatDay = 0;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeWeekly()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Weekly;
            mockRepeatOptions.repeatWeek = 1;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeWeeklyZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Weekly;
            mockRepeatOptions.repeatWeek = 0;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeMonthly()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Monthly;
            mockRepeatOptions.repeatMonth = 1;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeMonthlyZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Monthly;
            mockRepeatOptions.repeatMonth = 0;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeYearly()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Yearly;
            mockRepeatOptions.repeatYear = 1;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);



            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeYearlyZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Yearly;
            mockRepeatOptions.repeatYear = 0;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Email_ID_Combo

        [TestMethod]
        public void Validation_IsValidEmailIDCombo()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            //ICoreProject coreProject, IDatabaseOperations_System dbs, string emailAddress, int userId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();



            int userId = 1;
            string emailAddress = "abc@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return emailAddress;
            });

            mockCoreSc.Is_Valid_EmailAddress(emailAddress).Returns(x => {
                return true;
            });
            mockCoreSc.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid_Email_ID_Combo(mockCoreProject, emailAddress, userId, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailIDComboWithGetLoginNameFromUserIDEmailAddressDiff()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            //ICoreProject coreProject, IDatabaseOperations_System dbs, string emailAddress, int userId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();



            int userId = 1;
            string emailAddress = "abc@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            //mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            //{
            //    return "xyz@gmail.com";
            //});

            //bool user_id_known = true;
            //mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            //{
            //    x[2] = user_id_known;
            //    return ENUM_DB_Status.DB_SUCCESS;
            //});

            mockCoreSc.Is_Valid_EmailAddress(emailAddress).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid_Email_ID_Combo(mockCoreProject, emailAddress, userId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailIDComboWithEmailAddressInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            //ICoreProject coreProject, IDatabaseOperations_System dbs, string emailAddress, int userId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();



            int userId = 1;
            string emailAddress = "abc";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Email_ID_Combo(mockCoreProject, emailAddress, userId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailIDComboWithDBIsUserIDKnownDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();
            //ICoreProject coreProject, IDatabaseOperations_System dbs, string emailAddress, int userId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();



            int userId = 1;
            string emailAddress = "abc@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return emailAddress;
            });

            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Email_ID_Combo(mockCoreProject, emailAddress, userId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Modifier

        [TestMethod]
        public void Validation_IsValidRepeatModifier()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int modifier = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Modifier(modifier);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatModifierWithModifierZero()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int modifier = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Modifier(modifier);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatModifierWithModifierInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            int modifier = 31;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Modifier(modifier);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_TimeZoneIANA

        [TestMethod]
        public void Validation_IsValidTimeZoneIANA()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            string timeZoneStr = "America/Boise";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TimeZoneIANA(timeZoneStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTimeZoneIANAWithTimeZoneIANANull()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            string timeZoneStr = null;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TimeZoneIANA(timeZoneStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTimeZoneIANAWithTimeZoneIANAEmpty()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            string timeZoneStr = string.Empty; ;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TimeZoneIANA(timeZoneStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Appointment_Belonging_To_Organisation

        [TestMethod]
        public void Validation_IsAppointmentBelongingToOrganisation()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int orgId = 1;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool appointment_known = true;
            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, appointmentId, DB_Base.DBTable_Org_Appointments_Table, DB_Base.DBTable_Org_Appointments_Table_Org_ID, DB_Base.DBTable_Org_Appointments_Table_ID, out appointment_known).ReturnsForAnyArgs(x =>
            {
                x[6] = appointment_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Appointment_Belonging_To_Organisation(mockCoreProject, orgId, appointmentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsAppointmentBelongingToOrganisationWithDBIsIDBelongingToOrgDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int orgId = 1;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool appointment_known = true;
            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, appointmentId, DB_Base.DBTable_Org_Appointments_Table, DB_Base.DBTable_Org_Appointments_Table_Org_ID, DB_Base.DBTable_Org_Appointments_Table_ID, out appointment_known).ReturnsForAnyArgs(x =>
            {
                x[6] = appointment_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Appointment_Belonging_To_Organisation(mockCoreProject, orgId, appointmentId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Exception_Belonging_To_Organisation

        [TestMethod]
        public void Validation_IsExceptionBelongingToOrganisation()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool exception_known = true;
            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, out exception_known).ReturnsForAnyArgs(x =>
            {
                x[6] = exception_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Exception_Belonging_To_Organisation(mockCoreProject, orgId, exceptionId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsExceptionBelongingToOrganisationWithDBIsIDBelongingToOrgDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool exception_known = true;
            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, out exception_known).ReturnsForAnyArgs(x =>
            {
                x[6] = exception_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Exception_Belonging_To_Organisation(mockCoreProject, orgId, exceptionId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Appointment_Title

        [TestMethod]
        public void Validation_IsValidAppointmentTitle()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string appointmentTitle = "Test string";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_String(appointmentTitle).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_Appointment_Title(appointmentTitle, mockCoreSc);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTitleWithAppointmentTitleEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string appointmentTitle = string.Empty;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Title(appointmentTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTitleWithAppointmentTitleNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string appointmentTitle = null;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Title(appointmentTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTitleWithAppointmentTitleMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string appointmentTitle = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Title(appointmentTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Exception_Title

        [TestMethod]
        public void Validation_IsValidExceptionTitle()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string exceptionTitle = "Test string";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_String(exceptionTitle).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_Exception_Title(exceptionTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionTitleWithExceptionTitleEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string exceptionTitle = string.Empty;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Title(exceptionTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionTitleWithExceptionTitleNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string exceptionTitle = null;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Title(exceptionTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionTitleWithExceptionTitleMorethan249Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string exceptionTitle = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Title(exceptionTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Resource_ID_List
        [TestMethod]
        public void Validation_IsValidResourceIDList()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            //ICoreProject coreProject, List<int> resourceList, int orgId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            int orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool wasValid = true;
            mockCoreDb.DB_Is_Resource_ID_Known_To_Org(mockCoreProject, orgId, resId, out wasValid).ReturnsForAnyArgs(x =>
            {
                x[3] = wasValid;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Resource_ID_List(mockCoreProject, resourceList, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceIDListWithDBIsResourceIDKnownToOrgDBFail()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            //ICoreProject coreProject, List<int> resourceList, int orgId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            int orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool wasValid = true;
            mockCoreDb.DB_Is_Resource_ID_Known_To_Org(mockCoreProject, orgId, resId, out wasValid).ReturnsForAnyArgs(x =>
            {
                x[3] = wasValid;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_Resource_ID_List(mockCoreProject, resourceList, orgId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Repeat_Type
        [TestMethod]
        public void Validation_IsValidRepeatTypeByRepeatType()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ENUM_Event_Repeat_Type repeatType = ENUM_Event_Repeat_Type.Repeat;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatTypeByRepeatTypeWithRepeatTypeUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ENUM_Event_Repeat_Type repeatType = ENUM_Event_Repeat_Type.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Apply_To

        [TestMethod]
        public void Validation_IsValidApplyTo()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ENUM_Repeat_Apply_To applyTo = ENUM_Repeat_Apply_To.OnlyThisEvent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Apply_To(applyTo);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidApplyToWithApplyToUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ENUM_Repeat_Apply_To applyTo = ENUM_Repeat_Apply_To.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Apply_To(applyTo);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Daily_User_Slot_Limit

        [TestMethod]
        public void Validation_IsValidDailyUserSlotLimit()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long slotLimit = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Daily_User_Slot_Limit(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDailyUserSlotLimitWithSlotLimitLessThanZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long slotLimit = -1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Daily_User_Slot_Limit(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDailyUserSlotLimitWithSlotLimitInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long slotLimit = 101;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Daily_User_Slot_Limit(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_SlotDuration

        [TestMethod]
        public void Validation_IsValidSlotDuration()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long slotDuration = 900000;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_SlotDuration(slotDuration);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidSlotDurationWithSlotLimitLessThan900000()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long slotDuration = 899999;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_SlotDuration(slotDuration);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidSlotDurationWithSlotLimitInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long slotDuration = 432000000;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_SlotDuration(slotDuration);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Calendar_ID

        [TestMethod]
        public void Validation_IsValidCalendarID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool calendar_known = true;
            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, out calendar_known).ReturnsForAnyArgs(x =>
            {
                x[2] = calendar_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCalendarIDWithCalendarIdZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int calendarId = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool calendar_known = true;
            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, out calendar_known).ReturnsForAnyArgs(x =>
            {
                x[2] = calendar_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCalendarIDWithCalendarIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int calendarId = int.MaxValue;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool calendar_known = true;
            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, out calendar_known).ReturnsForAnyArgs(x =>
            {
                x[2] = calendar_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCalendarIDWithDBIsCalendarIDKnownDBFail()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool calendar_known = true;
            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, out calendar_known).ReturnsForAnyArgs(x =>
            {
                x[2] = calendar_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_File_ID

        [TestMethod]
        public void Validation_IsValidFileID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool fileId_known = true;
            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, fileId, out fileId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = fileId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_File_ID(mockCoreProject, fileId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileIDWithFileIDZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int fileId = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool fileId_known = true;
            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, fileId, out fileId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = fileId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_File_ID(mockCoreProject, fileId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileIDWithFileIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int fileId = int.MaxValue;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool fileId_known = true;
            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, fileId, out fileId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = fileId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_File_ID(mockCoreProject, fileId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileIDWithDBIsFileIDKnownDBFail()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool fileId_known = true;
            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, fileId, out fileId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = fileId_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_File_ID(mockCoreProject, fileId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Time_AllocationType

        [TestMethod]
        public void Validation_IsValidTimeAllocationType()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int slotLimit = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Time_AllocationType(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTimeAllocationTypeWithSlotLimitOne()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int slotLimit = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Time_AllocationType(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_ContactType

        [TestMethod]
        public void Validation_IsValidContactType()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int contactType = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_ContactType(contactType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidContactTypeWithContactTypeOne()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int contactType = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_ContactType(contactType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_User_Title

        [TestMethod]
        public void Validation_IsValidUserTitle()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int userTitle = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_User_Title(userTitle);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidUserTitleWithUserTitleOne()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int userTitle = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_User_Title(userTitle);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Belonging_To_Org

        [TestMethod]
        public void Validation_IsBelongingToOrgWithIOrgID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Belonging_To_Org(mockCoreProject, mockOrgID, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsBelongingToOrgWithIResourceID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IResourceID mockResourceID = Substitute.For<IResourceID>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            int orgId = 1;
            int resId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool orgId_known = true;
            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Belonging_To_Org(mockCoreProject, mockOrgID, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsBelongingToOrgWithIDcCreateResource()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            //DC_Create_Resource dcCreateResource = new DC_Create_Resource(mockCoreProject);
            IDcCreateResource mockDcCreateResource = Substitute.For<IDcCreateResource>();

            mockDcCreateResource.orgId = 0;
            mockDcCreateResource.userId = 1;
            mockDcCreateResource.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateResource.resourceId = 1;

            bool user_id_known = true;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Org_Resource(mockCoreProject, mockDcCreateResource.orgId, mockDcCreateResource.resourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, mockDcCreateResource.userId, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = user_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateResource.userId, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Belonging_To_Org(mockCoreProject, mockDcCreateResource, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsBelongingToOrgWithICalendarID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();

            ICalendarID mockCalendarID = Substitute.For<ICalendarID>();

            mockCalendarID.calendarId = 1;

            int orgId = 1;

            bool orgId_known = true;

            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, mockCalendarID.calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[6] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Belonging_To_Org(mockCoreProject, mockCalendarID, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid

        #region IsValidWithIExceptionID

        [TestMethod]
        public void Validation_IsValidWithIExceptionID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionID mockExceptionID = Substitute.For<IExceptionID>();

            int orgId = 1;
            int exception_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockExceptionID.exceptionId = 1;
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionID, typeof(IExceptionID));



            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionID_ExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionID mockExceptionID = Substitute.For<IExceptionID>();

            int orgId = 1;
            int exception_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockExceptionID.exceptionId = 1;
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionID, typeof(IExceptionID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAppointmentID

        [TestMethod]
        public void Validation_IsValidWithIAppointmentID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentID mockAppointmentID = Substitute.For<IAppointmentID>();

            int orgId = 1;

            int appointmentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAppointmentID.appointmentId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointmentID.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentID, typeof(IAppointmentID));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentID_AppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentID mockAppointmentID = Substitute.For<IAppointmentID>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAppointmentID.appointmentId = 0;
            //mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointment_known).ReturnsForAnyArgs(x =>
            //{
            //    x[2] = appointment_known;
            //    return ENUM_DB_Status.DB_FAIL;
            //});

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointmentID.appointmentId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentID, typeof(IAppointmentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithINotificationOptions
        [TestMethod]
        public void Validation_IsValidWithINotificationOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;

            mockCoreSc.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_NotificationMessageInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = string.Empty;
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });



            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_NotificationTypeUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;
            mockNotificationOptions.notificationType = ENUM_Notification_Type.Unknown;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_NotificationStateUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;
            mockNotificationOptions.notificationState = ENUM_Notification_State.Unknown;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_IsValidOrgIDInvlaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIOrgAppointment

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });



            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidResourceIDListInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidTimeScaleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidDateTimeString_StarInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRepeatOptions

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatDayInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatTypeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatMonthInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatWeekInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatWeekDayInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatYearInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatLimitYearInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatModifierInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIResourceOptions

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockResourceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockResourceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockResourceOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockResourceOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockResourceOptions.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockResourceOptions.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockResourceOptions.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockResourceOptions.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockResourceOptions.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockResourceOptions.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockResourceOptions.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockResourceOptions.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockResourceOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockResourceOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockResourceOptions.latitude).Returns(x =>
            {
                return true;
            });

            //bool orgId_known = true;
            //mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            //{
            //    x[2] = orgId_known;
            //    return ENUM_DB_Status.DB_SUCCESS;
            //});


            //bool user_id_known = true;
            //mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            //{
            //    x[2] = orgId_known;
            //    return ENUM_DB_Status.DB_SUCCESS;
            //});


            //bool res_id_known = true;

            //mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            //{
            //    x[2] = res_id_known;
            //    return ENUM_DB_Status.DB_SUCCESS;
            //});

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_OrgIdNotZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 1;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_ResourceIdZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 0;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_AllowsOverlapsUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.Unknown;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_MaxAppointmentDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = -1;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_MaxDailyUserSlotsInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.maxDailyUserSlots = -1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_MaxExceptionDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = -1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_MaxAppointmentFutureTimeInMsInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = -1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_ResourceNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_SlotDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 2;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_TimeAllocationTypeUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.Unknown;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_TimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = "abc";
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = string.Empty;

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_DBIsOrgIDKnownDBFail()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_DBIsUserIDKnownDBFail()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_FAIL;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_DBIsResourceIDKnownDBFail()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool user_id_known = true;
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool res_id_known = true;

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceOptions

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 1;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidDescriptionStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidServiceCostInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_OrgIdNotZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 1;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });




            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOptions, typeof(IServiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIDcServiceID

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_OrgIdNotZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 1;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIContactOptions

        [TestMethod]
        public void Validation_IsValidWithIContactOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidContactTypeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidUserTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidString_FirstNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidString_LastNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidString_OrgNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_ContactTypeUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Unknown;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_ContactTitleUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Unknown;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_ContactFirstNameLastNameOrgNameEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = string.Empty;
            mockContactOptions.contactLastName = string.Empty;
            mockContactOptions.orgName = string.Empty;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAddressOptions

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidAddressString_Address1Invalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidAddressString_Address2Invalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidString_AttentionInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidString_CityInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidString_TownInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidString_ZipcodeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidCountryLocationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIRepeatID

        [TestMethod]
        public void Validation_IsValidWithIRepeatID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();


            mockRepeatID.repeatId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockRepeatID.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatID, typeof(IRepeatID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();


            mockRepeatID.repeatId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockRepeatID.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatID, typeof(IRepeatID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatID_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();


            mockRepeatID.repeatId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockRepeatID.repeatId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatID, typeof(IRepeatID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithICreatorID

        [TestMethod]
        public void Validation_IsValidWithICreatorID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatorID mockCreatorID = Substitute.For<ICreatorID>();


            mockCreatorID.creatorId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatorID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreatorID.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatorID, typeof(ICreatorID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatorID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatorID mockCreatorID = Substitute.For<ICreatorID>();


            mockCreatorID.creatorId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatorID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreatorID.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatorID, typeof(ICreatorID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatorID_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatorID mockCreatorID = Substitute.For<ICreatorID>();


            mockCreatorID.creatorId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatorID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreatorID.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatorID, typeof(ICreatorID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITimeScale

        [TestMethod]
        public void Validation_IsValidWithITimeScale()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();


            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();


            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();


            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();


            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();


            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();


            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITimeStartEnd

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();


            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();


            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();


            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();


            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();


            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_StartLessThanEnd()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();


            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T09:07:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICreateException

        [TestMethod]
        public void Validation_IsValidWithICreateException()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsUserMemberOfOrganisationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidExceptionTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithICreateAppointment

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsUserMemberOfOrganisationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidExceptionTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();


            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIExceptionOptions

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidExceptionTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();


            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIRepeatable

        [TestMethod]
        public void Validation_IsValidWithIRepeatable()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatable mockRepeatable = Substitute.For<IRepeatable>();

            mockRepeatable.isAAutoGenEvent = ENUM_Event_Repeat_Type.Repeat;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatable, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Type(mockRepeatable.isAAutoGenEvent).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatable, typeof(IRepeatable));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatable_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatable mockRepeatable = Substitute.For<IRepeatable>();

            mockRepeatable.isAAutoGenEvent = ENUM_Event_Repeat_Type.Repeat;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatable, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Repeat_Type(mockRepeatable.isAAutoGenEvent).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatable, typeof(IRepeatable));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatable_IsValidRepeatTypeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatable mockRepeatable = Substitute.For<IRepeatable>();

            mockRepeatable.isAAutoGenEvent = ENUM_Event_Repeat_Type.Repeat;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatable, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_Type(mockRepeatable.isAAutoGenEvent).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatable, typeof(IRepeatable));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIResourceID

        [TestMethod]
        public void Validation_IsValidWithIResourceID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceID mockResourceID = Substitute.For<IResourceID>();

            mockResourceID.resourceId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockResourceID.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceID, typeof(IResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceID mockResourceID = Substitute.For<IResourceID>();

            mockResourceID.resourceId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockResourceID.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceID, typeof(IResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceID_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceID mockResourceID = Substitute.For<IResourceID>();

            mockResourceID.resourceId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockResourceID.resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceID, typeof(IResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIApplyTo
        [TestMethod]
        public void Validation_IsValidWithIApplyTo()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IApplyTo mockApplyTo = Substitute.For<IApplyTo>();

            mockApplyTo.applyTo = ENUM_Repeat_Apply_To.OnlyThisEvent;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockApplyTo, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Apply_To(mockApplyTo.applyTo).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockApplyTo, typeof(IApplyTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIApplyTo_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IApplyTo mockApplyTo = Substitute.For<IApplyTo>();

            mockApplyTo.applyTo = ENUM_Repeat_Apply_To.OnlyThisEvent;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockApplyTo, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Apply_To(mockApplyTo.applyTo).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockApplyTo, typeof(IApplyTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIApplyTo_IsValidApplyToInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IApplyTo mockApplyTo = Substitute.For<IApplyTo>();

            mockApplyTo.applyTo = ENUM_Repeat_Apply_To.OnlyThisEvent;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockApplyTo, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Apply_To(mockApplyTo.applyTo).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockApplyTo, typeof(IApplyTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithITimeStart

        [TestMethod]
        public void Validation_IsValidWithITimeStart()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStart mockTimeStart = Substitute.For<ITimeStart>();

            mockTimeStart.start = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStart, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStart.start).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStart, typeof(ITimeStart));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStart_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStart mockTimeStart = Substitute.For<ITimeStart>();

            mockTimeStart.start = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStart, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStart.start).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStart, typeof(ITimeStart));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStart_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStart mockTimeStart = Substitute.For<ITimeStart>();

            mockTimeStart.start = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeStart, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeStart.start).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeStart, typeof(ITimeStart));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITimeEnd

        [TestMethod]
        public void Validation_IsValidWithITimeEnd()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeEnd mockTimeEnd = Substitute.For<ITimeEnd>();

            mockTimeEnd.end = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeEnd.end).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeEnd, typeof(ITimeEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeEnd_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeEnd mockTimeEnd = Substitute.For<ITimeEnd>();

            mockTimeEnd.end = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeEnd.end).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeEnd, typeof(ITimeEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeEnd_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeEnd mockTimeEnd = Substitute.For<ITimeEnd>();

            mockTimeEnd.end = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeEnd, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockTimeEnd.end).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeEnd, typeof(ITimeEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRepeatRules

        [TestMethod]
        public void Validation_IsValidWithIRepeatRules()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatRules mockRepeatRules = Substitute.For<IRepeatRules>();


            List<IRepeat> mockListRepeat = Substitute.For<List<IRepeat>>();
            IRepeat mockRepeat = Substitute.For<IRepeat>();
            mockRepeat.repeatDay = 1;
            mockRepeat.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeat.repeatMonth = 1;
            mockRepeat.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeat.repeatWeekDays = repeatWeekDays;
            mockRepeat.maxOccurances = 10;
            mockRepeat.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeat.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeat.modifier = 1;
            mockRepeat.orgId = 10;
            mockRepeat.creatorId = 2;
            mockRepeat.repeatId = 1;

            mockRepeat.creatorId = 1;
            mockListRepeat.Add(mockRepeat);
            mockRepeatRules.repeatRules = mockListRepeat;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatRules, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatRules, typeof(IRepeatRules));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatRules_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatRules mockRepeatRules = Substitute.For<IRepeatRules>();


            List<IRepeat> mockListRepeat = Substitute.For<List<IRepeat>>();
            IRepeat mockRepeat = Substitute.For<IRepeat>();
            mockRepeat.repeatDay = 1;
            mockRepeat.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeat.repeatMonth = 1;
            mockRepeat.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeat.repeatWeekDays = repeatWeekDays;
            mockRepeat.maxOccurances = 10;
            mockRepeat.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeat.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeat.modifier = 1;
            mockRepeat.orgId = 10;
            mockRepeat.creatorId = 2;
            mockRepeat.repeatId = 1;

            mockRepeat.creatorId = 1;
            mockListRepeat.Add(mockRepeat);
            mockRepeatRules.repeatRules = mockListRepeat;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatRules, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatRules, typeof(IRepeatRules));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatRules_IsValidInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatRules mockRepeatRules = Substitute.For<IRepeatRules>();


            List<IRepeat> mockListRepeat = Substitute.For<List<IRepeat>>();
            IRepeat mockRepeat = Substitute.For<IRepeat>();
            mockRepeat.repeatDay = 1;
            mockRepeat.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeat.repeatMonth = 1;
            mockRepeat.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeat.repeatWeekDays = repeatWeekDays;
            mockRepeat.maxOccurances = 10;
            mockRepeat.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeat.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeat.modifier = 1;
            mockRepeat.orgId = 10;
            mockRepeat.creatorId = 2;
            mockRepeat.repeatId = 1;

            mockRepeat.creatorId = 1;
            mockListRepeat.Add(mockRepeat);
            mockRepeatRules.repeatRules = mockListRepeat;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatRules, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return false;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatRules, typeof(IRepeatRules));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatRules_RepeatRulesNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatRules mockRepeatRules = Substitute.For<IRepeatRules>();

            List<IRepeat> mockListRepeat = Substitute.For<List<IRepeat>>();
            IRepeat mockRepeat = Substitute.For<IRepeat>();
            mockRepeat.repeatDay = 1;
            mockRepeat.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeat.repeatMonth = 1;
            mockRepeat.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeat.repeatWeekDays = repeatWeekDays;
            mockRepeat.maxOccurances = 10;
            mockRepeat.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeat.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeat.modifier = 1;
            mockRepeat.orgId = 10;
            mockRepeat.creatorId = 2;
            mockRepeat.repeatId = 1;
            mockRepeat.creatorId = 1;

            /*mockListRepeat.Add(mockRepeat);*/
            mockRepeatRules.repeatRules = mockListRepeat;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatRules, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatRules, typeof(IRepeatRules));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIResourceIDList

        [TestMethod]
        public void Validation_IsValidWithIResourceIDList()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceIDList mockResourceIDList = Substitute.For<IResourceIDList>();

            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockResourceIDList.resourceIdList = resourceIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockResourceIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceIDList, typeof(IResourceIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceIDList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceIDList mockResourceIDList = Substitute.For<IResourceIDList>();

            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockResourceIDList.resourceIdList = resourceIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockResourceIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceIDList, typeof(IResourceIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceIDList_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceIDList mockResourceIDList = Substitute.For<IResourceIDList>();

            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockResourceIDList.resourceIdList = resourceIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockResourceIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceIDList, typeof(IResourceIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceIDList_DBIsResourceIDKnownDBFail()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceIDList mockResourceIDList = Substitute.For<IResourceIDList>();

            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockResourceIDList.resourceIdList = resourceIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool res_id_known = true;
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resourceId, out res_id_known).ReturnsForAnyArgs(x =>
            {
                x[2] = res_id_known;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockResourceIDList, typeof(IResourceIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRepeatOptionsList

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptionsList()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptionsList mockIRepeatOptionsList = Substitute.For<IRepeatOptionsList>();

            int orgId = 1;

            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockListRepeatOptions.Add(mockRepeatOptions);


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockListRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockListRepeatOptions, typeof(IRepeatOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIRepeatOptionsList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptionsList mockIRepeatOptionsList = Substitute.For<IRepeatOptionsList>();

            int orgId = 1;

            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockListRepeatOptions.Add(mockRepeatOptions);


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockListRepeatOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockListRepeatOptions, typeof(IRepeatOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIBaseCommand

        [TestMethod]
        public void Validation_IsValidWithIBaseCommand()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IBaseCommand mockBaseCommand = Substitute.For<IBaseCommand>();



            mockBaseCommand.cmd_user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockBaseCommand, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockBaseCommand.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockBaseCommand, typeof(IBaseCommand));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIBaseCommand_DBIsUserIDKnownDBFail_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IBaseCommand mockBaseCommand = Substitute.For<IBaseCommand>();



            mockBaseCommand.cmd_user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockBaseCommand, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockBaseCommand.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockBaseCommand, typeof(IBaseCommand));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIBaseCommand_DBIsUserIDKnownDBFail_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IBaseCommand mockBaseCommand = Substitute.For<IBaseCommand>();



            mockBaseCommand.cmd_user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockBaseCommand, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockBaseCommand.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockBaseCommand, typeof(IBaseCommand));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIGeneratedOn

        [TestMethod]
        public void Validation_IsValidWithIGeneratedOn()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGeneratedOn mockGeneratedOn = Substitute.For<IGeneratedOn>();



            mockGeneratedOn.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGeneratedOn, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockGeneratedOn.dateOfGeneration).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGeneratedOn, typeof(IGeneratedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGeneratedOn_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGeneratedOn mockGeneratedOn = Substitute.For<IGeneratedOn>();



            mockGeneratedOn.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGeneratedOn, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockGeneratedOn.dateOfGeneration).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGeneratedOn, typeof(IGeneratedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGeneratedOn_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGeneratedOn mockGeneratedOn = Substitute.For<IGeneratedOn>();



            mockGeneratedOn.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGeneratedOn, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockGeneratedOn.dateOfGeneration).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGeneratedOn, typeof(IGeneratedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITSOID

        [TestMethod]
        public void Validation_IsValidWithITSOID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockTSOID = Substitute.For<ITSOID>();



            mockTSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTSOID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockTSOID.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockTSOID = Substitute.For<ITSOID>();



            mockTSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTSOID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockTSOID.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOID_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockTSOID = Substitute.For<ITSOID>();



            mockTSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTSOID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockTSOID.tsoId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRepeatIDList

        [TestMethod]
        public void Validation_IsValidWithIRepeatIDList()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatIDList mockRepeatIDList = Substitute.For<IRepeatIDList>();

            List<int> repeatIds = Substitute.For<List<int>>();
            int repeatId = 1;
            repeatIds.Add(repeatId);
            mockRepeatIDList.repeatIds = repeatIds;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatIDList, typeof(IRepeatIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatIDList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatIDList mockRepeatIDList = Substitute.For<IRepeatIDList>();

            List<int> repeatIds = Substitute.For<List<int>>();
            int repeatId = 1;
            repeatIds.Add(repeatId);
            mockRepeatIDList.repeatIds = repeatIds;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatIDList, typeof(IRepeatIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatIDList_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatIDList mockRepeatIDList = Substitute.For<IRepeatIDList>();

            List<int> repeatIds = Substitute.For<List<int>>();
            int repeatId = 1;
            repeatIds.Add(repeatId);
            mockRepeatIDList.repeatIds = repeatIds;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRepeatIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, repeatId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatIDList, typeof(IRepeatIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITSOComplete

        [TestMethod]
        public void Validation_IsValidWithITSOComplete()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithITSOComplete_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithITsoOptions

        [TestMethod]
        public void Validation_IsValidWithITsoOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidDateTimeString_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidDateTimeString_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPassword

        [TestMethod]
        public void Validation_IsValidWithIPassword()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPassword mockPassword = Substitute.For<IPassword>();

            mockPassword.password = "password";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPassword, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Password(mockPassword.password).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPassword, typeof(IPassword));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPassword_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPassword mockPassword = Substitute.For<IPassword>();

            mockPassword.password = "password";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPassword, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Password(mockPassword.password).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPassword, typeof(IPassword));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPassword_IsValidPasswordInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPassword mockPassword = Substitute.For<IPassword>();

            mockPassword.password = "password";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPassword, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Password(mockPassword.password).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPassword, typeof(IPassword));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIException

        [TestMethod]
        public void Validation_IsValidWithIException()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIException_IsValidExceptionTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockException, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAppointmentOptions

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });
            
            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });



            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });




            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });



            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });






            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });



            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });






            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });



            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });



            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return false;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAppointment

        [TestMethod]
        public void Validation_IsValidWithIAppointment()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIUserOptions

        [TestMethod]
        public void Validation_IsValidWithIUserOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserOptions mockUserOptions = Substitute.For<IUserOptions>();

            mockUserOptions.emailAddress = "xyz@gmail.com";
            mockUserOptions.timeZoneIANA = "America/Boise";
            mockUserOptions.languageKey = ENUM_SYS_LanguageKey.English;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockUserOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockUserOptions.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockUserOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockUserOptions, typeof(IUserOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIUserOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserOptions mockUserOptions = Substitute.For<IUserOptions>();

            mockUserOptions.emailAddress = "xyz@gmail.com";
            mockUserOptions.timeZoneIANA = "America/Boise";
            mockUserOptions.languageKey = ENUM_SYS_LanguageKey.English;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockUserOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockUserOptions.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockUserOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockUserOptions, typeof(IUserOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIUserOptions_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserOptions mockUserOptions = Substitute.For<IUserOptions>();

            mockUserOptions.emailAddress = "xyz@gmail.com";
            mockUserOptions.timeZoneIANA = "America/Boise";
            mockUserOptions.languageKey = ENUM_SYS_LanguageKey.English;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockUserOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockUserOptions.emailAddress).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockUserOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockUserOptions, typeof(IUserOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIUserOptions_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserOptions mockUserOptions = Substitute.For<IUserOptions>();

            mockUserOptions.emailAddress = "xyz@gmail.com";
            mockUserOptions.timeZoneIANA = "America/Boise";
            mockUserOptions.languageKey = ENUM_SYS_LanguageKey.English;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockUserOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockUserOptions.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockUserOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockUserOptions, typeof(IUserOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIITSOID

        [TestMethod]
        public void Validation_IsValidWithIITSOID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockITSOID = Substitute.For<ITSOID>();



            mockITSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOID.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIITSOID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockITSOID = Substitute.For<ITSOID>();



            mockITSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOID.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIITSOID_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockITSOID = Substitute.For<ITSOID>();



            mockITSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSOID.tsoId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICalendarOptions

        [TestMethod]
        public void Validation_IsValidWithICalendarOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarOptions mockCalendarOptions = Substitute.For<ICalendarOptions>();

            mockCalendarOptions.calendarName = "Calendar";
            mockCalendarOptions.orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCalendarOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockCalendarOptions.calendarName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarOptions, typeof(ICalendarOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarOptions mockCalendarOptions = Substitute.For<ICalendarOptions>();

            mockCalendarOptions.calendarName = "Calendar";
            mockCalendarOptions.orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCalendarOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockCalendarOptions.calendarName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarOptions, typeof(ICalendarOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarOptions mockCalendarOptions = Substitute.For<ICalendarOptions>();

            mockCalendarOptions.calendarName = "Calendar";
            mockCalendarOptions.orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCalendarOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockCalendarOptions.calendarName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarOptions, typeof(ICalendarOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarOptions mockCalendarOptions = Substitute.For<ICalendarOptions>();

            mockCalendarOptions.calendarName = "Calendar";
            mockCalendarOptions.orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockCalendarOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockCalendarOptions.calendarName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarOptions, typeof(ICalendarOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICalendarID

        [TestMethod]
        public void Validation_IsValidWithICalendarID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarID mockCalendarID = Substitute.For<ICalendarID>();



            mockCalendarID.calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, mockCalendarID.calendarId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarID, typeof(ICalendarID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarID mockCalendarID = Substitute.For<ICalendarID>();



            mockCalendarID.calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, mockCalendarID.calendarId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarID, typeof(ICalendarID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarID_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarID mockCalendarID = Substitute.For<ICalendarID>();



            mockCalendarID.calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, mockCalendarID.calendarId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarID, typeof(ICalendarID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIFileID

        [TestMethod]
        public void Validation_IsValidWithIFileID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileID mockFileID = Substitute.For<IFileID>();



            mockFileID.fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileID.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileID, typeof(IFileID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileID mockFileID = Substitute.For<IFileID>();



            mockFileID.fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileID.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileID, typeof(IFileID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileID_IsValidFileIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileID mockFileID = Substitute.For<IFileID>();



            mockFileID.fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileID.fileId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileID, typeof(IFileID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIComponentOptions

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_ComponentExpiryUTCInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIComponentID

        [TestMethod]
        public void Validation_IsValidWithIComponentID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentID mockComponentID = Substitute.For<IComponentID>();



            mockComponentID.componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Component_ID(mockComponentID.componentId).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentID, typeof(IComponentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentID mockComponentID = Substitute.For<IComponentID>();



            mockComponentID.componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Component_ID(mockComponentID.componentId).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentID, typeof(IComponentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentID_IsValidComponentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentID mockComponentID = Substitute.For<IComponentID>();



            mockComponentID.componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComponentID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Component_ID(mockComponentID.componentId).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComponentID, typeof(IComponentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIICalendarIDList

        [TestMethod]
        public void Validation_IsValidWithIICalendarIDList()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarIDList mockCalendarIDList = Substitute.For<ICalendarIDList>();


            List<int> calendarIdList = Substitute.For<List<int>>();
            int calId = 1;
            calendarIdList.Add(calId);
            mockCalendarIDList.calendarIdList = calendarIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarIDList, typeof(ICalendarIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIICalendarIDList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarIDList mockCalendarIDList = Substitute.For<ICalendarIDList>();


            List<int> calendarIdList = Substitute.For<List<int>>();
            int calId = 1;
            calendarIdList.Add(calId);
            mockCalendarIDList.calendarIdList = calendarIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarIDList, typeof(ICalendarIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIICalendarIDList_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarIDList mockCalendarIDList = Substitute.For<ICalendarIDList>();


            List<int> calendarIdList = Substitute.For<List<int>>();
            int calId = 1;
            calendarIdList.Add(calId);
            mockCalendarIDList.calendarIdList = calendarIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCalendarIDList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCalendarIDList, typeof(ICalendarIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithILocation

        [TestMethod]
        public void Validation_IsValidWithILocation()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
                        
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocation mockLocation = Substitute.For<ILocation>();

            mockLocation.latitude = 1;
            mockLocation.longitude = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocation, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocation.latitude).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocation.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocation, typeof(ILocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocation_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocation mockLocation = Substitute.For<ILocation>();

            mockLocation.latitude = 1;
            mockLocation.longitude = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocation, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocation.latitude).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocation.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocation, typeof(ILocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocation_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocation mockLocation = Substitute.For<ILocation>();

            mockLocation.latitude = 1;
            mockLocation.longitude = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocation, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocation.latitude).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocation.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocation, typeof(ILocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocation_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocation mockLocation = Substitute.For<ILocation>();

            mockLocation.latitude = 1;
            mockLocation.longitude = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocation, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocation.latitude).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocation.longitude).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocation, typeof(ILocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithITSO

        [TestMethod]
        public void Validation_IsValidWithITSO()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        
        #endregion

        #region IsValidWithILocationLimit

        [TestMethod]
        public void Validation_IsValidWithILocationLimit()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocationLimit_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocationLimit_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocationLimit_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocationLimit_IsValidSearchRangeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICustomerOrderID

        [TestMethod]
        public void Validation_IsValidWithICustomerOrderID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICustomerOrderID mockCustomerOrderID = Substitute.For<ICustomerOrderID>();



            mockCustomerOrderID.Order_ID = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderID, typeof(ICustomerOrderID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICustomerOrderID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICustomerOrderID mockCustomerOrderID = Substitute.For<ICustomerOrderID>();



            mockCustomerOrderID.Order_ID = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderID, typeof(ICustomerOrderID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITSOOptionsList

        [TestMethod]
        public void Validation_IsValidWithITsoOptionsList()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOOptionsList mockITSOOptionsList = Substitute.For<ITSOOptionsList>();

            List<ITsoOptions> mockListITsoOptions = Substitute.For<List<ITsoOptions>>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();

            mockListITsoOptions.Add(mockITsoOptions);

            mockITSOOptionsList.listOfTSOOptions = mockListITsoOptions;
            mockITsoOptions.start = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOOptionsList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            //mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});


            //mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            //{
            //    return true;
            //});
            //mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            //{
            //    return true;
            //});
            //mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            //{
            //    return true;
            //});

            //IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            //mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            //mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            //{
            //    return true;
            //});

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions)).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOOptionsList, typeof(ITSOOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptionsList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOOptionsList mockITSOOptionsList = Substitute.For<ITSOOptionsList>();

            List<ITsoOptions> mockListITsoOptions = Substitute.For<List<ITsoOptions>>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();

            mockListITsoOptions.Add(mockITsoOptions);

            mockITSOOptionsList.listOfTSOOptions = mockListITsoOptions;
            mockITsoOptions.start = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOOptionsList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            //mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});


            //mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            //{
            //    return true;
            //});
            //mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            //{
            //    return true;
            //});
            //mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            //{
            //    return true;
            //});

            //IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            //mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            //mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            //{
            //    return true;
            //});

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions)).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOOptionsList, typeof(ITSOOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptionsList_IsValidInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOOptionsList mockITSOOptionsList = Substitute.For<ITSOOptionsList>();

            List<ITsoOptions> mockListITsoOptions = Substitute.For<List<ITsoOptions>>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();

            mockListITsoOptions.Add(mockITsoOptions);

            mockITSOOptionsList.listOfTSOOptions = mockListITsoOptions;
            mockITsoOptions.start = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockITSOOptionsList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            //mockCoreSc.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockCoreSc.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});


            //mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            //{
            //    return true;
            //});
            //mockCoreSc.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            //{
            //    return true;
            //});
            //mockCoreSc.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            //{
            //    return true;
            //});

            //IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            //mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            //mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            //{
            //    return true;
            //});

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITsoOptions, typeof(ITsoOptions)).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockITSOOptionsList, typeof(ITSOOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITimeZoneIANA

        [TestMethod]
        public void Validation_IsValidWithITimeZoneIANA()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeZoneIANA mockTimeZoneIANA = Substitute.For<ITimeZoneIANA>();

            mockTimeZoneIANA.timeZoneIANA = "America/Boise";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeZoneIANA, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockTimeZoneIANA.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeZoneIANA, typeof(ITimeZoneIANA));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeZoneIANA_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeZoneIANA mockTimeZoneIANA = Substitute.For<ITimeZoneIANA>();

            mockTimeZoneIANA.timeZoneIANA = "America/Boise";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeZoneIANA, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockTimeZoneIANA.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeZoneIANA, typeof(ITimeZoneIANA));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithITimeZoneIANA_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeZoneIANA mockTimeZoneIANA = Substitute.For<ITimeZoneIANA>();

            mockTimeZoneIANA.timeZoneIANA = "America/Boise";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeZoneIANA, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockTimeZoneIANA.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeZoneIANA, typeof(ITimeZoneIANA));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIEmailAddress
        [TestMethod]
        public void Validation_IsValidWithIEmailAddress()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailAddress mockEmailAddress = Substitute.For<IEmailAddress>();

            mockEmailAddress.emailAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockEmailAddress.emailAddress).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailAddress, typeof(IEmailAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailAddress_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailAddress mockEmailAddress = Substitute.For<IEmailAddress>();

            mockEmailAddress.emailAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockEmailAddress.emailAddress).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailAddress, typeof(IEmailAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailAddress_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailAddress mockEmailAddress = Substitute.For<IEmailAddress>();

            mockEmailAddress.emailAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockEmailAddress.emailAddress).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailAddress, typeof(IEmailAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIEmailID
        [TestMethod]
        public void Validation_IsValidWithIEmailID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailID mockEmailID = Substitute.For<IEmailID>();

            mockEmailID.emailId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Email_To_Send_ID(mockCoreProject, mockEmailID.emailId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailID, typeof(IEmailID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailID mockEmailID = Substitute.For<IEmailID>();

            mockEmailID.emailId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Email_To_Send_ID(mockCoreProject, mockEmailID.emailId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailID, typeof(IEmailID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailID_IsValidEmailToSendIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailID mockEmailID = Substitute.For<IEmailID>();

            mockEmailID.emailId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Email_To_Send_ID(mockCoreProject, mockEmailID.emailId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailID, typeof(IEmailID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIEmailOptions

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();

            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();

            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions_IsValidEmailMessageInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();

            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();

            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();

            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        // Modify By: Saddam 
        // Moify date: 30-05-2017

        #region IsValidWithIEmailTo
        [TestMethod]
        public void Validation_IsValidWithIEmailTo()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailTo mockEmailTo = Substitute.For<IEmailTo>();

            mockEmailTo.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailTo, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            mockCoreSc.Is_Valid_EmailAddress(mockEmailTo.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailTo, typeof(IEmailTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailTo_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailTo mockEmailTo = Substitute.For<IEmailTo>();

            mockEmailTo.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailTo, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_EmailAddress(mockEmailTo.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailTo, typeof(IEmailTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailTo_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailTo mockEmailTo = Substitute.For<IEmailTo>();

            mockEmailTo.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockEmailTo, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_EmailAddress(mockEmailTo.toAddress).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockEmailTo, typeof(IEmailTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIGuidStr
        [TestMethod]
        public void Validation_IsValidWithIGuidStr()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGuidStr mockGuidStr = Substitute.For<IGuidStr>();

            mockGuidStr.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGuidStr, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockGuidStr.guidStr).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGuidStr, typeof(IGuidStr));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGuidStr_IsBelongingToOrgInvlaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGuidStr mockGuidStr = Substitute.For<IGuidStr>();

            mockGuidStr.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGuidStr, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_GuidStr(mockGuidStr.guidStr).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGuidStr, typeof(IGuidStr));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGuidStr_IsValidGuidStrInvlaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGuidStr mockGuidStr = Substitute.For<IGuidStr>();

            mockGuidStr.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGuidStr, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockGuidStr.guidStr).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGuidStr, typeof(IGuidStr));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIName
        [TestMethod]
        public void Validation_IsValidWithIName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IName mockName = Substitute.For<IName>();

            mockName.name = "john";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockName.name).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockName, typeof(IName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IName mockName = Substitute.For<IName>();

            mockName.name = "john";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockName.name).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockName, typeof(IName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIName_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IName mockName = Substitute.For<IName>();

            mockName.name = "john";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockName.name).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockName, typeof(IName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDescription
        [TestMethod]
        public void Validation_IsValidWithIDescription()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDescription mockDescription = Substitute.For<IDescription>();

            mockDescription.description = "Description";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDescription, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDescription.description).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDescription, typeof(IDescription));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDescription_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDescription mockDescription = Substitute.For<IDescription>();

            mockDescription.description = "Description";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDescription, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDescription.description).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDescription, typeof(IDescription));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDescription_IsValidDescriptionStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDescription mockDescription = Substitute.For<IDescription>();

            mockDescription.description = "Description";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDescription, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDescription.description).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDescription, typeof(IDescription));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDescription
        [TestMethod]
        public void Validation_IsValidWithICost()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();

            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCost, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICost_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();

            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCost, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICost_IsValidServiceCostInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();

            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCost, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICost_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();

            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCost, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICost_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();

            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCost, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITaxRate
        [TestMethod]
        public void Validation_IsValidWithITaxRate()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITaxRate mockTaxRate = Substitute.For<ITaxRate>();

            mockTaxRate.taxRate = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTaxRate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockTaxRate.taxRate).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTaxRate, typeof(ITaxRate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITaxRate_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITaxRate mockTaxRate = Substitute.For<ITaxRate>();

            mockTaxRate.taxRate = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTaxRate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TaxRate(mockTaxRate.taxRate).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTaxRate, typeof(ITaxRate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITaxRate_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITaxRate mockTaxRate = Substitute.For<ITaxRate>();

            mockTaxRate.taxRate = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTaxRate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockTaxRate.taxRate).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTaxRate, typeof(ITaxRate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIServiceID
        [TestMethod]
        public void Validation_IsValidWithIServiceID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceID mockServiceID = Substitute.For<IServiceID>();

            mockServiceID.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceID, typeof(IServiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceID mockServiceID = Substitute.For<IServiceID>();

            mockServiceID.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceID, typeof(IServiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceID_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceID mockServiceID = Substitute.For<IServiceID>();

            mockServiceID.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceID.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceID, typeof(IServiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFirstName
        [TestMethod]
        public void Validation_IsValidWithIFirstName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFirstName mockFirstName = Substitute.For<IFirstName>();

            mockFirstName.contactFirstName = "FirstName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFirstName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockFirstName.contactFirstName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFirstName, typeof(IFirstName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFirstName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFirstName mockFirstName = Substitute.For<IFirstName>();

            mockFirstName.contactFirstName = "FirstName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFirstName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockFirstName.contactFirstName).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFirstName, typeof(IFirstName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFirstName_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFirstName mockFirstName = Substitute.For<IFirstName>();

            mockFirstName.contactFirstName = "FirstName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFirstName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockFirstName.contactFirstName).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFirstName, typeof(IFirstName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithILastName
        [TestMethod]
        public void Validation_IsValidWithILastName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILastName mockLastName = Substitute.For<ILastName>();

            mockLastName.contactLastName = "LastName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLastName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockLastName.contactLastName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLastName, typeof(ILastName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILastName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILastName mockLastName = Substitute.For<ILastName>();

            mockLastName.contactLastName = "LastName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLastName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockLastName.contactLastName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLastName, typeof(ILastName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILastName_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILastName mockLastName = Substitute.For<ILastName>();

            mockLastName.contactLastName = "LastName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockLastName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockLastName.contactLastName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockLastName, typeof(ILastName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIContactId
        [TestMethod]
        public void Validation_IsValidWithIContactId()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactId mockContactID = Substitute.For<IContactId>();

            mockContactID.contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockContactID.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactID, typeof(IContactId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactId mockContactID = Substitute.For<IContactId>();

            mockContactID.contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockContactID.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactID, typeof(IContactId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactId_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactId mockContactID = Substitute.For<IContactId>();

            mockContactID.contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockContactID.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactID, typeof(IContactId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrgName

        [TestMethod]
        public void Validation_IsValidWithIOrgName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgName mockOrgName = Substitute.For<IOrgName>();

            mockOrgName.orgName = "OrgName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockOrgName.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgName, typeof(IOrgName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgName mockOrgName = Substitute.For<IOrgName>();

            mockOrgName.orgName = "OrgName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_String(mockOrgName.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgName, typeof(IOrgName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgName_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgName mockOrgName = Substitute.For<IOrgName>();

            mockOrgName.orgName = "OrgName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockOrgName.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgName, typeof(IOrgName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithMoneyValue

        [TestMethod]
        public void Validation_IsValidWithIMoneyValue()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryAmount = 1;
            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMoneyValue, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockMoneyValue.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockMoneyValue.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMoneyValue, typeof(IMoneyValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMoneyValue_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryAmount = 1;
            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMoneyValue, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockMoneyValue.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockMoneyValue.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMoneyValue, typeof(IMoneyValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMoneyValue_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryAmount = 1;
            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMoneyValue, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockMoneyValue.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockMoneyValue.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMoneyValue, typeof(IMoneyValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMoneyValue_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryAmount = 1;
            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMoneyValue, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockMoneyValue.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockMoneyValue.monetaryCurrency).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMoneyValue, typeof(IMoneyValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithISalesPrice
        [TestMethod]
        public void Validation_IsValidWithISalesPrice()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISalesPrice mockSalesPrice = Substitute.For<ISalesPrice>();

            mockSalesPrice.monetaryAmount = 1;
            mockSalesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockSalesPrice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockSalesPrice.monetaryAmount).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockSalesPrice, typeof(ISalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithISalesPrice_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISalesPrice mockSalesPrice = Substitute.For<ISalesPrice>();

            mockSalesPrice.monetaryAmount = 1;
            mockSalesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockSalesPrice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockSalesPrice.monetaryAmount).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockSalesPrice, typeof(ISalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithISalesPrice_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISalesPrice mockSalesPrice = Substitute.For<ISalesPrice>();

            mockSalesPrice.monetaryAmount = 1;
            mockSalesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockSalesPrice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockSalesPrice.monetaryAmount).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockSalesPrice, typeof(ISalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithITimeDuration

        [TestMethod]
        public void Validation_IsValidWithITimeDuration()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeDuration mockTimeDuration = Substitute.For<ITimeDuration>();

            mockTimeDuration.durationMilliseconds = 60000;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeDuration, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockTimeDuration.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeDuration, typeof(ITimeDuration));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeDuration_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeDuration mockTimeDuration = Substitute.For<ITimeDuration>();

            mockTimeDuration.durationMilliseconds = 60000;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeDuration, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockTimeDuration.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeDuration, typeof(ITimeDuration));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeDuration_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeDuration mockTimeDuration = Substitute.For<ITimeDuration>();

            mockTimeDuration.durationMilliseconds = 60000;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTimeDuration, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockTimeDuration.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTimeDuration, typeof(ITimeDuration));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIFileUploadStream

        [TestMethod]
        public void Validation_IsValidWithIFileUploadStream()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileUploadStream mockFileUploadStream = Substitute.For<IFileUploadStream>();



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileUploadStream, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileUploadStream, typeof(IFileUploadStream));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileUploadStream_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileUploadStream mockFileUploadStream = Substitute.For<IFileUploadStream>();



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileUploadStream, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileUploadStream, typeof(IFileUploadStream));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFileOptions

        [TestMethod]
        public void Validation_IsValidWithIFileOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidFileExtensionInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidFileNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidSHA256StringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFileName

        [TestMethod]
        public void Validation_IsValidWithIFileName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileName mockFileName = Substitute.For<IFileName>();

            mockFileName.fileName = "FileName";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileName.fileName, mockCoreSc).Returns(x =>
             {
                 return true;
             });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileName, typeof(IFileName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileName mockFileName = Substitute.For<IFileName>();

            mockFileName.fileName = "FileName";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileName.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileName, typeof(IFileName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileName_IsValidFileNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileName mockFileName = Substitute.For<IFileName>();

            mockFileName.fileName = "FileName";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileName.fileName, mockCoreSc).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileName, typeof(IFileName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIFileExtension

        [TestMethod]
        public void Validation_IsValidWithIFileExtension()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileExtension mockFileExtension = Substitute.For<IFileExtension>();

            mockFileExtension.fileExtension = "txt";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileExtension, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileExtension.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileExtension, typeof(IFileExtension));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileExtension_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileExtension mockFileExtension = Substitute.For<IFileExtension>();

            mockFileExtension.fileExtension = "txt";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileExtension, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileExtension.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileExtension, typeof(IFileExtension));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileExtension_IsValidFileExtensionInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileExtension mockFileExtension = Substitute.For<IFileExtension>();

            mockFileExtension.fileExtension = "txt";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileExtension, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileExtension.fileExtension, mockCoreSc).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileExtension, typeof(IFileExtension));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithICreatedBy

        [TestMethod]
        public void Validation_IsValidWithICreatedBy()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedBy mockCreatedBy = Substitute.For<ICreatedBy>();



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatedBy, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreatedBy.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatedBy, typeof(ICreatedBy));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatedBy_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedBy mockCreatedBy = Substitute.For<ICreatedBy>();



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatedBy, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreatedBy.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatedBy, typeof(ICreatedBy));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatedBy_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedBy mockCreatedBy = Substitute.For<ICreatedBy>();



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatedBy, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockCreatedBy.createdByUserId, mockCoreDb).Returns(x =>
            {
                return false;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatedBy, typeof(ICreatedBy));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIFileWriteCoreAction

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidFileExtensionInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidFileNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidSHA256StringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithICoreAction

        [TestMethod]
        public void Validation_IsValidWithICoreAction()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICoreAction mockCoreAction = Substitute.For<ICoreAction>();

            mockCoreAction.coreAction = ENUM_Core_Function.readTempPaypal;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreAction, typeof(ICoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICoreAction_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICoreAction mockCoreAction = Substitute.For<ICoreAction>();

            mockCoreAction.coreAction = ENUM_Core_Function.readTempPaypal;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCoreAction, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreAction, typeof(ICoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIStream

        [TestMethod]
        public void Validation_IsValidWithIStream()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IStream mockStream = Substitute.For<IStream>();



            mockStream.streamData = Stream.Null;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockStream, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockStream, typeof(IStream));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIStream_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IStream mockStream = Substitute.For<IStream>();



            mockStream.streamData = Stream.Null;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockStream, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockStream, typeof(IStream));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithISha256

        [TestMethod]
        public void Validation_IsValidWithISha256()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISha256 mockStream = Substitute.For<ISha256>();

            mockStream.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"; ;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockStream, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            mockCoreSc.Is_Valid_SHA256_String(mockStream.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockStream, typeof(ISha256));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithISha256_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISha256 mockStream = Substitute.For<ISha256>();

            mockStream.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"; ;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockStream, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_SHA256_String(mockStream.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockStream, typeof(ISha256));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithISha256_IsValidSHA256StringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISha256 mockStream = Substitute.For<ISha256>();

            mockStream.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"; ;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockStream, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_SHA256_String(mockStream.sha256).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockStream, typeof(ISha256));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFileServiceMap

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap_IsValidFileIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIIsActive

        [TestMethod]
        public void Validation_IsValidWithIIsActive()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IIsActive mockIsActive = Substitute.For<IIsActive>();

            mockIsActive.isActive = ENUM_Activation_State.Inactive;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockIsActive, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockIsActive, typeof(IIsActive));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIIsActive_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IIsActive mockIsActive = Substitute.For<IIsActive>();

            mockIsActive.isActive = ENUM_Activation_State.Inactive;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockIsActive, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockIsActive, typeof(IIsActive));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAddressID

        [TestMethod]
        public void Validation_IsValidWithIAddressID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressID mockAddressID = Substitute.For<IAddressID>();

            mockAddressID.addressId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_ID(mockCoreProject, mockAddressID.addressId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressID, typeof(IAddressID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressID mockAddressID = Substitute.For<IAddressID>();

            mockAddressID.addressId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Address_ID(mockCoreProject, mockAddressID.addressId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressID, typeof(IAddressID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressID_IsValidAddressIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressID mockAddressID = Substitute.For<IAddressID>();

            mockAddressID.addressId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAddressID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_ID(mockCoreProject, mockAddressID.addressId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAddressID, typeof(IAddressID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICountryLocation

        [TestMethod]
        public void Validation_IsValidWithICountryLocation()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICountryLocation mockCountryLocation = Substitute.For<ICountryLocation>();

            mockCountryLocation.country = Enum_SYS_Country_Location.USA;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCountryLocation, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCountryLocation, typeof(ICountryLocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICountryLocation_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICountryLocation mockCountryLocation = Substitute.For<ICountryLocation>();

            mockCountryLocation.country = Enum_SYS_Country_Location.USA;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCountryLocation, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCountryLocation, typeof(ICountryLocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrderID

        [TestMethod]
        public void Validation_IsValidWithIOrderID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderID mockOrderID = Substitute.For<IOrderID>();

            mockOrderID.orderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrderID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrderID, typeof(IOrderID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrderID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderID mockOrderID = Substitute.For<IOrderID>();

            mockOrderID.orderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrderID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrderID, typeof(IOrderID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPerformedByResourceID

        [TestMethod]
        public void Validation_IsValidWithIPerformedByResourceID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPerformedByResourceID mockPerformedByResourceID = Substitute.For<IPerformedByResourceID>();

            mockPerformedByResourceID.performedByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPerformedByResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockPerformedByResourceID.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPerformedByResourceID, typeof(IPerformedByResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPerformedByResourceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPerformedByResourceID mockPerformedByResourceID = Substitute.For<IPerformedByResourceID>();

            mockPerformedByResourceID.performedByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPerformedByResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockPerformedByResourceID.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPerformedByResourceID, typeof(IPerformedByResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPerformedByResourceID_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPerformedByResourceID mockPerformedByResourceID = Substitute.For<IPerformedByResourceID>();

            mockPerformedByResourceID.performedByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPerformedByResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockPerformedByResourceID.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPerformedByResourceID, typeof(IPerformedByResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRequireResourceID

        [TestMethod]
        public void Validation_IsValidWithIRequireResourceID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRequireResourceID mockRequireResourceID = Substitute.For<IRequireResourceID>();

            mockRequireResourceID.requireResourceByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRequireResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockRequireResourceID.requireResourceByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRequireResourceID, typeof(IRequireResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRequireResourceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRequireResourceID mockRequireResourceID = Substitute.For<IRequireResourceID>();

            mockRequireResourceID.requireResourceByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRequireResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockRequireResourceID.requireResourceByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRequireResourceID, typeof(IRequireResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRequireResourceID_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRequireResourceID mockRequireResourceID = Substitute.For<IRequireResourceID>();

            mockRequireResourceID.requireResourceByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRequireResourceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockRequireResourceID.requireResourceByResourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRequireResourceID, typeof(IRequireResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICustomerOrderOptions

        [TestMethod]
        public void Validation_IsValidWithICustomerOrderOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICustomerOrderOptions mockCustomerOrderOptions = Substitute.For<ICustomerOrderOptions>();

            mockCustomerOrderOptions.customerId = 1;
            mockCustomerOrderOptions.orderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderOptions, typeof(ICustomerOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICustomerOrderOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICustomerOrderOptions mockCustomerOrderOptions = Substitute.For<ICustomerOrderOptions>();

            mockCustomerOrderOptions.customerId = 1;
            mockCustomerOrderOptions.orderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderOptions, typeof(ICustomerOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithICustomerOrderOptions_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICustomerOrderOptions mockCustomerOrderOptions = Substitute.For<ICustomerOrderOptions>();

            mockCustomerOrderOptions.customerId = 1;
            mockCustomerOrderOptions.orderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderOptions, typeof(ICustomerOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICustomerID

        [TestMethod]
        public void Validation_IsValidWithICustomerID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICustomerID mockCustomerID = Substitute.For<ICustomerID>();

            mockCustomerID.customerId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCustomerID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockCustomerID.customerId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerID, typeof(ICustomerID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICustomerID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICustomerID mockCustomerID = Substitute.For<ICustomerID>();

            mockCustomerID.customerId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCustomerID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockCustomerID.customerId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerID, typeof(ICustomerID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICustomerID_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICustomerID mockCustomerID = Substitute.For<ICustomerID>();

            mockCustomerID.customerId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCustomerID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockCustomerID.customerId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerID, typeof(ICustomerID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrgCustomerOrderOptions

        [TestMethod]
        public void Validation_IsValidWithIOrgCustomerOrderOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgCustomerOrderOptions mockOrgCustomerOrderOptions = Substitute.For<IOrgCustomerOrderOptions>();

            mockOrgCustomerOrderOptions.customerId = 1;
            mockOrgCustomerOrderOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgCustomerOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgCustomerOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockOrgCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgCustomerOrderOptions, typeof(IOrgCustomerOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgCustomerOrderOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgCustomerOrderOptions mockOrgCustomerOrderOptions = Substitute.For<IOrgCustomerOrderOptions>();

            mockOrgCustomerOrderOptions.customerId = 1;
            mockOrgCustomerOrderOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgCustomerOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgCustomerOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockOrgCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgCustomerOrderOptions, typeof(IOrgCustomerOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgCustomerOrderOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgCustomerOrderOptions mockOrgCustomerOrderOptions = Substitute.For<IOrgCustomerOrderOptions>();

            mockOrgCustomerOrderOptions.customerId = 1;
            mockOrgCustomerOrderOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgCustomerOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgCustomerOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockOrgCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgCustomerOrderOptions, typeof(IOrgCustomerOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgCustomerOrderOptions_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgCustomerOrderOptions mockOrgCustomerOrderOptions = Substitute.For<IOrgCustomerOrderOptions>();

            mockOrgCustomerOrderOptions.customerId = 1;
            mockOrgCustomerOrderOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgCustomerOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockOrgCustomerOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockOrgCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgCustomerOrderOptions, typeof(IOrgCustomerOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIOrderOptions

        [TestMethod]
        public void Validation_IsValidWithIOrderOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderOptions mockOrderOptions = Substitute.For<IOrderOptions>();

            mockOrderOptions.orderState = ENUM_SYS_Order_State.Invoiced;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrderOptions, typeof(IOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrderOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderOptions mockOrderOptions = Substitute.For<IOrderOptions>();

            mockOrderOptions.orderState = ENUM_SYS_Order_State.Invoiced;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrderOptions, typeof(IOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrderOptions_OrderStateUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderOptions mockOrderOptions = Substitute.For<IOrderOptions>();

            mockOrderOptions.orderState = ENUM_SYS_Order_State.Unknown;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrderOptions, typeof(IOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceOrderId

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderId()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderId mockServiceOrderId = Substitute.For<IServiceOrderId>();

            mockServiceOrderId.serviceOrderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockServiceOrderId.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderId, typeof(IServiceOrderId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderId_IsBelongingToOrgInavalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderId mockServiceOrderId = Substitute.For<IServiceOrderId>();

            mockServiceOrderId.serviceOrderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockServiceOrderId.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderId, typeof(IServiceOrderId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderId_IsValidServiceOrderIDInavalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderId mockServiceOrderId = Substitute.For<IServiceOrderId>();

            mockServiceOrderId.serviceOrderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockServiceOrderId.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderId, typeof(IServiceOrderId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIContactTitle

        [TestMethod]
        public void Validation_IsValidWithIContactTitle()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactTitle mockContactTitle = Substitute.For<IContactTitle>();

            mockContactTitle.contactTitle = Enum_SYS_User_Title.Mrs;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactTitle, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactTitle, typeof(IContactTitle));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactTitle_ContactTitleUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactTitle mockContactTitle = Substitute.For<IContactTitle>();

            mockContactTitle.contactTitle = Enum_SYS_User_Title.Unknown;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactTitle, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactTitle, typeof(IContactTitle));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactTitle_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactTitle mockContactTitle = Substitute.For<IContactTitle>();

            mockContactTitle.contactTitle = Enum_SYS_User_Title.Mrs;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockContactTitle, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockContactTitle, typeof(IContactTitle));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrijiAppGUID

        [TestMethod]
        public void Validation_IsValidWithIOrijiAppGUID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrijiAppGUID mockOrijiAppGUID = Substitute.For<IOrijiAppGUID>();

            mockOrijiAppGUID.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrijiAppGUID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockOrijiAppGUID.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrijiAppGUID, typeof(IOrijiAppGUID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrijiAppGUID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrijiAppGUID mockOrijiAppGUID = Substitute.For<IOrijiAppGUID>();

            mockOrijiAppGUID.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrijiAppGUID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_GuidStr(mockOrijiAppGUID.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrijiAppGUID, typeof(IOrijiAppGUID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrijiAppGUID_IsValidGuidStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrijiAppGUID mockOrijiAppGUID = Substitute.For<IOrijiAppGUID>();

            mockOrijiAppGUID.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrijiAppGUID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockOrijiAppGUID.applicationGUID).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrijiAppGUID, typeof(IOrijiAppGUID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        // Modify By: Saddam 
        // Moify date: 31-05-2017

        #region IsValidWithIRoleName

        [TestMethod]
        public void Validation_IsValidWithIRoleName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleName mockRoleName = Substitute.For<IRoleName>();

            mockRoleName.roleName = "Admin";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Role_Name(mockRoleName.roleName).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleName, typeof(IRoleName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleName mockRoleName = Substitute.For<IRoleName>();

            mockRoleName.roleName = "Admin";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Role_Name(mockRoleName.roleName).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleName, typeof(IRoleName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleName_IsValidRoleNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleName mockRoleName = Substitute.For<IRoleName>();

            mockRoleName.roleName = "Admin";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleName, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Role_Name(mockRoleName.roleName).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleName, typeof(IRoleName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRoleID

        [TestMethod]
        public void Validation_IsValidWithIRoleID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleID mockRoleID = Substitute.For<IRoleID>();

            mockRoleID.roleId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Role_ID(mockCoreProject, mockRoleID.roleId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleID, typeof(IRoleID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleID mockRoleID = Substitute.For<IRoleID>();

            mockRoleID.roleId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Role_ID(mockCoreProject, mockRoleID.roleId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleID, typeof(IRoleID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleID_IsValidRoleIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleID mockRoleID = Substitute.For<IRoleID>();

            mockRoleID.roleId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Role_ID(mockCoreProject, mockRoleID.roleId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleID, typeof(IRoleID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPermissionList

        [TestMethod]
        public void Validation_IsValidWithIPermissionList()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPermissionList mockPermissionList = Substitute.For<IPermissionList>();

            List<ENUM_Core_Function> permissionList = Substitute.For<List<ENUM_Core_Function>>();
            ENUM_Core_Function permission = ENUM_Core_Function.CF_createComponent;
            permissionList.Add(permission);
            mockPermissionList.permissionList = permissionList;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPermissionList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPermissionList, typeof(IPermissionList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPermissionList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPermissionList mockPermissionList = Substitute.For<IPermissionList>();

            List<ENUM_Core_Function> permissionList = Substitute.For<List<ENUM_Core_Function>>();
            ENUM_Core_Function permission = ENUM_Core_Function.CF_createComponent;
            permissionList.Add(permission);
            mockPermissionList.permissionList = permissionList;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPermissionList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPermissionList, typeof(IPermissionList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIRoleOptions

        [TestMethod]
        public void Validation_IsValidWithIRoleOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleOptions mockRoleOptions = Substitute.For<IRoleOptions>();

            mockRoleOptions.orgId = 1;
            mockRoleOptions.roleName = "Role Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Role_Name(mockRoleOptions.roleName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRoleOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleOptions, typeof(IRoleOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleOptions mockRoleOptions = Substitute.For<IRoleOptions>();

            mockRoleOptions.orgId = 1;
            mockRoleOptions.roleName = "Role Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Role_Name(mockRoleOptions.roleName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRoleOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleOptions, typeof(IRoleOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleOptions_IsValidRoleNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleOptions mockRoleOptions = Substitute.For<IRoleOptions>();

            mockRoleOptions.orgId = 1;
            mockRoleOptions.roleName = "Role Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Role_Name(mockRoleOptions.roleName).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRoleOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleOptions, typeof(IRoleOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleOptions mockRoleOptions = Substitute.For<IRoleOptions>();

            mockRoleOptions.orgId = 1;
            mockRoleOptions.roleName = "Role Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRoleOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Role_Name(mockRoleOptions.roleName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockRoleOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRoleOptions, typeof(IRoleOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIDeadline

        [TestMethod]
        public void Validation_IsValidWithIDeadline()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeadline mockDeadline = Substitute.For<IDeadline>();

            mockDeadline.deadline_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDeadline, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDeadline.deadline_UTC).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDeadline, typeof(IDeadline));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDeadline_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeadline mockDeadline = Substitute.For<IDeadline>();

            mockDeadline.deadline_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDeadline, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDeadline.deadline_UTC).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDeadline, typeof(IDeadline));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDeadline_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeadline mockDeadline = Substitute.For<IDeadline>();

            mockDeadline.deadline_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDeadline, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDeadline.deadline_UTC).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDeadline, typeof(IDeadline));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICreatedOn

        [TestMethod]
        public void Validation_IsValidWithICreatedOn()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedOn mockCreatedOn = Substitute.For<ICreatedOn>();

            mockCreatedOn.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatedOn, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockCreatedOn.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatedOn, typeof(ICreatedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatedOn_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedOn mockCreatedOn = Substitute.For<ICreatedOn>();

            mockCreatedOn.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatedOn, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockCreatedOn.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatedOn, typeof(ICreatedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatedOn_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedOn mockCreatedOn = Substitute.For<ICreatedOn>();

            mockCreatedOn.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockCreatedOn, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockCreatedOn.createdOn_UTC).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCreatedOn, typeof(ICreatedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDeliveryDate

        [TestMethod]
        public void Validation_IsValidWithIDeliveryDate()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeliveryDate mockDeliveryDate = Substitute.For<IDeliveryDate>();

            mockDeliveryDate.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDeliveryDate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDeliveryDate.deliveryDate_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDeliveryDate, typeof(IDeliveryDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDeliveryDate_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeliveryDate mockDeliveryDate = Substitute.For<IDeliveryDate>();

            mockDeliveryDate.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDeliveryDate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDeliveryDate.deliveryDate_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDeliveryDate, typeof(IDeliveryDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDeliveryDate_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeliveryDate mockDeliveryDate = Substitute.For<IDeliveryDate>();

            mockDeliveryDate.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDeliveryDate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDeliveryDate.deliveryDate_UTC).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDeliveryDate, typeof(IDeliveryDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIReferenceString

        [TestMethod]
        public void Validation_IsValidWithIReferenceString()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IReferenceString mockReferenceString = Substitute.For<IReferenceString>();

            mockReferenceString.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockReferenceString, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockReferenceString.reference).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockReferenceString, typeof(IReferenceString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIReferenceString_IsBelongingToOrgInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IReferenceString mockReferenceString = Substitute.For<IReferenceString>();

            mockReferenceString.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockReferenceString, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockReferenceString.reference).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockReferenceString, typeof(IReferenceString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIReferenceString_IsValidStringInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IReferenceString mockReferenceString = Substitute.For<IReferenceString>();

            mockReferenceString.reference = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockReferenceString, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockReferenceString.reference).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockReferenceString, typeof(IReferenceString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region  IsValidWithIDiscountComplete

        /// <summary>
        /// Need to add validation rules for few inherit interface
        /// </summary>
        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsBelongingToOrgInvallid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsValidCurrencyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMonetaryAmount

        [TestMethod]
        public void Validation_IsValidWithIMonetaryAmount()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryAmount mockMonetaryAmount = Substitute.For<IMonetaryAmount>();

            mockMonetaryAmount.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMonetaryAmount, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockMonetaryAmount.monetaryAmount).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMonetaryAmount, typeof(IMonetaryAmount));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMonetaryAmount_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryAmount mockMonetaryAmount = Substitute.For<IMonetaryAmount>();

            mockMonetaryAmount.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMonetaryAmount, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockMonetaryAmount.monetaryAmount).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMonetaryAmount, typeof(IMonetaryAmount));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMonetaryAmount_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryAmount mockMonetaryAmount = Substitute.For<IMonetaryAmount>();

            mockMonetaryAmount.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMonetaryAmount, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockMonetaryAmount.monetaryAmount).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMonetaryAmount, typeof(IMonetaryAmount));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMonetaryCurrency

        [TestMethod]
        public void Validation_IsValidWithIMonetaryCurrency()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryCurrency mockMonetaryCurrency = Substitute.For<IMonetaryCurrency>();

            mockMonetaryCurrency.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMonetaryCurrency, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockMonetaryCurrency.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMonetaryCurrency, typeof(IMonetaryCurrency));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMonetaryCurrency_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryCurrency mockMonetaryCurrency = Substitute.For<IMonetaryCurrency>();

            mockMonetaryCurrency.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMonetaryCurrency, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockMonetaryCurrency.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMonetaryCurrency, typeof(IMonetaryCurrency));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMonetaryCurrency_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryCurrency mockMonetaryCurrency = Substitute.For<IMonetaryCurrency>();

            mockMonetaryCurrency.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMonetaryCurrency, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockMonetaryCurrency.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMonetaryCurrency, typeof(IMonetaryCurrency));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPercentageValue

        [TestMethod]
        public void Validation_IsValidWithIPercentageValue()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPercentageValue mockPercentageValue = Substitute.For<IPercentageValue>();

            mockPercentageValue.percentageValue = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPercentageValue, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPercentageValue, typeof(IPercentageValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPercentageValue_PercentageValueInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPercentageValue mockPercentageValue = Substitute.For<IPercentageValue>();

            mockPercentageValue.percentageValue = 101;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPercentageValue, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPercentageValue, typeof(IPercentageValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIInvoiceID

        [TestMethod]
        public void Validation_IsValidWithIInvoiceID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceID mockInvoiceID = Substitute.For<IInvoiceID>();

            mockInvoiceID.invoiceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceID.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceID, typeof(IInvoiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceID mockInvoiceID = Substitute.For<IInvoiceID>();

            mockInvoiceID.invoiceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceID.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceID, typeof(IInvoiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceID_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceID mockInvoiceID = Substitute.For<IInvoiceID>();

            mockInvoiceID.invoiceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceID.invoiceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceID, typeof(IInvoiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIComputedSalesPrice

        [TestMethod]
        public void Validation_IsValidWithIComputedSalesPrice()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComputedSalesPrice mockComputedSalesPrice = Substitute.For<IComputedSalesPrice>();

            IMoneyValueComplete mockMoneyValueComplete = Substitute.For<IMoneyValueComplete>();

            mockMoneyValueComplete.monetaryAmount = 1;
            mockMoneyValueComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValueComplete.moneyString = "Money String";
            mockComputedSalesPrice.computedMoneyValue = mockMoneyValueComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComputedSalesPrice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyValue(mockComputedSalesPrice.computedMoneyValue).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComputedSalesPrice, typeof(IComputedSalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComputedSalesPrice_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComputedSalesPrice mockComputedSalesPrice = Substitute.For<IComputedSalesPrice>();

            IMoneyValueComplete mockMoneyValueComplete = Substitute.For<IMoneyValueComplete>();

            mockMoneyValueComplete.monetaryAmount = 1;
            mockMoneyValueComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValueComplete.moneyString = "Money String";
            mockComputedSalesPrice.computedMoneyValue = mockMoneyValueComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComputedSalesPrice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyValue(mockComputedSalesPrice.computedMoneyValue).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComputedSalesPrice, typeof(IComputedSalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComputedSalesPrice_IsValidMoneyValueInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComputedSalesPrice mockComputedSalesPrice = Substitute.For<IComputedSalesPrice>();

            IMoneyValueComplete mockMoneyValueComplete = Substitute.For<IMoneyValueComplete>();

            mockMoneyValueComplete.monetaryAmount = 1;
            mockMoneyValueComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValueComplete.moneyString = "Money String";
            mockComputedSalesPrice.computedMoneyValue = mockMoneyValueComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockComputedSalesPrice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyValue(mockComputedSalesPrice.computedMoneyValue).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockComputedSalesPrice, typeof(IComputedSalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIInvoiceableItemOptions

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidProductIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIProductID

        [TestMethod]
        public void Validation_IsValidWithIProductID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductID mockProductID = Substitute.For<IProductID>();

            mockProductID.productId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockProductID.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductID, typeof(IProductID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductID mockProductID = Substitute.For<IProductID>();

            mockProductID.productId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockProductID.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductID, typeof(IProductID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductID_IsValidProductIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductID mockProductID = Substitute.For<IProductID>();

            mockProductID.productId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockProductID.productId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductID, typeof(IProductID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPaymentOptions

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPaymentDate

        [TestMethod]
        public void Validation_IsValidWithIPaymentDate()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentDate mockPaymentDate = Substitute.For<IPaymentDate>();

            mockPaymentDate.paymentDate = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentDate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentDate.paymentDate).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentDate, typeof(IPaymentDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentDate_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentDate mockPaymentDate = Substitute.For<IPaymentDate>();

            mockPaymentDate.paymentDate = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentDate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentDate.paymentDate).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentDate, typeof(IPaymentDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentDate_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentDate mockPaymentDate = Substitute.For<IPaymentDate>();

            mockPaymentDate.paymentDate = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentDate, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockPaymentDate.paymentDate).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentDate, typeof(IPaymentDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPaymentID

        [TestMethod]
        public void Validation_IsValidWithIPaymentId()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentId mockPaymentId = Substitute.For<IPaymentId>();

            mockPaymentId.paymentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Payment_ID(mockCoreProject, mockPaymentId.paymentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentId, typeof(IPaymentId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentId mockPaymentId = Substitute.For<IPaymentId>();

            mockPaymentId.paymentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Payment_ID(mockCoreProject, mockPaymentId.paymentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentId, typeof(IPaymentId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentId_IsValidPaymentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentId mockPaymentId = Substitute.For<IPaymentId>();

            mockPaymentId.paymentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaymentId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Payment_ID(mockCoreProject, mockPaymentId.paymentId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaymentId, typeof(IPaymentId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceFulfilmentConfigID

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigID mockServiceFulfilmentConfigID = Substitute.For<IServiceFulfilmentConfigID>();

            mockServiceFulfilmentConfigID.serviceFulfilmentConfigId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigID.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigID, typeof(IServiceFulfilmentConfigID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigID_IsBelongingToOrg()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigID mockServiceFulfilmentConfigID = Substitute.For<IServiceFulfilmentConfigID>();

            mockServiceFulfilmentConfigID.serviceFulfilmentConfigId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigID.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigID, typeof(IServiceFulfilmentConfigID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigID_IsValidServiceFulfilmentConfigIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigID mockServiceFulfilmentConfigID = Substitute.For<IServiceFulfilmentConfigID>();

            mockServiceFulfilmentConfigID.serviceFulfilmentConfigId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigID.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigID, typeof(IServiceFulfilmentConfigID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceFulfilmentConfigOptions

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceFulfilmentConfigResourceMapID

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapID mockServiceFulfilmentConfigResourceMapID = Substitute.For<IServiceFulfilmentConfigResourceMapID>();

            mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapID, typeof(IServiceFulfilmentConfigResourceMapID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapID mockServiceFulfilmentConfigResourceMapID = Substitute.For<IServiceFulfilmentConfigResourceMapID>();

            mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapID, typeof(IServiceFulfilmentConfigResourceMapID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapID_IsValidServiceFulfilmentConfigResourceMapIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapID mockServiceFulfilmentConfigResourceMapID = Substitute.For<IServiceFulfilmentConfigResourceMapID>();

            mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapID, typeof(IServiceFulfilmentConfigResourceMapID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceFulfilmentConfigResourceMapOptions

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidOrgIDInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsBelongingToOrgInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidServiceIDInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidResourceIDInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidMoneyAmountInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidMsDurationInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidServiceFulfilmentConfigIDInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidCurrencyInvaid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIIsPlatform

        [TestMethod]
        public void Validation_IsValidWithIIsPlatform()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IIsPlatform mockIsPlatform = Substitute.For<IIsPlatform>();

            mockIsPlatform.isPlatformSpecific = ENUM_Org_Is_Platform.NotPlatformSpecific;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockIsPlatform, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockIsPlatform, typeof(IIsPlatform));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIIsPlatform_IIsPlatformUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IIsPlatform mockIsPlatform = Substitute.For<IIsPlatform>();

            mockIsPlatform.isPlatformSpecific = ENUM_Org_Is_Platform.Unknown;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockIsPlatform, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockIsPlatform, typeof(IIsPlatform));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion                                                                     

        #region IsValidWithITempPaypalOptions

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_GuidStr(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsValidGuidStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPaypalPaymentID

        [TestMethod]
        public void Validation_IsValidWithIPaypalPaymentID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaypalPaymentID mockPaypalPaymentID = Substitute.For<IPaypalPaymentID>();

            mockPaypalPaymentID.paypalPaymentId = "1";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaypalPaymentID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

 
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaypalPaymentID, typeof(IPaypalPaymentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaypalPaymentID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaypalPaymentID mockPaypalPaymentID = Substitute.For<IPaypalPaymentID>();

            mockPaypalPaymentID.paypalPaymentId = "1";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPaypalPaymentID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPaypalPaymentID, typeof(IPaypalPaymentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITempPaypalID

        [TestMethod]
        public void Validation_IsValidWithITempPaypalID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalID mockTempPaypalID = Substitute.For<ITempPaypalID>();

            mockTempPaypalID.tempPaypalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TempPaypalID(mockCoreProject, mockTempPaypalID.tempPaypalId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalID, typeof(ITempPaypalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalID mockTempPaypalID = Substitute.For<ITempPaypalID>();

            mockTempPaypalID.tempPaypalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TempPaypalID(mockCoreProject, mockTempPaypalID.tempPaypalId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalID, typeof(ITempPaypalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalID_IsValidTempPaypalIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalID mockTempPaypalID = Substitute.For<ITempPaypalID>();

            mockTempPaypalID.tempPaypalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TempPaypalID(mockCoreProject, mockTempPaypalID.tempPaypalId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockTempPaypalID, typeof(ITempPaypalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIGender

        [TestMethod]
        public void Validation_IsValidWithIGender()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGender mockGender = Substitute.For<IGender>();

            mockGender.gender = ENUM_Gender.female;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGender, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockGender.gender).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGender, typeof(IGender));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGender_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGender mockGender = Substitute.For<IGender>();

            mockGender.gender = ENUM_Gender.female;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGender, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Gender(mockGender.gender).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGender, typeof(IGender));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGender_IsValidGenderInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGender mockGender = Substitute.For<IGender>();

            mockGender.gender = ENUM_Gender.female;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockGender, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockGender.gender).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockGender, typeof(IGender));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAnimalID

        [TestMethod]
        public void Validation_IsValidWithIAnimalID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalID mockAnimalID = Substitute.For<IAnimalID>();

            mockAnimalID.animalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Animal_ID(mockCoreProject, mockAnimalID.animalId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalID, typeof(IAnimalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalID mockAnimalID = Substitute.For<IAnimalID>();

            mockAnimalID.animalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Animal_ID(mockCoreProject, mockAnimalID.animalId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalID, typeof(IAnimalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalID_IsValidAnimalIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalID mockAnimalID = Substitute.For<IAnimalID>();

            mockAnimalID.animalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Animal_ID(mockCoreProject, mockAnimalID.animalId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalID, typeof(IAnimalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIAnimalOptions

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_AnimalBreedUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Unknown;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_AnimalSpeciesUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Unknown;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_BloodGroupUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Piscine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.Unknown;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_DeceasedStatusUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Piscine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.T;
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.Unknown;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_DesexedStatusUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Piscine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.T;
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.Unknown;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsActiveUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Piscine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.T;
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Unknown;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidGenderInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_InsuranceReferenceNumberInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_MainColourInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_SecondaryColourInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_MicrochipIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_PassportNumberInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_DateOfBirthInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMedicalNoteOptions

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsValidLongStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsValidMedicalRecordIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMedicalRecordId

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordId()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordId mockMedicalRecordId = Substitute.For<IMedicalRecordId>();

            mockMedicalRecordId.medicalRecordId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalRecordId.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalRecordId, typeof(IMedicalRecordId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordId mockMedicalRecordId = Substitute.For<IMedicalRecordId>();

            mockMedicalRecordId.medicalRecordId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalRecordId.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalRecordId, typeof(IMedicalRecordId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        
        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordId_IsValidMedicalRecordIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordId mockMedicalRecordId = Substitute.For<IMedicalRecordId>();

            mockMedicalRecordId.medicalRecordId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalRecordId.medicalRecordId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalRecordId, typeof(IMedicalRecordId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMedicalNoteId

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteId()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteId mockMedicalNoteId = Substitute.For<IMedicalNoteId>();

            mockMedicalNoteId.medicalNoteId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalNote_ID(mockCoreProject, mockMedicalNoteId.medicalNoteId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteId, typeof(IMedicalNoteId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteId mockMedicalNoteId = Substitute.For<IMedicalNoteId>();

            mockMedicalNoteId.medicalNoteId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MedicalNote_ID(mockCoreProject, mockMedicalNoteId.medicalNoteId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteId, typeof(IMedicalNoteId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteId_IsValidMedicalNoteIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteId mockMedicalNoteId = Substitute.For<IMedicalNoteId>();

            mockMedicalNoteId.medicalNoteId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MedicalNote_ID(mockCoreProject, mockMedicalNoteId.medicalNoteId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalNoteId, typeof(IMedicalNoteId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMedicalRecordOptions

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordOptions mockMedicalRecordOptions = Substitute.For<IMedicalRecordOptions>();

            mockMedicalRecordOptions.animalId = 1;
            mockMedicalRecordOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalRecordOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Animal_ID(mockCoreProject, mockMedicalRecordOptions.animalId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalRecordOptions, typeof(IMedicalRecordOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordOptions mockMedicalRecordOptions = Substitute.For<IMedicalRecordOptions>();

            mockMedicalRecordOptions.animalId = 1;
            mockMedicalRecordOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalRecordOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Animal_ID(mockCoreProject, mockMedicalRecordOptions.animalId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalRecordOptions, typeof(IMedicalRecordOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordOptions mockMedicalRecordOptions = Substitute.For<IMedicalRecordOptions>();

            mockMedicalRecordOptions.animalId = 1;
            mockMedicalRecordOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalRecordOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Animal_ID(mockCoreProject, mockMedicalRecordOptions.animalId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalRecordOptions, typeof(IMedicalRecordOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordOptions_IsValidAnimalIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordOptions mockMedicalRecordOptions = Substitute.For<IMedicalRecordOptions>();

            mockMedicalRecordOptions.animalId = 1;
            mockMedicalRecordOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockMedicalRecordOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Animal_ID(mockCoreProject, mockMedicalRecordOptions.animalId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMedicalRecordOptions, typeof(IMedicalRecordOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFileServiceFulfilmentConfigMap

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsValidFileIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsValidServiceFulfilmentConfigIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsActiveUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Unknown;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool serviceFulfilmentConfigKnown = true;
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_ID_Known(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, out serviceFulfilmentConfigKnown).ReturnsForAnyArgs(x =>
            {
                x[2] = serviceFulfilmentConfigKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool fileId_known = true;
            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, out fileId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = fileId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIInvoiceableItemId

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemId()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemId mockInvoiceableItemId = Substitute.For<IInvoiceableItemId>();

            mockInvoiceableItemId.invoiceableItemId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_InvoiceableItem_ID(mockCoreProject, mockInvoiceableItemId.invoiceableItemId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemId, typeof(IInvoiceableItemId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemId mockInvoiceableItemId = Substitute.For<IInvoiceableItemId>();

            mockInvoiceableItemId.invoiceableItemId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_InvoiceableItem_ID(mockCoreProject, mockInvoiceableItemId.invoiceableItemId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemId, typeof(IInvoiceableItemId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemId_IsValidInvoiceableItemIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemId mockInvoiceableItemId = Substitute.For<IInvoiceableItemId>();

            mockInvoiceableItemId.invoiceableItemId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_InvoiceableItem_ID(mockCoreProject, mockInvoiceableItemId.invoiceableItemId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceableItemId, typeof(IInvoiceableItemId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithINotificationID

        [TestMethod]
        public void Validation_IsValidWithINotificationID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationID mockNotificationID = Substitute.For<INotificationID>();

            mockNotificationID.notificationId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotificationID.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });
               

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationID, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationID_IsBelongingToOrg()
        {
            // ---------- Arrange-------------
            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationID mockNotificationID = Substitute.For<INotificationID>();

            mockNotificationID.notificationId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotificationID.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationID, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationID_IsValidNotificationID()
        {
            // ---------- Arrange-------------
            Validation Validation = new Validation();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationID mockNotificationID = Substitute.For<INotificationID>();

            mockNotificationID.notificationId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotificationID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotificationID.notificationId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotificationID, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithINotification

        [TestMethod]
        public void Validation_IsValidWithINotification()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotification, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotification, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsValidNotificationIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotification, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsValidNotificationMessageInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotification, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotification, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotification, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_NotificationStateUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.Unknown;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotification, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_NotificationTypeUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Unknown;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockNotification, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        
        #endregion

        #region IsValidWithIMoneyString

        [TestMethod]
        public void Validation_IsValidWithIMoneyString()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyString mockMoneyString = Substitute.For<IMoneyString>();

            mockMoneyString.moneyString = "Monney String";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMoneyString, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMoneyString, typeof(IMoneyString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMoneyString_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyString mockMoneyString = Substitute.For<IMoneyString>();

            mockMoneyString.moneyString = "Monney String";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockMoneyString, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockMoneyString, typeof(IMoneyString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIUserLanguageID

        [TestMethod]
        public void Validation_IsValidWithIUserLanguageID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserLanguageID mockUserLanguageID = Substitute.For<IUserLanguageID>();

            mockUserLanguageID.languageKey = ENUM_SYS_LanguageKey.English;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockUserLanguageID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockUserLanguageID, typeof(IUserLanguageID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIUserLanguageID_LanguageKeyUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserLanguageID mockUserLanguageID = Substitute.For<IUserLanguageID>();

            mockUserLanguageID.languageKey = ENUM_SYS_LanguageKey.Unknown;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockUserLanguageID, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockUserLanguageID, typeof(IUserLanguageID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIdOB

        [TestMethod]
        public void Validation_IsValidWithIdOB()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IdOB mockdOB = Substitute.For<IdOB>();

            mockdOB.dateOfBirth = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockdOB, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockdOB.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockdOB, typeof(IdOB));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIdOB_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IdOB mockdOB = Substitute.For<IdOB>();

            mockdOB.dateOfBirth = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockdOB, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockdOB.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockdOB, typeof(IdOB));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIdOB_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IdOB mockdOB = Substitute.For<IdOB>();

            mockdOB.dateOfBirth = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockdOB, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockdOB.dateOfBirth).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockdOB, typeof(IdOB));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRadiusInMeters

        [TestMethod]
        public void Validation_IsValidWithIRadiusInMeters()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRadiusInMeters mockRadiusInMeters = Substitute.For<IRadiusInMeters>();

            mockRadiusInMeters.radiusInMeters = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRadiusInMeters, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockRadiusInMeters.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRadiusInMeters, typeof(IRadiusInMeters));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRadiusInMeters_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRadiusInMeters mockRadiusInMeters = Substitute.For<IRadiusInMeters>();

            mockRadiusInMeters.radiusInMeters = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRadiusInMeters, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Radius(mockRadiusInMeters.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRadiusInMeters, typeof(IRadiusInMeters));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRadiusInMeters_IsValidRadiusInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRadiusInMeters mockRadiusInMeters = Substitute.For<IRadiusInMeters>();

            mockRadiusInMeters.radiusInMeters = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockRadiusInMeters, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockRadiusInMeters.radiusInMeters).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRadiusInMeters, typeof(IRadiusInMeters));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPageRequest

        [TestMethod]
        public void Validation_IsValidWithIPageRequest()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPageRequest, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_PageRequest(mockPageRequest).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPageRequest, typeof(IPageRequest));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPageRequest_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPageRequest, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_PageRequest(mockPageRequest).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPageRequest, typeof(IPageRequest));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPageRequest_IsValidPageRequestInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockPageRequest, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_PageRequest(mockPageRequest).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockPageRequest, typeof(IPageRequest));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrgOptions

        /// <summary>
        /// Need to add validation rules for few inherit interface
        /// </summary>
        [TestMethod]
        public void Validation_IsValidWithIOrgOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.name = "Name";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.name = "Name";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.name = "Name";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.name = "Name";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.name = "Name";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.name = "Name";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockOrgOptions.name).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.name = "Name";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.name = "Name";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockOrgOptions.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockOrgOptions.name).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIProductOptions

        [TestMethod]
        public void Validation_IsValidWithIProductOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";

            
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

       

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------
            
            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsValidString_ProductNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

       

        #endregion

        #region IsValidWithIServiceOrderOptions

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;
            
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIInvoiceOptions

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";

            
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceOrderCompleteList

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderCompleteList()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderCompleteList mockServiceOrderCompleteList = Substitute.For<IServiceOrderCompleteList>();

            List<IServiceOrderComplete> mockListServiceOrderComplete = Substitute.For<List<IServiceOrderComplete>>();
            IServiceOrderComplete mockServiceOrderComplete = Substitute.For<IServiceOrderComplete>();

            mockServiceOrderComplete.appointmentId = 1;
            mockServiceOrderComplete.appointmentTitle = "Title";
            mockServiceOrderComplete.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockServiceOrderComplete.contactId = 1;
            mockServiceOrderComplete.creatorId = 1;
            mockServiceOrderComplete.customerEmail = "xyz@gmail.com";
            mockServiceOrderComplete.customerFullName = "Joh Smith";
            mockServiceOrderComplete.durationMilliseconds = 60000;
            mockServiceOrderComplete.end = "2017-01-13T10:08:59.0000000Z";
            mockServiceOrderComplete.start = "2017-01-13T10:07:59.0000000Z";
            mockServiceOrderComplete.monetaryAmount = 1;
            mockServiceOrderComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderComplete.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockServiceOrderComplete.orgId = 1;
            mockServiceOrderComplete.performedByResourceId = 1;
            mockServiceOrderComplete.requireResourceByResourceId = 1;
            mockServiceOrderComplete.serviceId = 1;
            mockServiceOrderComplete.serviceOrderId = 1;
            mockServiceOrderComplete.timeZoneIANA = "America/Boise";

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            mockServiceOrderComplete.timeScaleList = mockListITSO;

            //mockServiceOrderComplete.timeScaleList = 1;
            mockListServiceOrderComplete.Add(mockServiceOrderComplete);

            mockServiceOrderCompleteList.serviceOrderList = mockListServiceOrderComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderCompleteList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderComplete, typeof(IServiceOrderComplete)).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderCompleteList, typeof(IServiceOrderCompleteList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderCompleteList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderCompleteList mockServiceOrderCompleteList = Substitute.For<IServiceOrderCompleteList>();

            List<IServiceOrderComplete> mockListServiceOrderComplete = Substitute.For<List<IServiceOrderComplete>>();
            IServiceOrderComplete mockServiceOrderComplete = Substitute.For<IServiceOrderComplete>();

            mockServiceOrderComplete.appointmentId = 1;
            mockServiceOrderComplete.appointmentTitle = "Title";
            mockServiceOrderComplete.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockServiceOrderComplete.contactId = 1;
            mockServiceOrderComplete.creatorId = 1;
            mockServiceOrderComplete.customerEmail = "xyz@gmail.com";
            mockServiceOrderComplete.customerFullName = "Joh Smith";
            mockServiceOrderComplete.durationMilliseconds = 60000;
            mockServiceOrderComplete.end = "2017-01-13T10:08:59.0000000Z";
            mockServiceOrderComplete.start = "2017-01-13T10:07:59.0000000Z";
            mockServiceOrderComplete.monetaryAmount = 1;
            mockServiceOrderComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderComplete.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockServiceOrderComplete.orgId = 1;
            mockServiceOrderComplete.performedByResourceId = 1;
            mockServiceOrderComplete.requireResourceByResourceId = 1;
            mockServiceOrderComplete.serviceId = 1;
            mockServiceOrderComplete.serviceOrderId = 1;
            mockServiceOrderComplete.timeZoneIANA = "America/Boise";

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            mockServiceOrderComplete.timeScaleList = mockListITSO;

            //mockServiceOrderComplete.timeScaleList = 1;
            mockListServiceOrderComplete.Add(mockServiceOrderComplete);

            mockServiceOrderCompleteList.serviceOrderList = mockListServiceOrderComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderCompleteList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderComplete, typeof(IServiceOrderComplete)).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderCompleteList, typeof(IServiceOrderCompleteList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderCompleteList_IsValidInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderCompleteList mockServiceOrderCompleteList = Substitute.For<IServiceOrderCompleteList>();

            List<IServiceOrderComplete> mockListServiceOrderComplete = Substitute.For<List<IServiceOrderComplete>>();
            IServiceOrderComplete mockServiceOrderComplete = Substitute.For<IServiceOrderComplete>();

            mockServiceOrderComplete.appointmentId = 1;
            mockServiceOrderComplete.appointmentTitle = "Title";
            mockServiceOrderComplete.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockServiceOrderComplete.contactId = 1;
            mockServiceOrderComplete.creatorId = 1;
            mockServiceOrderComplete.customerEmail = "xyz@gmail.com";
            mockServiceOrderComplete.customerFullName = "Joh Smith";
            mockServiceOrderComplete.durationMilliseconds = 60000;
            mockServiceOrderComplete.end = "2017-01-13T10:08:59.0000000Z";
            mockServiceOrderComplete.start = "2017-01-13T10:07:59.0000000Z";
            mockServiceOrderComplete.monetaryAmount = 1;
            mockServiceOrderComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderComplete.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockServiceOrderComplete.orgId = 1;
            mockServiceOrderComplete.performedByResourceId = 1;
            mockServiceOrderComplete.requireResourceByResourceId = 1;
            mockServiceOrderComplete.serviceId = 1;
            mockServiceOrderComplete.serviceOrderId = 1;
            mockServiceOrderComplete.timeZoneIANA = "America/Boise";

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            mockServiceOrderComplete.timeScaleList = mockListITSO;

            //mockServiceOrderComplete.timeScaleList = 1;
            mockListServiceOrderComplete.Add(mockServiceOrderComplete);

            mockServiceOrderCompleteList.serviceOrderList = mockListServiceOrderComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderCompleteList, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderComplete.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderComplete, typeof(IServiceOrderComplete)).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockServiceOrderCompleteList, typeof(IServiceOrderCompleteList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcOrgAddressUserId

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();



            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();



            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();



            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();



            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId_IsValidAddressIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();



            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDCCreateNotification

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });
            

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });
            

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });
            
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

          
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_IsValidNotificationMessageInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_IsValidUserID_UserIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb).Returns(x =>
            {
                return false;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_NotificationStateUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            mockDCCreateNotification.notificationMessage = "Empty";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Unknown;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_NotificationTypeUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            mockDCCreateNotification.notificationMessage = "Empty";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Unknown;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_CmdUserIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            mockDCCreateNotification.notificationMessage = "Empty";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb).Returns(x =>
            {
                return true;
            });

           
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDCCreateOrgResource

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
               {
                   return true;
               });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidBookingOverlapInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidDailyUserSlotLimitInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidMsDuration_MaxExceptionDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidFutureDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidResourceNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidSlotDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidTimeAllocationTypeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_TimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 221;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 1;
            mockDCCreateOrgResource.maxDailyUserSlots = 1;
            mockDCCreateOrgResource.resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resporce";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.Unknown;
            mockDCCreateOrgResource.timeZoneIANA = "America/Boise";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCCreateOrgResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDCUpdateResource

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidBookingOverlapInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidDailyUserSlotLimitInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidMsDuration_MaxExceptionDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidFutureDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidResourceNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidSlotDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidTimeAllocationTypeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateContact

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidContactTypeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidUserTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidString_ContactFirstNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidString_ContactLastNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidString_OrgNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";
            mockDcCreateContact.orgName = "ABC company";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIDcUpdateOrgContact

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";
            mockDcUpdateOrgContact.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgContact.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidContactTypeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidUserTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidString_ContactFirstNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidString_ContactLastNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidString_OrgNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";
            mockDcUpdateOrgContact.orgName = "ABC company";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateProduct

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidMoneyValueInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 1;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIDcUpdateOrgProduct

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidString_SystemProductCodeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidProductIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_PurchasePriceMonetaryAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_PurchasePriceMonetaryCurrencyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_SalesPriceMonetaryCurrencyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 1;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_SalesPriceMonetaryCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_SystemProductCodeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_ProductNameInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_ProductIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "abc";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateOrgServiceOrder

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_OrgIdZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 0;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_MonetaryAmountMonetaryCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = -2;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_AppointmentIdZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 0;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        
        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_MonetaryCurrencyUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 0;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_OrderStateUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 0;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.Unknown;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;

            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        
        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_PerformedByResourceIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 0;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.RejectedOrder;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 0;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_RequireResourceByResourceIdZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 0;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.RejectedOrder;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 0;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return false;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateOrgServiceOrder

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        
        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_MonetaryCurrencyUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            mockDcUpdateOrgServiceOrder.monetaryAmount = 0;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            
            



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

           
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_OrderStateUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            mockDcUpdateOrgServiceOrder.monetaryAmount = 0;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.Unknown;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;

            
            

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_PerformedByResourceIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            mockDcUpdateOrgServiceOrder.monetaryAmount = 0;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.RejectedOrder;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 0;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            
            


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        
        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            
            
            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            
            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(tr).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });
            
            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

           
            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidServiceFulfilmentConfigIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

    
        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_MonetaryAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = 0;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_ServiceFulfilmentResourceConfigRelationshipInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_ServiceFulfilmentResourceConfigRequiredOptionalInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.RequiredByService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateInvoiceableItem

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();


            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });
            
            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();


            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();


            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();


            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();


            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();


            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidProductIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();


            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockCoreSc.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreatePayment

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        
        #endregion

        #region IsValidWithIDcCreateTempPaypal

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_GuidStr(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_IsValidGuidStrInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        
        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_CmdUserIdInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 0;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_PaypalKeyInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = string.Empty;
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_GuidStr(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateOrgServiceFulfilmentConfig

        /// <summary>
        /// Need to add validation rules for few inherit interface
        /// </summary>
        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateOrgServiceFulfilmentConfig

        /// <summary>
        /// Need to add validation rules for few inherit interface
        /// </summary>
        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceFulfilmentConfigId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


       
        #endregion

        #region IsValidWithIDcCreateService

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidDescriptionStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidServiceCostInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateOrgService

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgService.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgService.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidDescriptionStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidServiceCostInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateInvoice

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateOrgAddress

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_Address1Invalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_Address2Invalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_AttentionInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_CityInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_TownInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_ZipcodeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidCountryLocationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_CmdUserIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = 0;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 1;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_CreatorIdZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = 1;
            mockDcCreateOrgAddress.creatorId = 0;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 1;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_AddressTypeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = 1;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.Unknown;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 1;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsActiveInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = 1;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.UserAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Unknown;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 1;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcDateLatLng

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidRadiusInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        
        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = string.Empty;
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = string.Empty;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateAppointment

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
           

            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidOrgIDInvalidInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return false;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        
        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_UpdateAppointmentTypeInvalid()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();



            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Unknown;

            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        /// <summary>
        /// This condition may be need to apply for all enum in is_valid function.
        ///  (updateAppointmentType == 0 ) This condition become true when we not set UpdateAppointmentType.
        /// </summary>
        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_UpdateAppointmentTypeNotSet()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();

            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            //mockDcUpdateAppointment.updateAppointmentType = ENUM_Update_AppointmentType.Update_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockCoreSc.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockCoreSc, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockCoreSc.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockCoreSc.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).ReturnsForAnyArgs(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb).Returns(x =>
            {
                return true;
            });

            mockCoreSc.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb).Returns(x =>
            {
                return true;
            });
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion


        #endregion

        #region WithinSubscription

        [TestMethod]
        public void Validation_WithinSubscription()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            //ICoreProject coreProject,  scSysSystem,  scOrg,  scOrgServiceOrder, IDatabaseOperations_System dbs, IDatabaseOperations_Organisation dbo, 
            //IUtils utils, IDatabaseOperations_Validation dbValid, IValidation Validation, object objectUnderValidation, Type objectType
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org mockSCOrg = Substitute.For<ISC_Org>();
            ISC_Org_ServiceOrder mockSCOrgServiceOrder = Substitute.For<ISC_Org_ServiceOrder>();
            IValidation mockValid = Substitute.For<IValidation>();

            
            IUtils mockUtils = Substitute.For<IUtils>();
            
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();


            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool orgId_known = true;
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).ReturnsForAnyArgs(x =>
            {
                x[2] = orgId_known;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            DC_Org_Create_Member dCOrgCreateMember = new DC_Org_Create_Member(mockCoreProject);

            IDcrStringList mockDcrStringList = Substitute.For<IDcrStringList>();
            List<string> mockListString = Substitute.For<List<string>>();
            string mockString = "test";

            mockCoreSc.Org_Read_App_GUID(mockDcOrgId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockListString.Add(mockString);
                 mockDcrStringList.StringList = mockListString;
                 mockDcrStringList.func_msg = ServiceResponse.status_ok;
                 mockDcrStringList.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrStringList;
             });


            IDcrUserList mockDcrUserList = Substitute.For<IDcrUserList>();
            mockCoreSc.Read_All_Org_Members_By_Org_ID(mockDcOrgId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                  {
                      mockDcrUserList.func_msg = ServiceResponse.status_ok;
                      mockDcrUserList.func_status = ENUM_Cmd_Status.ok;
                      return mockDcrUserList;
                  });

            bool returnValue = Validation.WithinSubscription(mockCoreProject, mockUtils, mockCoreDb, mockCoreSc, mockValid, dCOrgCreateMember, typeof(DC_Org_Create_Member));
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_CountryLocation

        [TestMethod]
        public void Validation_IsValidCountryLocation()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            Enum_SYS_Country_Location countryLocation = Enum_SYS_Country_Location.USA;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_CountryLocation(countryLocation);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCountryLocationWithCountryLocationUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            Enum_SYS_Country_Location countryLocation = Enum_SYS_Country_Location.Unknown;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_CountryLocation(countryLocation);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Service_Relationship

        [TestMethod]
        public void Validation_IsValidServiceRelationship()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ENUM_SYS_ServiceResource_Relationship applyTo = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Service_Relationship(applyTo);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceRelationshipWithCountryLocationUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            ENUM_SYS_ServiceResource_Relationship applyTo = ENUM_SYS_ServiceResource_Relationship.Unknown;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Service_Relationship(applyTo);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Latitude

        [TestMethod]
        public void Validation_IsValidLatitude()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            double latitudeToTest = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Latitude(latitudeToTest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Longitude

        [TestMethod]
        public void Validation_IsValidLongitude()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            double longitudeToTest = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Latitude(longitudeToTest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion'

        #region Is_Valid_Component_ID

        [TestMethod]
        public void Validation_IsValidComponentID()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int componentId = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_ID(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_TaxRate

        [TestMethod]
        public void Validation_IsValidTaxRate()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            decimal componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTaxRateWithComponentIdLessThanZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            decimal componentId = -1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTaxRateWithComponentIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            decimal componentId = 100000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_TaxRate

        [TestMethod]
        public void Validation_IsValidTaxRateByLongWithComponentId()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            long componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTaxRateByLongWithComponentIdLessThanZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            long componentId = -1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTaxRateByLongWithComponentIdWithComponentIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            long componentId = 100000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Price

        [TestMethod]
        public void Validation_IsValidPrice()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            long componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Price(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPriceWithComponentIdLessThanZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            long componentId = -1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Price(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPriceWithComponentIdInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            long componentId = 10000000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Price(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Service_Cost

        [TestMethod]
        public void Validation_IsValidServiceCost()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            decimal costAmount = 1;
            ENUM_SYS_CurrencyOption currencyValue = ENUM_SYS_CurrencyOption.USD;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            decimal newCurrcency = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.CONVERT_Currency(costAmount, currencyValue, GeneralConfig.DEFAULT_SYSTEM_CURRENCY, out newCurrcency).ReturnsForAnyArgs(x =>
            {
                x[3] = newCurrcency;
                return true;
            });

            bool returnValue = Validation.Is_Valid_Service_Cost(costAmount, currencyValue, mockCoreSc);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region CONVERT_Currency

        [TestMethod]
        public void Validation_CONVERTCurrency()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            decimal currencyAmount = 1;
            ENUM_SYS_CurrencyOption currency = ENUM_SYS_CurrencyOption.USD;
            ENUM_SYS_CurrencyOption outputCurrency = GeneralConfig.DEFAULT_SYSTEM_CURRENCY;
            // ---------- Arrange--------------

            //----------- Act -----------------

            decimal newCurrencyVal;
            bool returnValue = Validation.CONVERT_Currency(currencyAmount, currency, outputCurrency, out newCurrencyVal);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Calendar_Belonging_To_Organisation

        [TestMethod]
        public void Validation_IsCalendarBelongingToOrganisation()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Calendar_Belonging_To_Organisation(orgId, calendarId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_SearchRange

        [TestMethod]
        public void Validation_IsValidSearchRange()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            int rangeLimitInMeters = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_SearchRange(rangeLimitInMeters);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Future_Duration

        [TestMethod]
        public void Validation_IsValidFutureDuration()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long futureTimeInMs = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_Future_Duration(futureTimeInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFutureDurationWithFutureTimeInMsLessThanZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long futureTimeInMs = -1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_Future_Duration(futureTimeInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFutureDurationWithFutureTimeInInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            long futureTimeInMs = GeneralConfig.MAX_RESOURCE_FUTURE_TIME_MS + 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_Future_Duration(futureTimeInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_File_Name

        [TestMethod]
        public void Validation_IsValidFileName()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string fileNameStr = "Test string";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_String(fileNameStr).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_File_Name(fileNameStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileNameWithFileNameStrEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string fileNameStr = string.Empty;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Name(fileNameStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileNameWithFileNameStrNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string fileNameStr = null;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Name(fileNameStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileNameWithFileNameMorethan90Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string fileNameStr = "There are more than 90 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Name(fileNameStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_GuidStr

        [TestMethod]
        public void Validation_IsValidGuidStr()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_GuidStr(guidStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_File_Extension

        [TestMethod]
        public void Validation_IsValidFileExtension()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string fileExtStr = "txt";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreSc.Is_Valid_String(fileExtStr).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_File_Extension(fileExtStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileExtensionWithFileExtStrEmpty()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string fileExtStr = string.Empty;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_File_Extension(fileExtStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileExtensionWithFileExtStrNull()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string fileExtStr = null;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Extension(fileExtStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileExtensionWithFileExtStrMorethan4Char()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string fileExtStr = "There are more than 4 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Extension(fileExtStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_SHA256_String

        [TestMethod]
        public void Validation_IsValidSHA256String()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_SHA256_String(sha256);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidSHA256StringWithSHA256StringInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string sha256 = "ba";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_SHA256_String(sha256);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Address_ID

        [TestMethod]
        public void Validation_IsValidAddressID()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int addressId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool addressIsKnown = true;
            mockCoreDb.DB_Is_ID_Known(mockCoreProject, addressId, DB_Base.DBTable_Org_Address_Table, DB_Base.DBTable_Org_Address_Table_ID, out addressIsKnown).ReturnsForAnyArgs(x =>
            {
                x[4] = addressIsKnown;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Address_ID(mockCoreProject, addressId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAddressIDWithDBIsIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int addressId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            bool addressIsKnown = true;
            mockCoreDb.DB_Is_ID_Known(mockCoreProject, addressId, DB_Base.DBTable_Org_Address_Table, DB_Base.DBTable_Org_Address_Table_ID, out addressIsKnown).ReturnsForAnyArgs(x =>
            {
                x[4] = addressIsKnown;
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_Address_ID(mockCoreProject, addressId, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_CoreWebFile_String

        [TestMethod]
        public void Validation_IsValidCoreWebFileString()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string cwfileStr = "imgService";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_CoreWebFile_String(cwfileStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCoreWebFileStringWithCwfileStrInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            string cwfileStr = "img";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_CoreWebFile_String(cwfileStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Gender

        [TestMethod]
        public void Validation_IsValidGender()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ENUM_Gender gender = ENUM_Gender.female;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Gender(gender);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidGenderWithGenderUnknown()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            ENUM_Gender gender = ENUM_Gender.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Gender(gender);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_PageRequest

        [TestMethod]
        public void Validation_IsValidPageRequest()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_PageRequest(mockPageRequest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPageRequestWithPagingStartLessThanZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = -1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_PageRequest(mockPageRequest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPageRequestWithPagingStopLessThanZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = -1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_PageRequest(mockPageRequest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPageRequestWithpagingStopLessThanPagingStart()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 3;
            mockPageRequest.pagingStop = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_PageRequest(mockPageRequest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Radius

        [TestMethod]
        public void Validation_IsValidRadius()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int radius = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Radius(radius);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRadiusWithRadiusZero()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int radius = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Radius(radius);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRadiusWithRadiusInvalid()
        {
            // ---------- Arrange--------------

            Validation Validation = new Validation();

            int radius = 100000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Radius(radius);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Login

        [TestMethod]
        public void Validation_IsValidLogin()
        {
            // ---------- Arrange--------------
            Validation Validation = new Validation();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            


            string username = "abc@gmail.com";
            string password = "123";

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_Login(mockCoreProject, username, password, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion
    }
}