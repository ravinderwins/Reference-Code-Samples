using Core.DatabaseOps;
using Core.DataContracts.Responses;
using Core.SYS_Classes;
using Core.SYS_Enums;
using Core.SYS_Interfaces;
using CoreInterfaces;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NodaTime.Text;
using NSubstitute;
using SCImplementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MockTests
{
    [TestClass]
    public class UT_SC_Org_Appointments
    {
        #region Create_Org_Appointment
        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointment()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
           {
               return true;
           });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.calendarId = 1;
                return mockDcrCalendar;
            });



            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockTSO.appointmentId = 1;
                   mockListTSO.Add(mockTSO);
                   mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                   mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                   mockDcrTsoList.timeScaleList = mockListTSO;
                   return mockDcrTsoList;
               });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 listOfCalResMapIDs.Add(CalResMapID);
                 mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                 return mockDcrIdListCalResMap;
             });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockTSORes.appointmentId = 1;
                mockListTSORes.Add(mockTSO);
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.timeScaleList = mockListTSO;
                return mockDcrTsoListRes;
            });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrResource.func_msg = ServiceResponse.status_ok;
              mockDcrResource.func_status = ENUM_Cmd_Status.ok;
              return mockDcrResource;
          });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();

            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
            
            {
                 mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                 mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                 return mockDCRBaseCheckList;
             });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
               mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateTimePeriod;
           });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedResMap;
          });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });



            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
            {
                listOfCalResMapIDs.Add(CalResMapID);
                mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                return mockDcrIdListCalResMap;
            });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();




            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return false;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithReadOrgCalendarByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_unknown;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithReadAppointmentOptionsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });




            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();

            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedResMap;
          });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithReadAllOrgCalendarResourceMappingsByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();




            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });




            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.Unknown;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_unknown;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>

            {
                mockTSORes.appointmentId = 1;
                mockListTSORes.Add(mockTSO);
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.timeScaleList = mockListTSO;
                return mockDcrTsoListRes;
            });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithReadTimePeriodsForResourceBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });




            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_unknown;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithReadResourceByIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });




            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_unknown;
                   mockDcrResource.func_status = ENUM_Cmd_Status.Unknown;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });




            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_FAIL;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithCreateTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });



            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_unknown;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithCreateRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });



            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_unknown;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithCreateOrgAppointmentCalendarMappingFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });



            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_unknown;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.Unknown;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithCreateOrgAppointmentRepeatMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });



            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).Returns(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_unknown;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithResourceIdListNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResIds = 1;
            listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });



            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();

            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithCheckDailyMaxNotExceededFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResIds = 1;
            listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();



            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });



            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockTSO.appointmentId = 1;
              mockListTSO.Add(mockTSO);
              mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
              mockDcrTsoList.func_msg = ServiceResponse.status_ok;
              mockDcrTsoList.timeScaleList = mockListTSO;
              return mockDcrTsoList;
          });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.Unknown;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_unknown;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            //ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            //listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateAppointment mockDcCreateAppointment = Substitute.For<IDcCreateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResIds = 1;
            listOfResIds.Add(ResIds);


            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateAppointment.timeZoneIANA = "America/Boise";

            //List<IRepeatOptions>
            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            RepeatOptions.start = mockDcCreateAppointment.start;
            RepeatOptions.end = mockDcCreateAppointment.end;
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcCreateAppointment.repeatRuleOptions = listOfRepeatOptions;

            mockDcCreateAppointment.calendarIdList = listOfCalIds;
            mockDcCreateAppointment.resourceIdList = listOfResIds;
            mockDcCreateAppointment.coreProj = mockCoreProj;
            mockDcCreateAppointment.cmd_user_id = 1;
            mockDcCreateAppointment.orgId = 43242;
            mockDcCreateAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCreateAppointment, typeof(IDcCreateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCreateAppointment.cmd_user_id, mockDcCreateAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointment).Returns(x =>
                {
                    return true;
                });
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcCreateAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateAppointment.repeatRuleOptions[0], mockDcCreateAppointment.timeZoneIANA, true,  mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();




            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                   mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                   mockDcrCalendar.calendarId = 1;
                   return mockDcrCalendar;
               });



            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockListTSORes.Add(mockTSO);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSO;
                 return mockDcrTsoListRes;
             });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcCreateAppointment.coreProj, mockCoreSc, mockListTSORes, 10, mockDcCreateAppointment.creatorId, 1, mockValid, listofIInstantStartStop, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
               mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
               return mockDCRBaseCheckList;
           });

            List<ITSO> listofITSOTimePeriods = Substitute.For<List<ITSO>>();
            ITSO ITSOTimePeriods = Substitute.For<ITSO>();
            listofITSOTimePeriods.Add(ITSOTimePeriods);

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(listofITSOTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofITSOTimePeriods;
            });

            int out_new_appointment_id;
            mockCoreDb.Create_Appointment(mockDcCreateAppointment.coreProj, mockDcCreateAppointment, out out_new_appointment_id).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });

            IDCR_Added mockIDCRAddedResMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockIDCRAddedResMap.func_msg = ServiceResponse.status_ok;
               mockIDCRAddedResMap.func_status = ENUM_Cmd_Status.ok;
               return mockIDCRAddedResMap;
           });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                   mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                   return mockDCRAddedCreateRep;
               });

            IDCR_Added mockIDCRAddedCalMap = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockIDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
              mockIDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
              return mockIDCRAddedCalMap;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
                 mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
                 return mockDCRAddedCreateAppRes;
             });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment(mockDcCreateAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgResourceId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockDcCreateRepeat, mockDcMapRepeatAppointment, mockDcOrgAppointmentId, mockDcRepeatId, mockDcTsoId, mockDcTsos, mockDcOrgId, mockDcCalendarId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }


        #endregion

        #region Read_Appointment_Count_For_User_ID
        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentCountForUserID()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgMemberId mockDcOrgMemberId = Substitute.For<IDcOrgMemberId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgMemberId.coreProj = mockCoreProj;
            mockDcOrgMemberId.cmd_user_id = 1;
            mockDcOrgMemberId.userId = 1;
            mockDcOrgMemberId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgMemberId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgMemberId, typeof(IDcOrgMemberId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgMemberId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgMemberId.cmd_user_id, mockDcOrgMemberId.orgId, ENUM_Core_Function.CF_readAppointmentCountByUserId).Returns(x =>
                {
                    return true;
                });

            int appointmentCount;
            mockCoreDb.Read_Appointment_Count_For_User_ID(mockDcOrgMemberId.coreProj, mockDcOrgMemberId.userId, out appointmentCount).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrInt IDcrInt = scOrgAppointments.Read_Appointment_Count_For_User_ID(mockDcOrgMemberId, mockUtils, mockValid, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(1, IDcrInt.numberVal);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrInt.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrInt.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentCountForUserIDWithInvalidParameter()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();
            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgMemberId mockDcOrgMemberId = Substitute.For<IDcOrgMemberId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgMemberId.coreProj = mockCoreProj;
            mockDcOrgMemberId.cmd_user_id = 1;
            mockDcOrgMemberId.userId = 1;
            mockDcOrgMemberId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgMemberId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgMemberId, typeof(IDcOrgMemberId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgMemberId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgMemberId.cmd_user_id, mockDcOrgMemberId.orgId, ENUM_Core_Function.CF_readAppointmentCountByUserId).Returns(x =>
                {
                    return true;
                });

            int appointmentCount;
            mockCoreDb.Read_Appointment_Count_For_User_ID(mockDcOrgMemberId.coreProj, mockDcOrgMemberId.userId, out appointmentCount).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrInt IDcrInt = scOrgAppointments.Read_Appointment_Count_For_User_ID(mockDcOrgMemberId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrInt.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrInt.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentCountForUserIDWithPermissionDenied()
        {
            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgMemberId mockDcOrgMemberId = Substitute.For<IDcOrgMemberId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgMemberId.coreProj = mockCoreProj;
            mockDcOrgMemberId.cmd_user_id = 1;
            mockDcOrgMemberId.userId = 1;
            mockDcOrgMemberId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgMemberId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgMemberId, typeof(IDcOrgMemberId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgMemberId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgMemberId.cmd_user_id, mockDcOrgMemberId.orgId, ENUM_Core_Function.CF_readAppointmentCountByUserId).Returns(x =>
                {
                    return false;
                });

            int appointmentCount;
            mockCoreDb.Read_Appointment_Count_For_User_ID(mockDcOrgMemberId.coreProj, mockDcOrgMemberId.userId, out appointmentCount).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrInt IDcrInt = scOrgAppointments.Read_Appointment_Count_For_User_ID(mockDcOrgMemberId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrInt.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrInt.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentCountForUserIDWithServerError()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgMemberId mockDcOrgMemberId = Substitute.For<IDcOrgMemberId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgMemberId.coreProj = mockCoreProj;
            mockDcOrgMemberId.cmd_user_id = 1;
            mockDcOrgMemberId.userId = 1;
            mockDcOrgMemberId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgMemberId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgMemberId, typeof(IDcOrgMemberId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgMemberId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgMemberId.cmd_user_id, mockDcOrgMemberId.orgId, ENUM_Core_Function.CF_readAppointmentCountByUserId).Returns(x =>
                {
                    return true;
                });

            int appointmentCount;
            mockCoreDb.Read_Appointment_Count_For_User_ID(mockDcOrgMemberId.coreProj, mockDcOrgMemberId.userId, out appointmentCount).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrInt IDcrInt = scOrgAppointments.Read_Appointment_Count_For_User_ID(mockDcOrgMemberId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------


            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrInt.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrInt.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region Read_Appointment_Count_For_Service_ID

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentCountForServiceID()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgServiceId mockDcOrgServiceId = Substitute.For<IDcOrgServiceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgServiceId.coreProj = mockCoreProj;
            mockDcOrgServiceId.cmd_user_id = 1;
            mockDcOrgServiceId.orgId = 43242;
            mockDcOrgServiceId.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgServiceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgServiceId, typeof(IDcServiceId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgServiceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgServiceId.cmd_user_id, mockDcOrgServiceId.orgId, ENUM_Core_Function.CF_readAppointmentCountByServiceId).Returns(x =>
                {
                    return true;
                });

            int appointmentCount;
            mockCoreDb.Read_Appointment_Count_For_Service_ID(mockDcOrgServiceId.coreProj, mockDcOrgServiceId.serviceId, out appointmentCount).Returns(x =>
             {
                 x[2] = 1;
                 return ENUM_DB_Status.DB_SUCCESS;
             });


            IDcrInt IDcrInt = scOrgAppointments.Read_Appointment_Count_For_Service_ID(mockDcOrgServiceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(1, IDcrInt.numberVal);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrInt.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrInt.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentCountForServiceIDWithInvalidParameter()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgServiceId mockDcOrgServiceId = Substitute.For<IDcOrgServiceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgServiceId.coreProj = mockCoreProj;
            mockDcOrgServiceId.cmd_user_id = 1;
            mockDcOrgServiceId.orgId = 43242;
            mockDcOrgServiceId.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgServiceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgServiceId, typeof(IDcServiceId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgServiceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgServiceId.cmd_user_id, mockDcOrgServiceId.orgId, ENUM_Core_Function.CF_readAppointmentCountByServiceId).Returns(x =>
                {
                    return true;
                });

            int appointmentCount;
            mockCoreDb.Read_Appointment_Count_For_Service_ID(mockDcOrgServiceId.coreProj, mockDcOrgServiceId.serviceId, out appointmentCount).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrInt IDcrInt = scOrgAppointments.Read_Appointment_Count_For_Service_ID(mockDcOrgServiceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrInt.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrInt.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentCountForServiceIDWithPermissionDenied()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgServiceId mockDcOrgServiceId = Substitute.For<IDcOrgServiceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgServiceId.coreProj = mockCoreProj;
            mockDcOrgServiceId.cmd_user_id = 1;
            mockDcOrgServiceId.orgId = 43242;
            mockDcOrgServiceId.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgServiceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgServiceId, typeof(IDcServiceId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgServiceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgServiceId.cmd_user_id, mockDcOrgServiceId.orgId, ENUM_Core_Function.CF_readAppointmentCountByServiceId).Returns(x =>
                {
                    return false;
                });

            int appointmentCount;
            mockCoreDb.Read_Appointment_Count_For_Service_ID(mockDcOrgServiceId.coreProj, mockDcOrgServiceId.serviceId, out appointmentCount).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrInt IDcrInt = scOrgAppointments.Read_Appointment_Count_For_Service_ID(mockDcOrgServiceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrInt.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrInt.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentCountForServiceIDWithServerError()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgServiceId mockDcOrgServiceId = Substitute.For<IDcOrgServiceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgServiceId.coreProj = mockCoreProj;
            mockDcOrgServiceId.cmd_user_id = 1;
            mockDcOrgServiceId.orgId = 43242;
            mockDcOrgServiceId.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgServiceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgServiceId, typeof(IDcServiceId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgServiceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgServiceId.cmd_user_id, mockDcOrgServiceId.orgId, ENUM_Core_Function.CF_readAppointmentCountByServiceId).Returns(x =>
                {
                    return true;
                });

            int appointmentCount;
            mockCoreDb.Read_Appointment_Count_For_Service_ID(mockDcOrgServiceId.coreProj, mockDcOrgServiceId.serviceId, out appointmentCount).Returns(x =>
            {
                x[2] = 1;
                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrInt IDcrInt = scOrgAppointments.Read_Appointment_Count_For_Service_ID(mockDcOrgServiceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrInt.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrInt.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_All_Org_Resource_Appointment_Mappings_By_Resource_ID

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgResourceAppointmentMappingsByResourceID()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;
            mockDcOrgResourceId.resourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return true;
             });


            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_readAllOrgResourceAppointmentMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfResourceIds = Substitute.For<List<int>>();
            int ResourceId;
            mockCoreDb.Read_Resource_Appointment_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, out listOfResourceIds).ReturnsForAnyArgs(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                x[2] = listOfResourceIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Resource_Appointment_Mappings_By_Resource_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);



            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(1, IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgResourceAppointmentMappingsByResourceIDWithInvalidParameter()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;
            mockDcOrgResourceId.resourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
              {
                  return false;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_readAllOrgResourceAppointmentMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfResourceIds = Substitute.For<List<int>>();
            int ResourceId;
            mockCoreDb.Read_Resource_Appointment_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, out listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                x[2] = listOfResourceIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Resource_Appointment_Mappings_By_Resource_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgResourceAppointmentMappingsByResourceIDWithPermissionDenied()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;
            mockDcOrgResourceId.resourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_readAllOrgResourceAppointmentMappingsByResourceID).Returns(x =>
                {
                    return false;
                });

            List<int> listOfResourceIds = Substitute.For<List<int>>();
            int ResourceId;
            mockCoreDb.Read_Resource_Appointment_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, out listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                x[2] = listOfResourceIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Resource_Appointment_Mappings_By_Resource_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgResourceAppointmentMappingsByResourceIDWithServerError()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;
            mockDcOrgResourceId.resourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_readAllOrgResourceAppointmentMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfResourceIds = Substitute.For<List<int>>();
            int ResourceId;
            mockCoreDb.Read_Resource_Appointment_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, out listOfResourceIds).ReturnsForAnyArgs(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                x[2] = listOfResourceIds;
                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Resource_Appointment_Mappings_By_Resource_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentResourceMappingsByAppointmentID()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfResourceIds = Substitute.For<List<int>>();
            int ResourceId;
            mockCoreDb.Read_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out listOfResourceIds).ReturnsForAnyArgs(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                x[2] = listOfResourceIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(1, IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentResourceMappingsByAppointmentIDWithInvalidParameter()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
               {
                   return false;
               });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfResourceIds = Substitute.For<List<int>>();
            int ResourceId;
            mockCoreDb.Read_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                x[2] = listOfResourceIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentResourceMappingsByAppointmentIDWithPermissionDenied()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return false;
                });

            List<int> listOfResourceIds = Substitute.For<List<int>>();
            int ResourceId;

            mockCoreDb.Read_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                x[2] = listOfResourceIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentResourceMappingsByAppointmentIDWithServerError()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
                {
                    return true;
                });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfResourceIds = Substitute.For<List<int>>();
            int ResourceId;
            mockCoreDb.Read_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out listOfResourceIds).ReturnsForAnyArgs(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                x[2] = listOfResourceIds;
                return ENUM_DB_Status.DB_FAIL;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentCalendarMappingsByAppointmentID()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentCalendarMAppingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfCalendarIds = Substitute.For<List<int>>();
            int CalendarId;
            mockCoreDb.Read_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out listOfCalendarIds).ReturnsForAnyArgs(x =>
            {
                CalendarId = 1;
                listOfCalendarIds.Add(CalendarId);
                x[2] = listOfCalendarIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(1, IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentCalendarMappingsByAppointmentIDWithInvalidParameter()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentCalendarMAppingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfCalendarIds = Substitute.For<List<int>>();
            int CalendarId;
            mockCoreDb.Read_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out listOfCalendarIds).Returns(x =>
            {
                CalendarId = 1;
                listOfCalendarIds.Add(CalendarId);
                x[2] = listOfCalendarIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentCalendarMappingsByAppointmentIDWithPermissionDenied()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentCalendarMAppingsByAppointmentID).Returns(x =>
                {
                    return false;
                });

            List<int> listOfCalendarIds = Substitute.For<List<int>>();
            int CalendarId;
            mockCoreDb.Read_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out listOfCalendarIds).Returns(x =>
            {
                CalendarId = 1;
                listOfCalendarIds.Add(CalendarId);
                x[2] = listOfCalendarIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentCalendarMappingsByAppointmentIDWithServerError()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentCalendarMAppingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfCalendarIds = Substitute.For<List<int>>();
            int CalendarId;
            mockCoreDb.Read_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out listOfCalendarIds).ReturnsForAnyArgs(x =>
            {
                CalendarId = 1;
                listOfCalendarIds.Add(CalendarId);
                x[2] = listOfCalendarIds;
                return ENUM_DB_Status.DB_FAIL;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_All_Org_Appointment_TSoIds_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentTSoIdsByAppointmentID()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentTSOIdsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> tsoIdList = Substitute.For<List<int>>();
            int tsoId;
            mockCoreDb.Read_All_Appointment_TSos(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId, out tsoIdList).ReturnsForAnyArgs(x =>
            {
                tsoId = 1;
                tsoIdList.Add(tsoId);
                x[2] = tsoIdList;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(1, IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentTSoIdsByAppointmentIDWithInvalidParameter()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentTSOIdsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> tsoIdList = Substitute.For<List<int>>();
            int tsoId;
            mockCoreDb.Read_All_Appointment_TSos(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId, out tsoIdList).Returns(x =>
            {
                tsoId = 1;
                tsoIdList.Add(tsoId);
                x[2] = tsoIdList;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentTSoIdsByAppointmentIDWithPermissionDenied()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentTSOIdsByAppointmentID).Returns(x =>
                {
                    return false;
                });

            List<int> tsoIdList = Substitute.For<List<int>>();
            int tsoId;
            mockCoreDb.Read_All_Appointment_TSos(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId, out tsoIdList).Returns(x =>
            {
                tsoId = 1;
                tsoIdList.Add(tsoId);
                x[2] = tsoIdList;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentTSoIdsByAppointmentIDWithServerError()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentTSOIdsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            List<int> tsoIdList = Substitute.For<List<int>>();
            int tsoId;
            mockCoreDb.Read_All_Appointment_TSos(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId, out tsoIdList).ReturnsForAnyArgs(x =>
            {
                tsoId = 1;
                tsoIdList.Add(tsoId);
                x[2] = tsoIdList;
                return ENUM_DB_Status.DB_FAIL;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_Appointment_By_Appointment_ID 
        // Query in this function
        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentOptionsByAppointmentID()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readOrgAppointmentOptionsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IAppointment mockAppointment = Substitute.For<IAppointment>();
            mockAppointment.appointmentId = 1;
            mockAppointment.creatorId = 2;
            mockAppointment.appointmentTitle = "Demo test";
            mockAppointment.timeZoneIANA = DateTime.Now.ToString();
            mockAppointment.durationMilliseconds = DateTime.Now.Second;
            mockAppointment.start = DateTime.Now.ToString();
            mockAppointment.end = DateTime.Now.AddHours(2).ToString();
            mockAppointment.appointmentType = ENUM_SYS_Appointment_Type.ResourceAppointment;

            mockCoreDb.Read_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, mockAppointment).Returns(x =>
              {
                  return ENUM_DB_Status.DB_SUCCESS;
              });

            IDcrAppointment IDcrAppointment = scOrgAppointments.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrAppointment.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrAppointment.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentOptionsByAppointmentIDWithInvalidParameter()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readOrgAppointmentOptionsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IAppointment mockAppointment = Substitute.For<IAppointment>();
            mockCoreDb.Read_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, mockAppointment).Returns(x =>
            {
                mockAppointment.appointmentId = 1;
                mockAppointment.creatorId = 2;
                mockAppointment.appointmentTitle = "Demo test";
                mockAppointment.timeZoneIANA = DateTime.Now.ToString();
                mockAppointment.durationMilliseconds = DateTime.Now.Second;
                mockAppointment.start = DateTime.Now.ToString();
                mockAppointment.end = DateTime.Now.AddHours(2).ToString();
                mockAppointment.appointmentType = ENUM_SYS_Appointment_Type.ResourceAppointment;
                x[2] = mockAppointment;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrAppointment IDcrAppointment = scOrgAppointments.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrAppointment.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrAppointment.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentOptionsByAppointmentIDWithPermissionDenied()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readOrgAppointmentOptionsByAppointmentID).Returns(x =>
                {
                    return false;
                });

            IAppointment mockAppointment = Substitute.For<IAppointment>();
            mockCoreDb.Read_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, mockAppointment).Returns(x =>
            {
                mockAppointment.appointmentId = 1;
                mockAppointment.creatorId = 2;
                mockAppointment.appointmentTitle = "Demo test";
                mockAppointment.timeZoneIANA = DateTime.Now.ToString();
                mockAppointment.durationMilliseconds = DateTime.Now.Second;
                mockAppointment.start = DateTime.Now.ToString();
                mockAppointment.end = DateTime.Now.AddHours(2).ToString();
                mockAppointment.appointmentType = ENUM_SYS_Appointment_Type.ResourceAppointment;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrAppointment IDcrAppointment = scOrgAppointments.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrAppointment.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrAppointment.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAppointmentOptionsByAppointmentIDWithServerError()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readOrgAppointmentOptionsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IAppointment mockAppointment = Substitute.For<IAppointment>();
            mockAppointment.appointmentId = 1;
            mockAppointment.creatorId = 2;
            mockAppointment.appointmentTitle = "Demo test";
            mockAppointment.timeZoneIANA = DateTime.Now.ToString();
            mockAppointment.durationMilliseconds = DateTime.Now.Second;
            mockAppointment.start = DateTime.Now.ToString();
            mockAppointment.end = DateTime.Now.AddHours(2).ToString();
            mockAppointment.appointmentType = ENUM_SYS_Appointment_Type.ResourceAppointment;
            mockCoreDb.Read_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, mockAppointment).ReturnsForAnyArgs(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            IDcrAppointment IDcrAppointment = scOrgAppointments.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrAppointment.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrAppointment.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Org_Resource_Appointment_Mappings_By_Resource_ID
        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgResourceAppointmentMappingsByResourceID()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_deleteAllOrgResourceAppointmentMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            mockCoreDb.Delete_All_Resource_Appointment_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCR_Delete = scOrgAppointments.Delete_All_Org_Resource_Appointment_Mappings_By_Resource_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);


            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCR_Delete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCR_Delete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCR_Delete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgResourceAppointmentMappingsByResourceIDWithInvalidParameter()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_deleteAllOrgResourceAppointmentMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            mockCoreDb.Delete_All_Resource_Appointment_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCR_Delete = scOrgAppointments.Delete_All_Org_Resource_Appointment_Mappings_By_Resource_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCR_Delete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCR_Delete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCR_Delete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgResourceAppointmentMappingsByResourceIDWithPermissionDenied()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_deleteAllOrgResourceAppointmentMappingsByResourceID).Returns(x =>
                {
                    return false;
                });

            mockCoreDb.Delete_All_Resource_Appointment_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCR_Delete = scOrgAppointments.Delete_All_Org_Resource_Appointment_Mappings_By_Resource_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCR_Delete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCR_Delete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCR_Delete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgResourceAppointmentMappingsByResourceIDWithServerError()
        {

            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_deleteAllOrgResourceAppointmentMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            mockCoreDb.Delete_All_Resource_Appointment_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            IDCR_Delete IDCR_Delete = scOrgAppointments.Delete_All_Org_Resource_Appointment_Mappings_By_Resource_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCR_Delete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCR_Delete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCR_Delete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentRepeatMappingsByAppointmentID()
        {
            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();


            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;

            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              TsoId = 1;
              listofTsoId.Add(TsoId);
              mocktsoIds.func_status = ENUM_Cmd_Status.ok;
              mocktsoIds.func_msg = ServiceResponse.status_ok;
              mocktsoIds.ListOfIDs = listofTsoId;
              return mocktsoIds;
          });
            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteTSO;
            });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentRepeatMappingsByAppointmentIDWithInvalidParameter()
        {
            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();


            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              Id = 1;
              listofIds.Add(Id);
              mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdList.func_msg = ServiceResponse.status_ok;
              mockDcrIdList.ListOfIDs = listofIds;
              return mockDcrIdList;
          });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });
            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentRepeatMappingsByAppointmentIDWithPermissionDenied()
        {
            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return false;
                });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              Id = 1;
              listofIds.Add(Id);
              mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdList.func_msg = ServiceResponse.status_ok;
              mockDcrIdList.ListOfIDs = listofIds;
              return mockDcrIdList;
          });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });
            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentRepeatMappingsByAppointmentIDWithReadAllOrgAppointmentRepeatMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              Id = 1;
              listofIds.Add(Id);
              mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
              mockDcrIdList.func_msg = ServiceResponse.status_unknown;
              mockDcrIdList.ListOfIDs = listofIds;
              return mockDcrIdList;
          });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });
            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentRepeatMappingsByAppointmentIDWithReadAllAppointmentTSoIdsFilterByRepeatIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              Id = 1;
              listofIds.Add(Id);
              mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdList.func_msg = ServiceResponse.status_ok;
              mockDcrIdList.ListOfIDs = listofIds;
              return mockDcrIdList;
          });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.Unknown;
               mocktsoIds.func_msg = ServiceResponse.status_unknown;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });
            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentRepeatMappingsByAppointmentIDWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              Id = 1;
              listofIds.Add(Id);
              mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdList.func_msg = ServiceResponse.status_ok;
              mockDcrIdList.ListOfIDs = listofIds;
              return mockDcrIdList;
          });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });
            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_unknown;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentRepeatMappingsByAppointmentIDWithServerError()
        {
            // ---------- Arrange--------------

            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              Id = 1;
              listofIds.Add(Id);
              mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdList.func_msg = ServiceResponse.status_ok;
              mockDcrIdList.ListOfIDs = listofIds;
              return mockDcrIdList;
          });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });
            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentResourceMappingsByAppointmentID()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
              {
                  TsoId = 1;
                  listofTsoId.Add(TsoId);
                  mocktsoIds.func_status = ENUM_Cmd_Status.ok;
                  mocktsoIds.func_msg = ServiceResponse.status_ok;
                  mocktsoIds.ListOfIDs = listofTsoId;
                  return mocktsoIds;
              });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();

             mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            
            {
               mockDCRDeleteTSO.Result = ENUM_Cmd_Delete_State.Deleted;
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,  mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb);
            
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentResourceMappingsByAppointmentIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.Result = ENUM_Cmd_Delete_State.Deleted;
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,  mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentResourceMappingsByAppointmentIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return false;
                });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.Result = ENUM_Cmd_Delete_State.Deleted;
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,  mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentResourceMappingsByAppointmentIDWithReadAllOrgAppointmentTSoIdsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.Unknown;
               mocktsoIds.func_msg = ServiceResponse.status_unknown;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.Result = ENUM_Cmd_Delete_State.Deleted;
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,  mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentResourceMappingsByAppointmentIDWithReadAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdList.func_msg = ServiceResponse.status_unknown;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.Result = ENUM_Cmd_Delete_State.Deleted;
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,  mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentResourceMappingsByAppointmentIDWithDeleteTimePeriodResourceMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.Result = ENUM_Cmd_Delete_State.NotDeleted;
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.Unknown;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_unknown;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,  mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentResourceMappingsByAppointmentIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mocktsoIds = Substitute.For<IDcrIdList>();
            List<int> listofTsoId = Substitute.For<List<int>>();
            int TsoId;
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               TsoId = 1;
               listofTsoId.Add(TsoId);
               mocktsoIds.func_status = ENUM_Cmd_Status.ok;
               mocktsoIds.func_msg = ServiceResponse.status_ok;
               mocktsoIds.ListOfIDs = listofTsoId;
               return mocktsoIds;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.Result = ENUM_Cmd_Delete_State.Deleted;
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Resource_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,  mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentCalendarMappingsByAppointmentID()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentCalendarMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });



            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockTSO.appointmentId = 1;
                mockListTSO.Add(mockTSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListTSO;
                return mockDcrTsoList;
            });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            
            {
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId,mockCoreSc,mockCoreDb);
            
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentCalendarMappingsByAppointmentIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentCalendarMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });



            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockTSO.appointmentId = 1;
                       mockListTSO.Add(mockTSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListTSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId,mockCoreSc,mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentCalendarMappingsByAppointmentIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentCalendarMappingsByAppointmentID).Returns(x =>
                {
                    return false;
                });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });



            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockTSO.appointmentId = 1;
                       mockListTSO.Add(mockTSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListTSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId,mockCoreSc,mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentCalendarMappingsByAppointmentIDWithReadAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentCalendarMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdList.func_msg = ServiceResponse.status_unknown;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });



            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockTSO.appointmentId = 1;
                       mockListTSO.Add(mockTSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListTSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId,mockCoreSc,mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentCalendarMappingsByAppointmentIDWithReadAllTimePeriodsForCalendarFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentCalendarMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });



            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockTSO.appointmentId = 1;
                       mockListTSO.Add(mockTSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
                       mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
                       mockDcrTsoList.timeScaleList = mockListTSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId,mockCoreSc,mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentCalendarMappingsByAppointmentIDWithDeleteTimePeriodCalendarMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentCalendarMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });



            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockTSO.appointmentId = 1;
                       mockListTSO.Add(mockTSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListTSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.Unknown;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_unknown;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId,mockCoreSc,mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllOrgAppointmentCalendarMappingsByAppointmentIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentCalendarMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });



            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockTSO.appointmentId = 1;
                       mockListTSO.Add(mockTSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListTSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
             mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTSO;
           });

            mockCoreDb.Delete_All_Appointment_Calendar_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId,mockCoreSc,mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_Appointment_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_DeleteAppointmentByAppointmentID()
        {
            
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAppointmentByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDCR_Delete mockDCRDeleteTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                   mockDCRDeleteTsoMaps.func_status = ENUM_Cmd_Status.ok;
                   mockDCRDeleteTsoMaps.func_msg = ServiceResponse.status_ok;
                   return mockDCRDeleteTsoMaps;

               });
            IDCR_Delete mockDCRDeleteRepMaps = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRepMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRepMaps;
            });

            IDCR_Delete mockDCRDeleteResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMaps;
            });

            IDCR_Delete mockDCRDeleteCalMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                  mockDCRDeleteCalMaps.func_status = ENUM_Cmd_Status.ok;
                  mockDCRDeleteCalMaps.func_msg = ServiceResponse.status_ok;
                  return mockDCRDeleteCalMaps;
              });


            mockCoreDb.Delete_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId).Returns(x =>
             {
                 return ENUM_DB_Status.DB_SUCCESS;
             });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockDcTSOCalendarId, mockDcTSOResourceId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAppointmentByAppointmentIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAppointmentByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDCR_Delete mockDCRDeleteTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTsoMaps.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTsoMaps.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTsoMaps;

           });
            IDCR_Delete mockDCRDeleteRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRepMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRepMaps;
            });

            IDCR_Delete mockDCRDeleteResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMaps;
            });

            IDCR_Delete mockDCRDeleteCalMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCalMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCalMaps;
            });


            mockCoreDb.Delete_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockDcTSOCalendarId, mockDcTSOResourceId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAppointmentByAppointmentIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAppointmentByAppointmentID).Returns(x =>
                {
                    return false;
                });

            IDCR_Delete mockDCRDeleteTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTsoMaps.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTsoMaps.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTsoMaps;

           });
            IDCR_Delete mockDCRDeleteRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRepMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRepMaps;
            });

            IDCR_Delete mockDCRDeleteResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMaps;
            });

            IDCR_Delete mockDCRDeleteCalMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCalMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCalMaps;
            });


            mockCoreDb.Delete_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockDcTSOCalendarId, mockDcTSOResourceId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAppointmentByAppointmentIDWithDeleteAllAppointmentTSOMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAppointmentByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDCR_Delete mockDCRDeleteTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTsoMaps.func_status = ENUM_Cmd_Status.Unknown;
               mockDCRDeleteTsoMaps.func_msg = ServiceResponse.status_unknown;
               return mockDCRDeleteTsoMaps;

           });
            IDCR_Delete mockDCRDeleteRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRepMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRepMaps;
            });

            IDCR_Delete mockDCRDeleteResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMaps;
            });

            IDCR_Delete mockDCRDeleteCalMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCalMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCalMaps;
            });


            mockCoreDb.Delete_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockDcTSOCalendarId, mockDcTSOResourceId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAppointmentByAppointmentIDWithDeleteAllAppointmentRepeatMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAppointmentByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDCR_Delete mockDCRDeleteTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTsoMaps.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTsoMaps.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTsoMaps;

           });
            IDCR_Delete mockDCRDeleteRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMaps.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRDeleteRepMaps.func_msg = ServiceResponse.status_unknown;
                return mockDCRDeleteRepMaps;
            });

            IDCR_Delete mockDCRDeleteResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMaps;
            });

            IDCR_Delete mockDCRDeleteCalMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCalMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCalMaps;
            });


            mockCoreDb.Delete_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockDcTSOCalendarId, mockDcTSOResourceId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAppointmentByAppointmentIDWithDeleteAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAppointmentByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDCR_Delete mockDCRDeleteTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTsoMaps.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTsoMaps.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTsoMaps;

           });
            IDCR_Delete mockDCRDeleteRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRepMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRepMaps;
            });

            IDCR_Delete mockDCRDeleteResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMaps.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRDeleteResMaps.func_msg = ServiceResponse.status_unknown;
                return mockDCRDeleteResMaps;
            });

            IDCR_Delete mockDCRDeleteCalMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCalMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCalMaps;
            });


            mockCoreDb.Delete_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockDcTSOCalendarId, mockDcTSOResourceId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_DeleteAppointmentByAppointmentIDWithDeleteAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAppointmentByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDCR_Delete mockDCRDeleteTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTsoMaps.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTsoMaps.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTsoMaps;

           });
            IDCR_Delete mockDCRDeleteRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRepMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRepMaps;
            });

            IDCR_Delete mockDCRDeleteResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMaps;
            });

            IDCR_Delete mockDCRDeleteCalMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMaps.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRDeleteCalMaps.func_msg = ServiceResponse.status_unknown;
                return mockDCRDeleteCalMaps;
            });


            mockCoreDb.Delete_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockDcTSOCalendarId, mockDcTSOResourceId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAppointmentByAppointmentIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;
            mockDcOrgAppointmentId.appointmentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_deleteAppointmentByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDCR_Delete mockDCRDeleteTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteTsoMaps.func_status = ENUM_Cmd_Status.ok;
               mockDCRDeleteTsoMaps.func_msg = ServiceResponse.status_ok;
               return mockDCRDeleteTsoMaps;

           });
            IDCR_Delete mockDCRDeleteRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRepMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRepMaps;
            });

            IDCR_Delete mockDCRDeleteResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMaps;
            });

            IDCR_Delete mockDCRDeleteCalMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMaps.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCalMaps.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCalMaps;
            });


            mockCoreDb.Delete_Appointment(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.appointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockDcTSOCalendarId, mockDcTSOResourceId, mockDcCalendarId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Create_Appointment_Repeats_Map
        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMap()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
              {
                  return true;
              });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
              {
                  mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                  mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                  mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                  return mockDcrRepeat;
              });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
              {
                  IdResTsos = 1;
                  listOfIdsResTsos.Add(IdResTsos);
                  mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                  mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                  mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                  return mockDcrIdListResTsos;
              });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();

            mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
               mockDcrTSO.func_msg = ServiceResponse.status_ok;
               mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
               mockDcrTSO.repeatId = 1;
               return mockDcrTSO;
           });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            



            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(1, IDcrAddedList.NewRecordIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMapWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockIInstantStartStopRepeatTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMapWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return false;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrTSO.func_msg = ServiceResponse.status_ok;
               mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
               mockDcrTSO.repeatId = 1;
               return mockDcrTSO;
           });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockIInstantStartStopRepeatTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMapWithReadRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrRepeat.func_msg = ServiceResponse.status_unknown;
                return mockDcrRepeat;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockIInstantStartStopRepeatTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMapWithReadResourceTSOsByResourceIDTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_unknown;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.Unknown;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockIInstantStartStopRepeatTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMapWithReadTSoFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_unknown;
                mockDcrTSO.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockIInstantStartStopRepeatTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMapWithServerErrorFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_FAIL;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMapWithCreateTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_unknown;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateAppointmentRepeatsMapWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsAppointment mockDcMapRepeatsAppointment = Substitute.For<IDcMapRepeatsAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsAppointment.repeatIds = listOfRepIds;
            mockDcMapRepeatsAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatsAppointment.cmd_user_id = 1;
            mockDcMapRepeatsAppointment.orgId = 43242;
            mockDcMapRepeatsAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatsAppointment, typeof(IDcMapRepeatsAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatsAppointment.cmd_user_id, mockDcMapRepeatsAppointment.orgId, ENUM_Core_Function.CF_createOrgRepeatsAppointmentMap).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:07:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsAppointment.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatsAppointment.coreProj, mockDcMapRepeatsAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            mockCoreSc.Create_TimePeriod(mockDcTso, mockValid, mockDcResourceTSO, mockDcCalendarTSO, mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, listTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
          {
              IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
              mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_unknown;
              return mockDCRAddedCreateTimePeriod;
          });


            IDcrAddedList IDcrAddedList = scOrgAppointments.Create_Appointment_Repeats_Map(mockDcMapRepeatsAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Create_Org_Appointment_Repeat_Map
        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMap()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();



            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                     IDcrRepeat.func_msg = ServiceResponse.status_ok;
                     return IDcrRepeat;
                 });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>

               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
            {
                      IdCalTsos = 1;
                      listOfIdsCalTsos.Add(IdCalTsos);
                      mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                      return mockDcrIdListCalTsos;
                  });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });


             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>

           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(1, IDCRAdded.NewRecordID);
            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();



            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
            {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return false;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();



            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithReadRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();




            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                IDcrRepeat.func_msg = ServiceResponse.status_unknown;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithReadAllOrgAppointmentRepeatMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();



            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_unknown;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.Unknown;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithReadAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();



            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdList.func_msg = ServiceResponse.status_unknown;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithReadAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();




            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithReadResourceTSOsByResourceIDTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();




            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_unknown;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.Unknown;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithReadTSoFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();




            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_unknown;
                mockDcrTSO.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithReadOrgCalendarTSOsByCalendarIDAndTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();




            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_unknown;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.Unknown;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();




            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_FAIL;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.ok;
               IDcrAddedList.func_msg = ServiceResponse.status_ok;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithCreateOrgTimeScaleObjectsFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();



            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> IInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.Unknown;
               IDcrAddedList.func_msg = ServiceResponse.status_unknown;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentRepeatMapWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            mockDcMapRepeatAppointment.coreProj = mockCoreProj;
            mockDcMapRepeatAppointment.cmd_user_id = 1;
            mockDcMapRepeatAppointment.orgId = 43242;
            mockDcMapRepeatAppointment.creatorId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapRepeatAppointment, typeof(IDcMapRepeatAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapRepeatAppointment.cmd_user_id, mockDcMapRepeatAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentRepeatMap).Returns(x =>
                {
                    return true;
                });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();



            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrAppointmentOptions.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();

            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockRepeatOptions, mockDcrAppointmentOptions.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Id = 1;
               listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            List<IInstantStartStop> mockIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                       {
                           IdCalTsos = 1;
                           listOfIdsCalTsos.Add(IdCalTsos);
                           mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                           mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                           mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                           return mockDcrIdListCalTsos;
                       });

            int repeatedAppointmentRepeatMap;
            mockCoreDb.Create_Appointment_Repeat_Map(mockDcMapRepeatAppointment.coreProj, mockDcMapRepeatAppointment, mockDcRepeatId, out repeatedAppointmentRepeatMap).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });



             mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid,  mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs,  mockDcCalendarId, mockDcOrgResourceId, mockUtils, listOfTimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IDcrAddedList IDcrAddedList = Substitute.For<IDcrAddedList>();
               IDcrAddedList.func_status = ENUM_Cmd_Status.Unknown;
               IDcrAddedList.func_msg = ServiceResponse.status_unknown;
               return IDcrAddedList;
           });


            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Create_Org_Appointment_Calendar_Mapping
        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            //mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                    mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                    mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                    mockDcrCalendar.calendarId = 1;
                    return mockDcrCalendar;
                });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoApp.appointmentId = 1;
                ITSoApp.start = mockDcrAppointmentOptions.start;
                ITSoApp.end = mockDcrAppointmentOptions.end;
                listOfITSoApp.Add(ITSoApp);
                mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                return mockDcrTsoListTimeApp;
            });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
            {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();

            mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCRAdded.Result);
            Assert.AreEqual(1, IDCRAdded.NewRecordID);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return false;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadAppointmentOptionsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_unknown;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.Unknown;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdList.func_msg = ServiceResponse.status_unknown;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadOrgCalendarByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_unknown;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadAllTimePeriodsForAppointmentFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.Unknown;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_unknown;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadOrgByOrgIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_unknown;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.Unknown;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadTimePeriodsForCalendarBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadAllOrgCalendarResourceMappingsByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.Unknown;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_unknown;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithReadResourceByIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_unknown;
                   mockDcrResource.func_status = ENUM_Cmd_Status.Unknown;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithCreateTimePeriodCalendarMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_unknown;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.Unknown;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_FAIL;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentCalendarMappingWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<ITimeStartEnd> listOfTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();


            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockDcCalendarId, mockDcCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrCalendar.func_msg = ServiceResponse.status_ok;
               mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
               mockDcrCalendar.calendarId = 1;
               return mockDcrCalendar;
           });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockTSO.start = mockDcrAppointmentOptions.start;
               mockTSO.end = mockDcrAppointmentOptions.end;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });


            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            listofIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {
                return listofIInstantStartStopTimePeriods;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;
                   return mockDcrIdListCalResMap;
               });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Added mockDCRAddedCalMap = Substitute.For<IDCR_Added>();
            List<ITimeStartEnd> mockListITimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
             mockCoreSc.Create_TimePeriod_Calendar_Map(mockDcCalendarTSO, mockValid,mockDcResourceTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockUtils, mockListITimeStartEnd, mockListOfOrgTsoCalendarIds, mockCoreSc,mockCoreDb).ReturnsForAnyArgs(x =>
             {
                 mockDCRAddedCalMap.func_msg = ServiceResponse.status_ok;
                 mockDCRAddedCalMap.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAddedCalMap;
             });
            int newMappingID;
            mockCoreDb.Create_Calendar_Appointment_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment, out newMappingID).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_FAIL;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Create_Org_Appointment_Resource_Mapping
        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();



            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
            {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();

            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>

                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(1, IDCRAdded.NewRecordID);
            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return false;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadAllResourceAppointmentsByResourceIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_unknown;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadAppointmentOptionsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.Unknown;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_unknown;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdList.func_msg = ServiceResponse.status_unknown;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadResourceByIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_unknown;
                   mockDcrResource.func_status = ENUM_Cmd_Status.Unknown;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadAllTimePeriodsForAppointmentFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.Unknown;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_unknown;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadTimePeriodsForResourceBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_unknown;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadOrgByOrgIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_unknown;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.Unknown;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithCheckDailyMaxNotExceededFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_unknown;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithCreateTimePeriodResourceMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.Unknown;
                       mockDCRAdded.func_msg = ServiceResponse.status_unknown;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_FAIL;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            //int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //IdCalMap = 1;
               //listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.Unknown;
                       mockDCRAdded.func_msg = ServiceResponse.status_unknown;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriods = Substitute.For<IInstantStartStop>();
            listofIInstantStartStopTimePeriods.Add(mockIInstantStartStopTimePeriods);
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_CreateOrgAppointmentResourceMappingWithReadAllOrgAppointmentCalendarMappingsByAppointmentID()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapResourceAppointment.coreProj = mockCoreProj;
            mockDcMapResourceAppointment.cmd_user_id = 1;
            mockDcMapResourceAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapResourceAppointment, typeof(IDcMapResourceAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapResourceAppointment.cmd_user_id, mockDcMapResourceAppointment.orgId, ENUM_Core_Function.CF_createOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });

            List<IAppointmentComplete> mockListAppointmentComplete = Substitute.For<List<IAppointmentComplete>>();
            IAppointmentComplete mockAppointmentComplete = Substitute.For<IAppointmentComplete>();

            List<IResourceAppointmentComplete> mockListResourceAppointmentComplete = Substitute.For<List<IResourceAppointmentComplete>>();
            IResourceAppointmentComplete mockResourceAppointmentComplete = Substitute.For<IResourceAppointmentComplete>();

            IDcrResourceAppointmentList mockDcrResourceAppointmentList = Substitute.For<IDcrResourceAppointmentList>();

            mockCoreSc.Read_All_Resource_Appointments_By_Resource_ID(mockDcOrgResourceId,  mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockAppointmentComplete.appointmentId = 2;
               mockAppointmentComplete.appointmentTitle = "Demo";
               mockAppointmentComplete.creatorId = 1;
               mockListAppointmentComplete.Add(mockAppointmentComplete);
               mockResourceAppointmentComplete.listOfAppointments = mockListAppointmentComplete;
               mockListResourceAppointmentComplete.Add(mockResourceAppointmentComplete);
               mockDcrResourceAppointmentList.func_status = ENUM_Cmd_Status.ok;
               mockDcrResourceAppointmentList.func_msg = ServiceResponse.status_ok;
               mockDcrResourceAppointmentList.ResourceAppointments = mockListResourceAppointmentComplete;
               return mockDcrResourceAppointmentList;
           });


            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockDcrAppointmentOptions.creatorId = 1;
            //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
            mockDcrAppointmentOptions.appointmentId = 1;
            mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
            mockDcrAppointmentOptions.orgId = 1;
            mockDcrAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
            mockDcrAppointmentOptions.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {

               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });


            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listofIds = Substitute.For<List<int>>();
            int Id;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               //Id = 1;
               //listofIds.Add(Id);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listofIds;
               return mockDcrIdList;
           });

            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      ITSoApp.start = mockDcrAppointmentOptions.start;
                      ITSoApp.end = mockDcrAppointmentOptions.end;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });

            List<ITSO> mockListTSORes = Substitute.For<List<ITSO>>();
            ITSO mockTSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSORes.appointmentId = 1;
                 mockTSORes.start = mockDcrAppointmentOptions.start;
                 mockTSORes.end = mockDcrAppointmentOptions.end;
                 mockListTSORes.Add(mockTSORes);
                 mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListRes.timeScaleList = mockListTSORes;
                 return mockDcrTsoListRes;
             });

            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();
            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDcrOrg.func_msg = ServiceResponse.status_ok;
                 mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrOrg;
             });

            IDCR_Base mockDCRBaseCheckList = Substitute.For<IDCR_Base>();
            List<IInstantStartStop> listofIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.Check_Daily_Max_Not_Exceeded(mockDcMapResourceAppointment.coreProj, mockCoreSc, mockListTSORes, 10, 1, 1,  mockValid, listofIInstantStartStop,mockCoreDb).ReturnsForAnyArgs(x =>
            {
                mockDCRBaseCheckList.func_status = ENUM_Cmd_Status.ok;
                mockDCRBaseCheckList.func_msg = ServiceResponse.status_ok;
                return mockDCRBaseCheckList;
            });

            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
             mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO,  mockUtils, mockTsoResourceId, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       return mockDCRAdded;
                   });

            int newMapId;
            mockCoreDb.Create_Resource_Appointment_Mapping(mockDcMapResourceAppointment.coreProj, mockDcMapResourceAppointment, mockDcMapResourceAppointment, out newMapId).Returns(x =>
            {
                x[3] = 1;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listofIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listofIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listofIInstantStartStopTimePeriods;
            });

            IDCR_Added IDCRAdded = scOrgAppointments.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_Org_Resources_Appointments_Between_DateTime

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTime()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            


            //mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange,  mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockITSO.appointmentId = 1;
                 mockListITSO.Add(mockITSO);
                 mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                 mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                 mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                 return mockDcrResourcesTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                {
                    IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                    IDcrRepeat.func_msg = ServiceResponse.status_ok;
                    return IDcrRepeat;
                });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTimeWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();

            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                        mockITSO.appointmentId = 1;
                        mockListITSO.Add(mockITSO);
                        mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                        return mockDcrResourcesTsoList;

                    });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTimeWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return false;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();

             mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                    {
                        mockITSO.appointmentId = 1;
                        mockListITSO.Add(mockITSO);
                        mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                        return mockDcrResourcesTsoList;

                    });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTimeWithReadTimePeriodsForResourcesBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();

             mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                    {
                        mockITSO.appointmentId = 1;
                        mockListITSO.Add(mockITSO);
                        mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.Unknown;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_unknown;
                        mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                        return mockDcrResourcesTsoList;

                    });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                     IDcrRepeat.func_msg = ServiceResponse.status_ok;
                     return IDcrRepeat;
                 });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTimeWithReadAppointmentOptionsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();

             mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                    {
                        mockITSO.appointmentId = 1;
                        mockListITSO.Add(mockITSO);
                        mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                        return mockDcrResourcesTsoList;

                    });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_unknown;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTimeWithReadAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();

             mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                    {
                        mockITSO.appointmentId = 1;
                        mockListITSO.Add(mockITSO);
                        mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                        return mockDcrResourcesTsoList;

                    });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTimeWithReadAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();

             mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                    {
                        mockITSO.appointmentId = 1;
                        mockListITSO.Add(mockITSO);
                        mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                        return mockDcrResourcesTsoList;

                    });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTimeWithReadAllOrgAppointmentRepeatMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();

             mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                    {
                        mockITSO.appointmentId = 1;
                        mockListITSO.Add(mockITSO);
                        mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                        return mockDcrResourcesTsoList;

                    });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_unknown;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.Unknown;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourcesAppointmentsBetweenDateTimeWithReadRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfIdsRes = Substitute.For<List<int>>();
            int IdsRes = 1;
            listOfIdsRes.Add(IdsRes);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();
            Dictionary<int, List<ITSO>> mockUnfilteredTimescaleObjs = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();

             mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockResourcesTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                    {
                        mockITSO.appointmentId = 1;
                        mockListITSO.Add(mockITSO);
                        mockUnfilteredTimescaleObjs.Add(1, mockListITSO);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockUnfilteredTimescaleObjs;
                        return mockDcrResourcesTsoList;

                    });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                IDcrRepeat.func_msg = ServiceResponse.status_unknown;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resources_Appointments_Between_DateTime(mockDcOrgResourcesTimeRange, mockUtils, mockValid, mockResourcesTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_Org_Resource_Appointments_Between_DateTime

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourceAppointmentsBetweenDateTime()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;

            //List<int> listOfIdsRes = Substitute.For<List<int>>();
            //int IdsRes = 1;
            //listOfIdsRes.Add(IdsRes);
            //IDCResourceTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSO.appointmentId = 1;
                 mockListTSO.Add(mockTSO);
                 mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoList.timeScaleList = mockListTSO;
                 return mockDcrTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.ResourceAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                     IDcrRepeat.func_msg = ServiceResponse.status_ok;
                     return IDcrRepeat;
                 });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resource_Appointments_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockValid, mockResourceTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrResourceAppointmentList.func_msg);
            Assert.AreEqual(mockDcrAppointmentOptions.creatorId, IDcrResourceAppointmentList.ResourceAppointments[0].listOfAppointments[0].creatorId);
            Assert.AreEqual(mockDcrAppointmentOptions.creatorId, IDcrResourceAppointmentList.ResourceAppointments[0].listOfAppointments[0].creatorId);
            Assert.AreEqual(mockDcrAppointmentOptions.appointmentId, IDcrResourceAppointmentList.ResourceAppointments[0].listOfAppointments[0].appointmentId);
            Assert.AreEqual(mockDcrAppointmentOptions.appointmentTitle, IDcrResourceAppointmentList.ResourceAppointments[0].listOfAppointments[0].appointmentTitle);
            Assert.AreEqual(mockDcrAppointmentOptions.start, IDcrResourceAppointmentList.ResourceAppointments[0].listOfAppointments[0].start);
            Assert.AreEqual(mockDcrAppointmentOptions.end, IDcrResourceAppointmentList.ResourceAppointments[0].listOfAppointments[0].end);
            Assert.AreEqual(mockDcrAppointmentOptions.appointmentType, IDcrResourceAppointmentList.ResourceAppointments[0].listOfAppointments[0].appointmentType);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourceAppointmentsBetweenDateTimeWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;

            //List<int> listOfIdsRes = Substitute.For<List<int>>();
            //int IdsRes = 1;
            //listOfIdsRes.Add(IdsRes);
            //IDCResourceTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSO.appointmentId = 1;
                 mockListTSO.Add(mockTSO);
                 mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoList.timeScaleList = mockListTSO;
                 return mockDcrTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resource_Appointments_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockValid, mockResourceTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourceAppointmentsBetweenDateTimeWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;

            //List<int> listOfIdsRes = Substitute.For<List<int>>();
            //int IdsRes = 1;
            //listOfIdsRes.Add(IdsRes);
            //IDCResourceTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return false;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSO.appointmentId = 1;
                 mockListTSO.Add(mockTSO);
                 mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoList.timeScaleList = mockListTSO;
                 return mockDcrTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resource_Appointments_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockValid, mockResourceTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourceAppointmentsBetweenDateTimeWithReadTimePeriodsForResourceBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;

            //List<int> listOfIdsRes = Substitute.For<List<int>>();
            //int IdsRes = 1;
            //listOfIdsRes.Add(IdsRes);
            //IDCResourceTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSO.appointmentId = 1;
                 mockListTSO.Add(mockTSO);
                 mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
                 mockDcrTsoList.timeScaleList = mockListTSO;
                 return mockDcrTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resource_Appointments_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockValid, mockResourceTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourceAppointmentsBetweenDateTimeWithReadAppointmentOptionsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;

            //List<int> listOfIdsRes = Substitute.For<List<int>>();
            //int IdsRes = 1;
            //listOfIdsRes.Add(IdsRes);
            //IDCResourceTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSO.appointmentId = 1;
                 mockListTSO.Add(mockTSO);
                 mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoList.timeScaleList = mockListTSO;
                 return mockDcrTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_unknown;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resource_Appointments_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockValid, mockResourceTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourceAppointmentsBetweenDateTimeWithReadAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;

            //List<int> listOfIdsRes = Substitute.For<List<int>>();
            //int IdsRes = 1;
            //listOfIdsRes.Add(IdsRes);
            //IDCResourceTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSO.appointmentId = 1;
                 mockListTSO.Add(mockTSO);
                 mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoList.timeScaleList = mockListTSO;
                 return mockDcrTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resource_Appointments_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockValid, mockResourceTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourceAppointmentsBetweenDateTimeWithReadAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;

            //List<int> listOfIdsRes = Substitute.For<List<int>>();
            //int IdsRes = 1;
            //listOfIdsRes.Add(IdsRes);
            //IDCResourceTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSO.appointmentId = 1;
                 mockListTSO.Add(mockTSO);
                 mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoList.timeScaleList = mockListTSO;
                 return mockDcrTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();


            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                IDcrRepeat.func_msg = ServiceResponse.status_unknown;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resource_Appointments_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockValid, mockResourceTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgResourceAppointmentsBetweenDateTimeWithReadRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;

            //List<int> listOfIdsRes = Substitute.For<List<int>>();
            //int IdsRes = 1;
            //listOfIdsRes.Add(IdsRes);
            //IDCResourceTimeRange.resourceIdList = listOfIdsRes;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readOrgResourceAppointmentsByResourceIDAndTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockResourceTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockTSO.appointmentId = 1;
                 mockListTSO.Add(mockTSO);
                 mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoList.timeScaleList = mockListTSO;
                 return mockDcrTsoList;

             });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsResMap = Substitute.For<List<int>>();
            int IdResMap;
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdResMap = 1;
               listofIdsResMap.Add(IdResMap);
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListResMap.ListOfIDs = listofIdsResMap;
               return mockDcrIdListResMap;
           });


            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });

            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              IdRepMap = 1;
              listofIdsRepMap.Add(IdRepMap);
              mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
              mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListRepMap.ListOfIDs = listofIdsRepMap;
              return mockDcrIdListRepMap;
          });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                IDcrRepeat.func_msg = ServiceResponse.status_unknown;
                return IDcrRepeat;
            });

            IDcrResourceAppointmentList IDcrResourceAppointmentList = scOrgAppointments.Read_Org_Resource_Appointments_Between_DateTime(mockDCResourceTimeRange, mockUtils, mockValid, mockResourceTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceAppointmentList.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region Read_Org_Calendar_Appointments_Between_TimeRange
        [TestMethod]
        public void SC_Org_Appointments_ReadOrgCalendarAppointmentsBetweenTimeRange()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarAppointmentsBetweenTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });
            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IdRepMap = 1;
               listofIdsRepMap.Add(IdRepMap);
               mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListRepMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListRepMap;
           });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                     IDcrRepeat.func_msg = ServiceResponse.status_ok;
                     return IDcrRepeat;
                 });

            IDcrCalendarAppointmentList IDcrCalendarAppointmentList = scOrgAppointments.Read_Org_Calendar_Appointments_Between_TimeRange(mockDcCalendarTimeRange, mockUtils, mockValid, mockCalendarTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrCalendarAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrCalendarAppointmentList.func_msg);
            Assert.AreEqual(mockDcrAppointmentOptions.creatorId, IDcrCalendarAppointmentList.listOfAppointments[0].appointmentId);
            Assert.AreEqual("Test@gmail.com", IDcrCalendarAppointmentList.listOfAppointments[0].creatorEmail);
            Assert.AreEqual(mockDcrAppointmentOptions.appointmentId, IDcrCalendarAppointmentList.listOfAppointments[0].appointmentId);
            Assert.AreEqual(mockDcrAppointmentOptions.appointmentTitle, IDcrCalendarAppointmentList.listOfAppointments[0].appointmentTitle);
            Assert.AreEqual(mockDcrAppointmentOptions.orgId, IDcrCalendarAppointmentList.listOfAppointments[0].orgId);
            Assert.AreEqual(mockDcrAppointmentOptions.start, IDcrCalendarAppointmentList.listOfAppointments[0].start);
            Assert.AreEqual(mockDcrAppointmentOptions.end, IDcrCalendarAppointmentList.listOfAppointments[0].end);
            Assert.AreEqual(mockDcrAppointmentOptions.appointmentType, IDcrCalendarAppointmentList.listOfAppointments[0].appointmentType);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgCalendarAppointmentsBetweenTimeRangeWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarAppointmentsBetweenTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });
            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IdRepMap = 1;
               listofIdsRepMap.Add(IdRepMap);
               mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListRepMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListRepMap;
           });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrCalendarAppointmentList IDcrCalendarAppointmentList = scOrgAppointments.Read_Org_Calendar_Appointments_Between_TimeRange(mockDcCalendarTimeRange, mockUtils, mockValid, mockCalendarTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrCalendarAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrCalendarAppointmentList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadOrgCalendarAppointmentsBetweenTimeRangeWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarAppointmentsBetweenTimeRange).Returns(x =>
                {
                    return false;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });
            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IdRepMap = 1;
               listofIdsRepMap.Add(IdRepMap);
               mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListRepMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListRepMap;
           });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrCalendarAppointmentList IDcrCalendarAppointmentList = scOrgAppointments.Read_Org_Calendar_Appointments_Between_TimeRange(mockDcCalendarTimeRange, mockUtils, mockValid, mockCalendarTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrCalendarAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrCalendarAppointmentList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadTimePeriodsForCalendarBetweenDateTimeWithReadTimePeriodsForCalendarBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarAppointmentsBetweenTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               return mockDcrAppointmentOptions;
           });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });
            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IdRepMap = 1;
               listofIdsRepMap.Add(IdRepMap);
               mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListRepMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListRepMap;
           });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrCalendarAppointmentList IDcrCalendarAppointmentList = scOrgAppointments.Read_Org_Calendar_Appointments_Between_TimeRange(mockDcCalendarTimeRange, mockUtils, mockValid, mockCalendarTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarAppointmentList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadTimePeriodsForCalendarBetweenDateTimeWithReadAppointmentOptionsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarAppointmentsBetweenTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_unknown;
               return mockDcrAppointmentOptions;
           });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });
            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IdRepMap = 1;
               listofIdsRepMap.Add(IdRepMap);
               mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListRepMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListRepMap;
           });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrCalendarAppointmentList IDcrCalendarAppointmentList = scOrgAppointments.Read_Org_Calendar_Appointments_Between_TimeRange(mockDcCalendarTimeRange, mockUtils, mockValid, mockCalendarTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarAppointmentList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadTimePeriodsForCalendarBetweenDateTimeWithReadAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarAppointmentsBetweenTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });
            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IdRepMap = 1;
               listofIdsRepMap.Add(IdRepMap);
               mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListRepMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListRepMap;
           });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrCalendarAppointmentList IDcrCalendarAppointmentList = scOrgAppointments.Read_Org_Calendar_Appointments_Between_TimeRange(mockDcCalendarTimeRange, mockUtils, mockValid, mockCalendarTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarAppointmentList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadTimePeriodsForCalendarBetweenDateTimeWithReadAllOrgAppointmentRepeatMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarAppointmentsBetweenTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });
            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IdRepMap = 1;
               listofIdsRepMap.Add(IdRepMap);
               mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListRepMap.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListRepMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListRepMap;
           });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                IDcrRepeat.func_msg = ServiceResponse.status_ok;
                return IDcrRepeat;
            });

            IDcrCalendarAppointmentList IDcrCalendarAppointmentList = scOrgAppointments.Read_Org_Calendar_Appointments_Between_TimeRange(mockDcCalendarTimeRange, mockUtils, mockValid, mockCalendarTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarAppointmentList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadTimePeriodsForCalendarBetweenDateTimeWithReadRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarAppointmentsBetweenTimeRange).Returns(x =>
                {
                    return true;
                });
            List<ITSO> mockListTSO = Substitute.For<List<ITSO>>();
            ITSO mockTSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockUtils, mockCalendarTimeRange, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockTSO.appointmentId = 1;
               mockListTSO.Add(mockTSO);
               mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
               mockDcrTsoList.func_msg = ServiceResponse.status_ok;
               mockDcrTsoList.timeScaleList = mockListTSO;
               return mockDcrTsoList;
           });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.creatorId = 1;
               //mockDcrAppointmentOptions.creatorEmail = "Test@gmail.com";
               mockDcrAppointmentOptions.appointmentId = 1;
               mockDcrAppointmentOptions.appointmentTitle = "Demo Test";
               mockDcrAppointmentOptions.orgId = 1;
               mockDcrAppointmentOptions.start = DateTime.Now.ToString();
               mockDcrAppointmentOptions.end = DateTime.Now.AddMinutes(60).ToString();
               mockDcrAppointmentOptions.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            mockCoreDb.GetLoginNameFromUserID(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId.cmd_user_id).ReturnsForAnyArgs(x =>
            {
                return "Test@gmail.com";
            });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsCalMap = Substitute.For<List<int>>();
            int IdCalMap;
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdCalMap = 1;
               listofIdsCalMap.Add(IdCalMap);
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListCalMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListCalMap;
           });
            IDcrIdList mockDcrIdListRepMap = Substitute.For<IDcrIdList>();
            List<int> listofIdsRepMap = Substitute.For<List<int>>();
            int IdRepMap;
            mockCoreSc.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
           {
               IdRepMap = 1;
               listofIdsRepMap.Add(IdRepMap);
               mockDcrIdListRepMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListRepMap.func_msg = ServiceResponse.status_ok;
               mockDcrIdListRepMap.ListOfIDs = listofIdsCalMap;
               return mockDcrIdListRepMap;
           });

            IDcrRepeat IDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                IDcrRepeat.func_msg = ServiceResponse.status_unknown;
                return IDcrRepeat;
            });

            IDcrCalendarAppointmentList IDcrCalendarAppointmentList = scOrgAppointments.Read_Org_Calendar_Appointments_Between_TimeRange(mockDcCalendarTimeRange, mockUtils, mockValid, mockCalendarTimeRange, mockDcOrgAppointmentId, mockDcRepeatId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarAppointmentList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarAppointmentList.func_msg);

            //---------- Assert----------------
        }
        #endregion

        #region Delete_Org_Appointment_Resource_Mapping
        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentResourceMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceAppointmentId mockDcResourceAppointmentId = Substitute.For<IDcResourceAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcResourceAppointmentId.coreProj = mockCoreProj;
            mockDcResourceAppointmentId.cmd_user_id = 1;
            mockDcResourceAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcResourceAppointmentId, typeof(IDcResourceAppointmentId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcResourceAppointmentId.cmd_user_id, mockDcResourceAppointmentId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                 {
                     IdResTsos = 1;
                     listOfIdsResTsos.Add(IdResTsos);
                     mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                     mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                     mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                     return mockDcrIdListResTsos;
                 });
            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsResTsos;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Resource_Mapping(mockDcResourceAppointmentId.coreProj, mockDcResourceAppointmentId, mockDcResourceAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Resource_Mapping(mockDcResourceAppointmentId, mockUtils, mockValid, mockDCResourceTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentResourceMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceAppointmentId mockDcResourceAppointmentId = Substitute.For<IDcResourceAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcResourceAppointmentId.coreProj = mockCoreProj;
            mockDcResourceAppointmentId.cmd_user_id = 1;
            mockDcResourceAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcResourceAppointmentId, typeof(IDcResourceAppointmentId)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcResourceAppointmentId.cmd_user_id, mockDcResourceAppointmentId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });
            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsResTsos;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Resource_Mapping(mockDcResourceAppointmentId.coreProj, mockDcResourceAppointmentId, mockDcResourceAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Resource_Mapping(mockDcResourceAppointmentId, mockUtils, mockValid, mockDCResourceTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentResourceMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceAppointmentId mockDcResourceAppointmentId = Substitute.For<IDcResourceAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcResourceAppointmentId.coreProj = mockCoreProj;
            mockDcResourceAppointmentId.cmd_user_id = 1;
            mockDcResourceAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcResourceAppointmentId, typeof(IDcResourceAppointmentId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcResourceAppointmentId.cmd_user_id, mockDcResourceAppointmentId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentResourceMapping).Returns(x =>
                {
                    return false;
                });
            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });
            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsResTsos;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Resource_Mapping(mockDcResourceAppointmentId.coreProj, mockDcResourceAppointmentId, mockDcResourceAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Resource_Mapping(mockDcResourceAppointmentId, mockUtils, mockValid, mockDCResourceTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentResourceMappingWithReadResourceTSOsByResourceIDTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceAppointmentId mockDcResourceAppointmentId = Substitute.For<IDcResourceAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcResourceAppointmentId.coreProj = mockCoreProj;
            mockDcResourceAppointmentId.cmd_user_id = 1;
            mockDcResourceAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcResourceAppointmentId, typeof(IDcResourceAppointmentId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcResourceAppointmentId.cmd_user_id, mockDcResourceAppointmentId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });
            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsResTsos;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Resource_Mapping(mockDcResourceAppointmentId.coreProj, mockDcResourceAppointmentId, mockDcResourceAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Resource_Mapping(mockDcResourceAppointmentId, mockUtils, mockValid, mockDCResourceTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentResourceMappingWithReadAllOrgAppointmentTSoIdsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceAppointmentId mockDcResourceAppointmentId = Substitute.For<IDcResourceAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcResourceAppointmentId.coreProj = mockCoreProj;
            mockDcResourceAppointmentId.cmd_user_id = 1;
            mockDcResourceAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcResourceAppointmentId, typeof(IDcResourceAppointmentId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcResourceAppointmentId.cmd_user_id, mockDcResourceAppointmentId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });
            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsResTsos;
               mockDcrIdListApp.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.Unknown;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Resource_Mapping(mockDcResourceAppointmentId.coreProj, mockDcResourceAppointmentId, mockDcResourceAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Resource_Mapping(mockDcResourceAppointmentId, mockUtils, mockValid, mockDCResourceTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentResourceMappingWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceAppointmentId mockDcResourceAppointmentId = Substitute.For<IDcResourceAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcResourceAppointmentId.coreProj = mockCoreProj;
            mockDcResourceAppointmentId.cmd_user_id = 1;
            mockDcResourceAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcResourceAppointmentId, typeof(IDcResourceAppointmentId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcResourceAppointmentId.cmd_user_id, mockDcResourceAppointmentId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });
            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsResTsos;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_unknown;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.Unknown;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Resource_Mapping(mockDcResourceAppointmentId.coreProj, mockDcResourceAppointmentId, mockDcResourceAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Resource_Mapping(mockDcResourceAppointmentId, mockUtils, mockValid, mockDCResourceTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentResourceMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceAppointmentId mockDcResourceAppointmentId = Substitute.For<IDcResourceAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcResourceAppointmentId.coreProj = mockCoreProj;
            mockDcResourceAppointmentId.cmd_user_id = 1;
            mockDcResourceAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcResourceAppointmentId, typeof(IDcResourceAppointmentId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcResourceAppointmentId.cmd_user_id, mockDcResourceAppointmentId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentResourceMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });
            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsResTsos;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Resource_Mapping(mockDcResourceAppointmentId.coreProj, mockDcResourceAppointmentId, mockDcResourceAppointmentId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Resource_Mapping(mockDcResourceAppointmentId, mockUtils, mockValid, mockDCResourceTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);


            //---------- Assert----------------
        }
        #endregion

        #region Delete_Org_Appointment_Calendar_Mapping
        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentCalendarMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>

                  {
                      IdCalTsos = 1;
                      listOfIdsCalTsos.Add(IdCalTsos);
                      mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                      return mockDcrIdListCalTsos;
                  });

            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsApp;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment).Returns(x =>
              {
                  return ENUM_DB_Status.DB_SUCCESS;
              });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentCalendarMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                  {
                      IdCalTsos = 1;
                      listOfIdsCalTsos.Add(IdCalTsos);
                      mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                      return mockDcrIdListCalTsos;
                  });

            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsApp;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentCalendarMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return false;
                });
            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                  {
                      IdCalTsos = 1;
                      listOfIdsCalTsos.Add(IdCalTsos);
                      mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                      return mockDcrIdListCalTsos;
                  });

            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsApp;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentCalendarMappingWithReadOrgCalendarTSOsByCalendarIDAndTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                  {
                      IdCalTsos = 1;
                      listOfIdsCalTsos.Add(IdCalTsos);
                      mockDcrIdListCalTsos.func_msg = ServiceResponse.status_unknown;
                      mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.Unknown;
                      mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                      return mockDcrIdListCalTsos;
                  });

            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsApp;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentCalendarMappingWithReadAllOrgAppointmentTSoIdsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                  {
                      IdCalTsos = 1;
                      listOfIdsCalTsos.Add(IdCalTsos);
                      mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                      return mockDcrIdListCalTsos;
                  });

            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsApp;
               mockDcrIdListApp.func_msg = ServiceResponse.status_unknown;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.Unknown;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentCalendarMappingWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                  {
                      IdCalTsos = 1;
                      listOfIdsCalTsos.Add(IdCalTsos);
                      mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                      return mockDcrIdListCalTsos;
                  });

            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsApp;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_unknown;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.Unknown;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentCalendarMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcMapCalendarAppointment.coreProj = mockCoreProj;
            mockDcMapCalendarAppointment.cmd_user_id = 1;
            mockDcMapCalendarAppointment.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcMapCalendarAppointment, typeof(IDcMapCalendarAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapCalendarAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcMapCalendarAppointment.cmd_user_id, mockDcMapCalendarAppointment.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentCalendarMapping).Returns(x =>
                {
                    return true;
                });
            List<int> listOfIdsCalTsos = Substitute.For<List<int>>();
            int IdCalTsos;
            IDcrIdList mockDcrIdListCalTsos = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid,  mockUtils, mockDcCalendarTimeRange, mockDcCalendarTimeRange,mockCoreSc,mockCoreDb).Returns(x =>
                  {
                      IdCalTsos = 1;
                      listOfIdsCalTsos.Add(IdCalTsos);
                      mockDcrIdListCalTsos.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListCalTsos.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListCalTsos.ListOfIDs = listOfIdsCalTsos;
                      return mockDcrIdListCalTsos;
                  });

            List<int> listOfIdsApp = Substitute.For<List<int>>();
            int IdApp;
            IDcrIdList mockDcrIdListApp = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               IdApp = 1;
               listOfIdsApp.Add(IdApp);
               mockDcrIdListApp.ListOfIDs = listOfIdsApp;
               mockDcrIdListApp.func_msg = ServiceResponse.status_ok;
               mockDcrIdListApp.func_status = ENUM_Cmd_Status.ok;
               return mockDcrIdListApp;
           });


            IDCR_Delete mockDCRDeleteTso = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTso.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTso.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTso;
          });

            mockCoreDb.Delete_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment.coreProj, mockDcMapCalendarAppointment, mockDcMapCalendarAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockCalendarTimeRange, mockDcCalendarTimeRange, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentRepeatMappingsByAppointmentID()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            List<int> repeatIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreDb.Read_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out repeatIds).ReturnsForAnyArgs(x =>
             {
                 Ids = 1;
                 repeatIds.Add(Ids);
                 x[2] = repeatIds;
                 return ENUM_DB_Status.DB_SUCCESS;
             });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(1, IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentRepeatMappingsByAppointmentIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            List<int> repeatIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreDb.Read_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out repeatIds).ReturnsForAnyArgs(x =>
            {
                Ids = 1;
                repeatIds.Add(Ids);
                x[2] = repeatIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentRepeatMappingsByAppointmentIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return false;
                });
            List<int> repeatIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreDb.Read_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out repeatIds).ReturnsForAnyArgs(x =>
            {
                Ids = 1;
                repeatIds.Add(Ids);
                x[2] = repeatIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllOrgAppointmentRepeatMappingsByAppointmentIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcOrgAppointmentId.cmd_user_id, mockDcOrgAppointmentId.orgId, ENUM_Core_Function.CF_readAllOrgAppointmentRepeatMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });
            List<int> repeatIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreDb.Read_Appointment_Repeat_Mappings(mockDcOrgAppointmentId.coreProj, mockDcOrgAppointmentId, out repeatIds).ReturnsForAnyArgs(x =>
            {
                Ids = 1;
                repeatIds.Add(Ids);
                x[2] = repeatIds;
                return ENUM_DB_Status.DB_FAIL;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Org_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Update_Appointment 
        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointment()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
              {
                  ITSoCal.tsoId = 1;
                  listOfITSoCal.Add(ITSoCal);
                  mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                  mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                  mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                  return mockDcrTsoLisCalTSOs;
              });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoRes.repeatId = 1;
                listOfITSoRes.Add(ITSoRes);
                mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                return mockDcrIdListTimeRes;
            });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockDcrResource.maxDailyUserSlots = 1;
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {

                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();

            //mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
            mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                 DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                 return DCRUpdateTimePeriod;
             });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateAppCal;
            });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return false;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithReadAppointmentOptionsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_unknown;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithReadAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithReadAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                  {
                      ITSoCal.tsoId = 1;
                      listOfITSoCal.Add(ITSoCal);
                      mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                      return mockDcrTsoLisCalTSOs;
                  });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithReadAllTimePeriodsForCalendarFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_unknown;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.Unknown;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithReadAllOrgCalendarResourceMappingsByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.Unknown;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_unknown;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithReadAllTimePeriodsForResourceFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_unknown;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.Unknown;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithDeleteAllOrgAppointmentResourceMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_unknown;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithDeleteAllOrgAppointmentCalendarMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_unknown;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithDeleteAllAppointmentRepeatMappingsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_unknown;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithReadAllTimePeriodsForAppointmentFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.Unknown;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_unknown;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithUpdateTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
            mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
            {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.Unknown;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_unknown;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithCreateRepeatPeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_unknown;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithCreateOrgAppointmentRepeatMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>

                  {
                      DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                      DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                      return DCRUpdateTimePeriod;
                  });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_unknown;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithInvalidParameterWithCreateOrgAppointmentCalendarMappingFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();



            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();
            listOfCalIds.Add(calIds);
            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;

            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();

             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                  {
                      ITSoCal.tsoId = 1;
                      listOfITSoCal.Add(ITSoCal);
                      mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                      return mockDcrTsoLisCalTSOs;
                  });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoRes.repeatId = 1;
                      listOfITSoRes.Add(ITSoRes);
                      mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                      return mockDcrIdListTimeRes;
                  });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_unknown;
              return mockDCRAddedCreateAppCal;
          });



            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithResourceIdListNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();

            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;


            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });
            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });
            IDCR_Added mockDCRAddedCreateAppCalRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCalRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCalRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCalRes;
           });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithReadResourceByIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();

            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;


            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });

            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });

            //When ResourceIdList > 0
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_unknown;
                   mockDcrResource.func_status = ENUM_Cmd_Status.Unknown;
                   return mockDcrResource;
               });

            IDCR_Added mockDCRAddedCreateAppCalRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCalRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCalRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCalRes;
           });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithCreateOrgAppointmentResourceMappingFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();

            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All;


            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               mockDcrAppointmentOptions.orgId = 43242;
               mockDcrAppointmentOptions.creatorId = 1;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListResMap;
           });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
               return mockDcrIdListCalMap;
           });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
               {
                   return mockListIInstantStartStopRepeatTimePeriods;
               });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
                   {
                       ITSoCal.tsoId = 1;
                       listOfITSoCal.Add(ITSoCal);
                       mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                       return mockDcrTsoLisCalTSOs;
                   });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   listOfCalResMapIDs.Add(CalResMapID);
                   mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                   return mockDcrIdListCalResMap;
               });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       ITSoRes.repeatId = 1;
                       listOfITSoRes.Add(ITSoRes);
                       mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                       return mockDcrIdListTimeRes;
                   });

            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMap;
            });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMap;
            });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMap;
            });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                  {
                      ITSoApp.appointmentId = 1;
                      listOfITSoApp.Add(ITSoApp);
                      mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                      return mockDcrTsoListTimeApp;
                  });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
                   {
                       DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                       DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                       return DCRUpdateTimePeriod;
                   });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateRep;
          });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppRes;
          });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
              mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
              return mockDCRAddedCreateAppCal;
          });

            //When ResourceIdList > 0
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
               {
                   mockDcrResource.func_msg = ServiceResponse.status_ok;
                   mockDcrResource.func_status = ENUM_Cmd_Status.ok;
                   return mockDcrResource;
               });

            IDCR_Added mockDCRAddedCreateAppCalRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid, mockDcOrgResourceId, mockDcOrgAppointmentId, mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCalRes.func_status = ENUM_Cmd_Status.Unknown;
               mockDCRAddedCreateAppCalRes.func_msg = ServiceResponse.status_unknown;
               return mockDCRAddedCreateAppCalRes;
           });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithUpdateAppointmentTypeUnknown()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();

            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Unknown;


            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
           {
               return true;
           });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
              mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
              mockDcrAppointmentOptions.orgId = 43242;
              mockDcrAppointmentOptions.creatorId = 1;
              return mockDcrAppointmentOptions;
          });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListResMap;
          });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListCalMap;
          });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid,  mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
            {
                listOfCalResMapIDs.Add(CalResMapID);
                mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                return mockDcrIdListCalResMap;
            });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoRes.repeatId = 1;
                listOfITSoRes.Add(ITSoRes);
                mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                return mockDcrIdListTimeRes;
            });

            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteResMap;
           });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteCalMap;
           });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteRepMap;
           });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoApp.appointmentId = 1;
                listOfITSoApp.Add(ITSoApp);
                mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                return mockDcrTsoListTimeApp;
            });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
            {
                DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                return DCRUpdateTimePeriod;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                 mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                 return mockDCRAddedCreateRep;
             });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
                 mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
                 return mockDCRAddedCreateAppRes;
             });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCal;
           });

            //When ResourceIdList > 0
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId , mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
            {
               mockDcrResource.func_msg = ServiceResponse.status_ok;
               mockDcrResource.func_status = ENUM_Cmd_Status.ok;
               return mockDcrResource;
           });

            IDCR_Added mockDCRAddedCreateAppCalRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid,  mockDcOrgResourceId, mockDcOrgAppointmentId,  mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
            {
               mockDCRAddedCreateAppCalRes.func_status = ENUM_Cmd_Status.Unknown;
               mockDCRAddedCreateAppCalRes.func_msg = ServiceResponse.status_unknown;
               return mockDCRAddedCreateAppCalRes;
           });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithUpdateAppointmentTypeUpdateSingleTsoid()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();

            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.tsoId = 1;


            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
           {
               return true;
           });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
              mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
              mockDcrAppointmentOptions.orgId = 43242;
              mockDcrAppointmentOptions.creatorId = 1;
              return mockDcrAppointmentOptions;
          });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListResMap;
          });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListCalMap;
          });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid,  mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
            {
                listOfCalResMapIDs.Add(CalResMapID);
                mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                return mockDcrIdListCalResMap;
            });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoRes.repeatId = 1;
                listOfITSoRes.Add(ITSoRes);
                mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                return mockDcrIdListTimeRes;
            });

            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteResMap;
           });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteCalMap;
           });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteRepMap;
           });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoApp.appointmentId = 1;
                ITSoApp.start = "2017-01-13T10:02:59.0000000Z";
                ITSoApp.end = "2017-01-13T10:07:59.0000000Z";
                ITSoApp.tsoId = 1;
                listOfITSoApp.Add(ITSoApp);
                mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                return mockDcrTsoListTimeApp;
            });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
            {
                DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                return DCRUpdateTimePeriod;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateRep;
           });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppRes;
           });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCal;
           });

            //When ResourceIdList > 0
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId , mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockDcrResource.func_msg = ServiceResponse.status_ok;
               mockDcrResource.func_status = ENUM_Cmd_Status.ok;
               return mockDcrResource;
           });

            IDCR_Added mockDCRAddedCreateAppCalRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid,  mockDcOrgResourceId, mockDcOrgAppointmentId,  mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCalRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCalRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCalRes;
           });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
                   {
                       mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTSO.func_msg = ServiceResponse.status_ok;
                       mockDcrTSO.tsoId = 1;
                       mockDcrTSO.start = "2017-01-13T10:02:59.0000000Z";
                       mockDcrTSO.end = "2017-01-13T10:07:59.0000000Z";
                       return mockDcrTSO;
                   });

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriod = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriod = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriod.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriod.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriod.Add(mockIInstantStartStopTimePeriod);
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriod;
            });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithUpdateAppointmentTypeUpdateSingleTsoid_ReadTSoFuncStatuNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();

            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.tsoId = 1;


            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
           {
               return true;
           });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
              mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
              mockDcrAppointmentOptions.orgId = 43242;
              mockDcrAppointmentOptions.creatorId = 1;
              return mockDcrAppointmentOptions;
          });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListResMap;
          });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListCalMap;
          });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid,  mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
            {
                listOfCalResMapIDs.Add(CalResMapID);
                mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                return mockDcrIdListCalResMap;
            });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoRes.repeatId = 1;
                listOfITSoRes.Add(ITSoRes);
                mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                return mockDcrIdListTimeRes;
            });

            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteResMap;
           });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteCalMap;
           });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteRepMap;
           });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoApp.appointmentId = 1;
                ITSoApp.start = "2017-01-13T10:02:59.0000000Z";
                ITSoApp.end = "2017-01-13T10:07:59.0000000Z";
                ITSoApp.tsoId = 1;
                listOfITSoApp.Add(ITSoApp);
                mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                return mockDcrTsoListTimeApp;
            });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
            {
                DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                return DCRUpdateTimePeriod;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateRep;
           });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppRes;
           });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCal;
           });

            //When ResourceIdList > 0
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId , mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockDcrResource.func_msg = ServiceResponse.status_ok;
               mockDcrResource.func_status = ENUM_Cmd_Status.ok;
               return mockDcrResource;
           });

            IDCR_Added mockDCRAddedCreateAppCalRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid,  mockDcOrgResourceId, mockDcOrgAppointmentId,  mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCalRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCalRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCalRes;
           });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTSO.func_msg = ServiceResponse.status_unknown;
                mockDcrTSO.tsoId = 1;
                mockDcrTSO.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrTSO.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrTSO;
            });

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriod = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriod = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriod.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriod.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriod.Add(mockIInstantStartStopTimePeriod);
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriod;
            });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithUpdateAppointmentTypeUpdateAllAfterTsoid()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();

            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All_After_Tsoid;
            mockDcUpdateAppointment.tsoId = 1;


            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
           {
               return true;
           });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
              mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
              mockDcrAppointmentOptions.orgId = 43242;
              mockDcrAppointmentOptions.creatorId = 1;
              return mockDcrAppointmentOptions;
          });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListResMap;
          });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListCalMap;
          });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid,  mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
            {
                listOfCalResMapIDs.Add(CalResMapID);
                mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                return mockDcrIdListCalResMap;
            });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoRes.repeatId = 1;
                listOfITSoRes.Add(ITSoRes);
                mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                return mockDcrIdListTimeRes;
            });

            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteResMap;
           });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteCalMap;
           });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteRepMap;
           });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoApp.appointmentId = 1;
                ITSoApp.start = "2017-01-13T10:02:59.0000000Z";
                ITSoApp.end = "2017-01-13T10:07:59.0000000Z";
                ITSoApp.tsoId = 1;
                listOfITSoApp.Add(ITSoApp);
                mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                return mockDcrTsoListTimeApp;
            });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
            {
                DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                return DCRUpdateTimePeriod;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateRep;
           });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppRes;
           });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCal;
           });

            //When ResourceIdList > 0
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId , mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockDcrResource.func_msg = ServiceResponse.status_ok;
               mockDcrResource.func_status = ENUM_Cmd_Status.ok;
               return mockDcrResource;
           });

            IDCR_Added mockDCRAddedCreateAppCalRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid,  mockDcOrgResourceId, mockDcOrgAppointmentId,  mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCalRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCalRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCalRes;
           });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.tsoId = 1;
                mockDcrTSO.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrTSO.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrTSO;
            });

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriod = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriod = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriod.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriod.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriod.Add(mockIInstantStartStopTimePeriod);
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriod;
            });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCR_Update.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_UpdateAppointmentWithUpdateAppointmentTypeNotSet()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IUpdateTSO mockUpdateTSO = Substitute.For<IUpdateTSO>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IOrgTsoCalendarId mockOrgTsoCalendarId = Substitute.For<IOrgTsoCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTso mockDcTso = Substitute.For<IDcTso>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatAppointment mockDcMapRepeatAppointment = Substitute.For<IDcMapRepeatAppointment>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcMapResourceAppointment mockDcMapResourceAppointment = Substitute.For<IDcMapResourceAppointment>();
            IDcMapCalendarAppointment mockDcMapCalendarAppointment = Substitute.For<IDcMapCalendarAppointment>();
            ITSO mockITSO = Substitute.For<ITSO>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> listOfRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions RepeatOptions = Substitute.For<IRepeatOptions>();

            mockDcUpdateAppointment.coreProj = mockCoreProj;
            mockDcUpdateAppointment.cmd_user_id = 1;
            mockDcUpdateAppointment.orgId = 43242;
            mockDcUpdateAppointment.calendarIdList = listOfCalIds;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.resourceIdList = listOfResIds;
            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.timeZoneIANA = "Us";
            //mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_All_After_Tsoid;
            mockDcUpdateAppointment.tsoId = 1;


            //List<IRepeatOptions>
            RepeatOptions.start = DateTime.Now.ToString();
            RepeatOptions.end = DateTime.Now.ToString();
            listOfRepeatOptions.Add(RepeatOptions);
            mockDcUpdateAppointment.repeatRuleOptions = listOfRepeatOptions;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcUpdateAppointment, typeof(IDcUpdateAppointment)).Returns(x =>
           {
               return true;
           });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateAppointment.coreProj, mockCoreSc, mockCoreDb, mockUtils,
                mockDcUpdateAppointment.cmd_user_id, mockDcUpdateAppointment.orgId, ENUM_Core_Function.CF_updateAppointment).Returns(x =>
                {
                    return true;
                });
            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
              mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
              mockDcrAppointmentOptions.orgId = 43242;
              mockDcrAppointmentOptions.creatorId = 1;
              return mockDcrAppointmentOptions;
          });

            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListResMap;
          });

            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
              mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
              return mockDcrIdListCalMap;
          });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateAppointment.coreProj,mockCoreSc, mockTimeStartEnd, mockDcUpdateAppointment.repeatRuleOptions[0], mockDcUpdateAppointment.timeZoneIANA, true, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriodCollection = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriodCollection.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriodCollection.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriodCollection.Add(mockIInstantStartStopTimePeriodCollection);
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriodCollection;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            //mockListIInstantStartStopTimePeriods.Add(IInstantStartStopTimePeriods);

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriods, listOfIInstantStartStopTimePeriods).ReturnsForAnyArgs(x =>
            {

                return listOfIInstantStartStopTimePeriods;
            });

            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockUtils, mockValid, mockCoreSc, mockCoreDb).ReturnsForAnyArgs(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            IDcrIdList mockDcrIdListCalResMap = Substitute.For<IDcrIdList>();
            List<int> listOfCalResMapIDs = Substitute.For<List<int>>();
            int CalResMapID = 1;

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid,  mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
            {
                listOfCalResMapIDs.Add(CalResMapID);
                mockDcrIdListCalResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalResMap.ListOfIDs = listOfCalResMapIDs;

                return mockDcrIdListCalResMap;
            });

            IDcrTsoList mockDcrIdListTimeRes = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoRes = Substitute.For<List<ITSO>>();
            ITSO ITSoRes = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoRes.repeatId = 1;
                listOfITSoRes.Add(ITSoRes);
                mockDcrIdListTimeRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimeRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimeRes.timeScaleList = listOfITSoRes;
                return mockDcrIdListTimeRes;
            });

            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Resource_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTSOResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteResMap;
           });
            IDCR_Delete mockDCRDeleteCalMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Appointment_Calendar_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcCalendarId, mockDcTSOCalendarId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteCalMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteCalMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteCalMap;
           });
            IDCR_Delete mockDCRDeleteRepMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Appointment_Repeat_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcAppointmentRepeatId, mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRDeleteRepMap.func_msg = ServiceResponse.status_ok;
               mockDCRDeleteRepMap.func_status = ENUM_Cmd_Status.ok;
               return mockDCRDeleteRepMap;
           });
            mockCoreDb.Update_AppointmentOptions(mockDcUpdateAppointment.coreProj, mockDcUpdateAppointment).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            IDcrTsoList mockDcrTsoListTimeApp = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoApp = Substitute.For<List<ITSO>>();
            ITSO ITSoApp = Substitute.For<ITSO>();
             mockCoreSc.Read_All_TimePeriods_For_Appointment(mockDcOrgAppointmentId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                ITSoApp.appointmentId = 1;
                ITSoApp.start = "2017-01-13T10:02:59.0000000Z";
                ITSoApp.end = "2017-01-13T10:07:59.0000000Z";
                ITSoApp.tsoId = 1;
                listOfITSoApp.Add(ITSoApp);
                mockDcrTsoListTimeApp.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimeApp.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimeApp.timeScaleList = listOfITSoApp;
                return mockDcrTsoListTimeApp;
            });
            IDCR_Update DCRUpdateTimePeriod = Substitute.For<IDCR_Update>();
             mockCoreSc.Update_TimePeriod(mockUpdateTSO, mockUtils, mockValid, mockITSO,mockCoreSc,mockCoreDb ).Returns(x =>
            {
                DCRUpdateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                DCRUpdateTimePeriod.func_msg = ServiceResponse.status_ok;
                return DCRUpdateTimePeriod;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateRep;
           });

            IDCR_Added mockDCRAddedCreateAppRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Repeat_Map(mockDcMapRepeatAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppRes;
           });


            IDCR_Added mockDCRAddedCreateAppCal = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Calendar_Mapping(mockDcMapCalendarAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcRepeatId, mockDCResourceTimeRange, mockDcTsoId, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcCalendarId, mockDcOrgResourceId, mockListOfOrgTsoCalendarIds, mockCalendarTimeRange, mockDcOrgId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCal.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCal.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCal;
           });

            //When ResourceIdList > 0
            IDcrResource mockDcrResource = Substitute.For<IDcrResource>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId , mockUtils, mockValid, mockCoreSc,mockCoreDb).Returns(x =>
           {
               mockDcrResource.func_msg = ServiceResponse.status_ok;
               mockDcrResource.func_status = ENUM_Cmd_Status.ok;
               return mockDcrResource;
           });

            IDCR_Added mockDCRAddedCreateAppCalRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Appointment_Resource_Mapping(mockDcMapResourceAppointment, mockUtils, mockValid,  mockDcOrgResourceId, mockDcOrgAppointmentId,  mockDCResourceTimeRange, mockResourceTimeRange, mockDcOrgId, mockDcResourceTSO, mockTsoResourceId, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDCRAddedCreateAppCalRes.func_status = ENUM_Cmd_Status.ok;
               mockDCRAddedCreateAppCalRes.func_msg = ServiceResponse.status_ok;
               return mockDCRAddedCreateAppCalRes;
           });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
             mockCoreSc.Read_TSo(mockDcTsoId,  mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.tsoId = 1;
                mockDcrTSO.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrTSO.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrTSO;
            });

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriod = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriod = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriod.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStopTimePeriod.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockListIInstantStartStopTimePeriod.Add(mockIInstantStartStopTimePeriod);
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).ReturnsForAnyArgs(x =>
            {

                return mockListIInstantStartStopTimePeriod;
            });

            IDCR_Update IDCR_Update = scOrgAppointments.Update_Appointment(mockDcUpdateAppointment, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcCalendarId, mockDcOrgResourceId, mockDcTSOResourceId, mockDcAppointmentRepeatId, mockDcTSOCalendarId, mockDcTsoId, mockITSO, mockUpdateTSO, mockDcCreateRepeat, mockDcCalendarTimeRange, mockDcResourceTSO, mockDcCalendarTSO, mockTsoResourceId, mockOrgTsoCalendarId, mockDcCalendarsTSOs, mockDcRepeatId, mockDCResourceTimeRange, mockListOfOrgTsoCalendarIds, mockDcTso, mockDcTsos, mockDcMapRepeatAppointment, mockResourceTimeRange, mockDcOrgId, mockCalendarTimeRange, mockDcMapResourceAppointment, mockDcMapCalendarAppointment, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCR_Update.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCR_Update.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCR_Update.func_msg);
            //---------- Assert----------------
        }


        #endregion

        #region Read_All_Appointment_TSoIds_Filter_By_Repeat_ID
        [TestMethod]
        public void SC_Org_Appointments_ReadAllAppointmentTSoIdsFilterByRepeatID()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            List<int> tsoIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreDb.Read_All_TimePeriod_Appointment_Repeat_Maps(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId.appointmentId, mockDcAppointmentRepeatId.repeatId, out tsoIds).ReturnsForAnyArgs(x =>
              {
                  Ids = 1;
                  tsoIds.Add(Ids);
                  x[3] = tsoIds;
                  return ENUM_DB_Status.DB_SUCCESS;
              });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb);
            
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(1, IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllAppointmentTSoIdsFilterByRepeatIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return false;
            });
            List<int> tsoIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreDb.Read_All_TimePeriod_Appointment_Repeat_Maps(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId.appointmentId, mockDcAppointmentRepeatId.repeatId, out tsoIds).ReturnsForAnyArgs(x =>
            {
                Ids = 1;
                tsoIds.Add(Ids);
                x[2] = tsoIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllAppointmentTSoIdsFilterByRepeatIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = 1;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            List<int> tsoIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreDb.Read_All_TimePeriod_Appointment_Repeat_Maps(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId.appointmentId, mockDcAppointmentRepeatId.repeatId, out tsoIds).ReturnsForAnyArgs(x =>
            {
                Ids = 1;
                tsoIds.Add(Ids);
                x[3] = tsoIds;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_ReadAllAppointmentTSoIdsFilterByRepeatIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            List<int> tsoIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreDb.Read_All_TimePeriod_Appointment_Repeat_Maps(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId.appointmentId, mockDcAppointmentRepeatId.repeatId, out tsoIds).ReturnsForAnyArgs(x =>
            {
                Ids = 1;
                tsoIds.Add(Ids);
                x[3] = tsoIds;
                return ENUM_DB_Status.DB_FAIL;
            });

            IDcrIdList IDcrIdList = scOrgAppointments.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_Org_Appointment_Repeat_Mapping 
        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentRepeatMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId.cmd_user_id, mockDcAppointmentRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentRepeatMApping).Returns(x =>
              {
                  return true;
              });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIds.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId, mockDcAppointmentRepeatId).ReturnsForAnyArgs(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentRepeatMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId.cmd_user_id, mockDcAppointmentRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentRepeatMApping).Returns(x =>
            {
                return true;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIds.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId, mockDcAppointmentRepeatId).ReturnsForAnyArgs(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentRepeatMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId.cmd_user_id, mockDcAppointmentRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentRepeatMApping).Returns(x =>
            {
                return false;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIds.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId, mockDcAppointmentRepeatId).ReturnsForAnyArgs(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentRepeatMappingWithReadAppointmentOptionsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId.cmd_user_id, mockDcAppointmentRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentRepeatMApping).Returns(x =>
            {
                return true;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_unknown;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIds.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId, mockDcAppointmentRepeatId).ReturnsForAnyArgs(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentRepeatMappingWithReadAllAppointmentTSoIdsFilterByRepeatIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId.cmd_user_id, mockDcAppointmentRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentRepeatMApping).Returns(x =>
            {
                return true;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIds.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdList.func_msg = ServiceResponse.status_unknown;
               mockDcrIdList.ListOfIDs = listOfIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId, mockDcAppointmentRepeatId).ReturnsForAnyArgs(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentRepeatMappingWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId.cmd_user_id, mockDcAppointmentRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentRepeatMApping).Returns(x =>
            {
                return true;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIds.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_unknown;
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.Unknown;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId, mockDcAppointmentRepeatId).ReturnsForAnyArgs(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Appointments_DeleteOrgAppointmentRepeatMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentRepeatId mockDcAppointmentRepeatId = Substitute.For<IDcAppointmentRepeatId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcAppointmentRepeatId.coreProj = mockCoreProj;
            mockDcAppointmentRepeatId.cmd_user_id = -123999;
            mockDcAppointmentRepeatId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId, typeof(IDcAppointmentRepeatId)).Returns(x =>
            {
                return true;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcAppointmentRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcAppointmentRepeatId.cmd_user_id, mockDcAppointmentRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgAppointmentRepeatMApping).Returns(x =>
            {
                return true;
            });

            IDcrAppointment mockDcrAppointmentOptions = Substitute.For<IDcrAppointment>();
            mockCoreSc.Read_Appointment_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               mockDcrAppointmentOptions.func_status = ENUM_Cmd_Status.ok;
               mockDcrAppointmentOptions.func_msg = ServiceResponse.status_ok;
               return mockDcrAppointmentOptions;
           });

            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            mockCoreSc.Read_All_Appointment_TSoIds_Filter_By_Repeat_ID(mockDcAppointmentRepeatId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIds.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIds;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDeleteTSO = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDeleteTSO.func_msg = ServiceResponse.status_ok;
              mockDCRDeleteTSO.func_status = ENUM_Cmd_Status.ok;
              return mockDCRDeleteTSO;
          });

            mockCoreDb.Delete_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId.coreProj, mockDcAppointmentRepeatId, mockDcAppointmentRepeatId).ReturnsForAnyArgs(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_Org_Appointment_Repeat_Mapping(mockDcAppointmentRepeatId, mockUtils, mockValid, mockDcOrgAppointmentId, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Appointment_TSO_Mappings_By_Appointment_ID
        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentTSOMappingsByAppointmentID()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = -123999;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIDs = Substitute.For<List<int>>();
            int Ids;

            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIDs.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIDs;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                mockDCRDelete.func_msg = ServiceResponse.status_ok;
                return mockDCRDelete;
            });


            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentTSOMappingsByAppointmentIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = -123999;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return false;
             });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIDs = Substitute.For<List<int>>();
            int Ids;

            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIDs.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIDs;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
              mockDCRDelete.func_msg = ServiceResponse.status_ok;
              return mockDCRDelete;
          });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,   mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentTSOMappingsByAppointmentIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = 1;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIDs = Substitute.For<List<int>>();
            int Ids;

            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIDs.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIDs;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
              mockDCRDelete.func_msg = ServiceResponse.status_ok;
              return mockDCRDelete;
          });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,   mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentTSOMappingsByAppointmentIDWithReadAllOrgAppointmentTSoIdsByAppointmentIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = -123999;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIDs = Substitute.For<List<int>>();
            int Ids;

            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIDs.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
               mockDcrIdList.func_msg = ServiceResponse.status_unknown;
               mockDcrIdList.ListOfIDs = listOfIDs;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
              mockDCRDelete.func_msg = ServiceResponse.status_ok;
              return mockDCRDelete;
          });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,   mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Appointments_DeleteAllAppointmentTSOMappingsByAppointmentIDWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Appointments scOrgAppointments = new SC_Org_Appointments();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcAppointmentId mockDcOrgAppointmentId = Substitute.For<IDcAppointmentId>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            mockDcOrgAppointmentId.coreProj = mockCoreProj;
            mockDcOrgAppointmentId.cmd_user_id = -123999;
            mockDcOrgAppointmentId.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgAppointmentId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockDcOrgAppointmentId, typeof(IDcAppointmentId)).Returns(x =>
             {
                 return true;
             });
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            List<int> listOfIDs = Substitute.For<List<int>>();
            int Ids;

            mockCoreSc.Read_All_Org_Appointment_TSoIds_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid, mockCoreSc, mockCoreDb).Returns(x =>
           {
               Ids = 1;
               listOfIDs.Add(Ids);
               mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
               mockDcrIdList.func_msg = ServiceResponse.status_ok;
               mockDcrIdList.ListOfIDs = listOfIDs;
               return mockDcrIdList;
           });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
          {
              mockDCRDelete.func_status = ENUM_Cmd_Status.Unknown;
              mockDCRDelete.func_msg = ServiceResponse.status_unknown;
              return mockDCRDelete;
          });

            IDCR_Delete IDCRDelete = scOrgAppointments.Delete_All_Appointment_TSO_Mappings_By_Appointment_ID(mockDcOrgAppointmentId, mockUtils, mockValid,   mockDcTsoId, mockCoreSc, mockCoreDb);
            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion
    }

};
